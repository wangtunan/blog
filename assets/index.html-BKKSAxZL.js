import{_ as t,c as p,a,e as o,b as e,r as c,o as l}from"./app-ug_sVrMA.js";const i={};function u(r,n){const s=c("leetcode-link");return l(),p("div",null,[n[0]||(n[0]=a("h1",{id:"困难",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#困难"},[a("span",null,"困难")])],-1)),n[1]||(n[1]=a("h2",{id:"_124-二叉树中的最大路径和",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_124-二叉树中的最大路径和"},[a("span",null,"124.二叉树中的最大路径和")])],-1)),o(s,{title:"124.二叉树中的最大路径和",link:"https://leetcode.cn/problems/binary-tree-maximum-path-sum"}),n[2]||(n[2]=e(`<p>方法一：深度优先遍历</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// way1: 深度优先遍历</span></span>
<span class="line"><span class="token comment">// n为二叉树节点的数量</span></span>
<span class="line"><span class="token comment">// 时间复杂度：O(n)，每个节点都需要遍历</span></span>
<span class="line"><span class="token comment">// 空间复杂度：O(n)，最坏情况为一个链表，递归调用栈的内存开销为O(n)</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">maxPathSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">var</span> maxSum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">var</span> <span class="token function-variable function">maxGain</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> leftGain <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxGain</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> rightGain <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxGain</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> pathGain <span class="token operator">=</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> leftGain <span class="token operator">+</span> rightGain<span class="token punctuation">;</span></span>
<span class="line">    maxSum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxSum<span class="token punctuation">,</span> pathGain<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftGain<span class="token punctuation">,</span> rightGain<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">maxGain</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> maxSum<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div>`,2))])}const m=t(i,[["render",u]]),d=JSON.parse('{"path":"/algorithm/leetcode/tree/hard/","title":"困难","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1748271331000,"contributors":[{"name":"wangtunan","username":"wangtunan","email":"why583440138@gmail.com","commits":1,"url":"https://github.com/wangtunan"}],"changelog":[{"hash":"74c8bf57080593fba5e75b94a6f446cf86a12560","time":1748271331000,"email":"why583440138@gmail.com","author":"wangtunan","message":"blog RAG结构化文档向量文章撰写"}]},"filePathRelative":"algorithm/leetcode/tree/hard/README.md"}');export{m as comp,d as data};
