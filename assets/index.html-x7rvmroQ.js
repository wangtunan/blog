import{_ as a,r as c,o as n,c as i,a as e,b as t,e as o,d}from"./app-ReW0Q1QB.js";const s={},l=d('<h1 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h1><p><strong>图</strong>：是一种非线性数据结构，由顶点(vertex)和边(edge)组成。可以将图<code>G</code>抽象的表示为一组顶点<code>V</code>和一组边<code>E</code>的集合。</p><p>相较于线性关系（链表）和分治关系（树），网络关系（图）的自由度更高，因而更为复杂。 <img src="https://www.hello-algo.com/chapter_graph/graph.assets/linkedlist_tree_graph.png" alt="链表、二叉树、图"></p><p>在图中，其常见术语如下：</p><ul><li><strong>邻接adjacency</strong>： 当两个顶点有边相连时，称这两个顶点邻接。</li><li><strong>路径path</strong>：从顶点A到顶点B所经过的边构成的序列，称A到B的路径。</li><li><strong>度degree</strong>：一个顶点拥有的边数。在有向图中，<strong>入度</strong>表示有多少条边指向该节点。<strong>出度</strong>表示有多少条边从这个顶点指出。</li></ul><h2 id="图-1" tabindex="-1"><a class="header-anchor" href="#图-1" aria-hidden="true">#</a> 图</h2><h3 id="图的常见类型" tabindex="-1"><a class="header-anchor" href="#图的常见类型" aria-hidden="true">#</a> 图的常见类型</h3><p>根据边是否有方向，可以将图划分为：</p><ul><li><strong>有向图</strong>：在有向图中，边具有方向，即A =&gt; B和 B =&gt; A两个方向是相互独立的，例如社交网络中的关注和被关注的关系。</li><li><strong>无向图</strong>：在无向图中，边表示两顶点之间的双向连接关系，例如社交网络中的好友关系。</li></ul><p><img src="https://www.hello-algo.com/chapter_graph/graph.assets/directed_graph.png" alt="有向图、无向图"></p><p>根据所有顶点是否连通，可以将图划分为：</p><ul><li><strong>非连通图</strong>：在非连通图中，从某个顶点触发，至少有一个顶点是无法到达的。</li><li><strong>连通图</strong>：在连通图中，从某个顶点触发，可以到达其它任意顶点。</li></ul><p><img src="https://www.hello-algo.com/chapter_graph/graph.assets/connected_graph.png" alt="连通图和非连通图"></p><p>根据边是否添加权重，可以将图划分为：</p><ul><li><strong>无权图</strong>：即普通图。</li><li><strong>有权图</strong>：在有权图中，会为每条边添加一个数值，依据数值关系，可以达到某种程序目的。例如亲密度网络。</li></ul><p><img src="https://www.hello-algo.com/chapter_graph/graph.assets/weighted_graph.png" alt="有权图"></p><h3 id="图的表示" tabindex="-1"><a class="header-anchor" href="#图的表示" aria-hidden="true">#</a> 图的表示</h3><p>图的表示方式通常有：<strong>邻接矩阵</strong>和<strong>邻接表</strong>两种方式。</p><p><strong>邻接矩阵</strong>：设顶点数量为<code>N</code>，邻接矩阵<code>adjacency matrix</code>使用<code>N * N</code>大小的矩阵来表示图，每一行、每一列代表一个顶点，矩阵元素代表边。在矩阵中，使用<code>0</code>和<code>1</code>表示两个顶点之间是否存在边。</p><p><img src="https://www.hello-algo.com/chapter_graph/graph.assets/adjacency_matrix.png" alt="邻接矩阵"></p><p>邻接矩阵有如下特点：</p><ol><li>顶点不能和自身相连，因此矩阵的<strong>主对角线元素没有意义</strong>。</li><li>对于无向图，两个方向的边是等价的，因此<strong>邻接矩阵关于主对角线对称</strong>。</li><li>将邻接矩阵的元素，从<code>0/1</code>换成权重，则可表示有权图。</li><li>可以直接访问矩阵元素以获取边，因此邻接矩阵的增、删、查、改的<strong>效率非常高</strong>，时间复杂度都是<code>O(1)</code>，然而矩阵空间的复杂度为<code>O(n)</code>，需要<strong>占用更多的内存</strong>。</li></ol><p><strong>邻接表</strong>：使用后<code>N</code>个链表来表示图，其中链表头结点表示顶点，其它链表节点表示与头结点相邻的其它顶点。</p><p><img src="https://www.hello-algo.com/chapter_graph/graph.assets/adjacency_list.png" alt="邻接表"></p><p>邻接表有如下特点：</p><ol><li>仅存储实际存在的边，而边的总数通常远小于N²，所以更<strong>节省内存</strong>。然而需要遍历链表查找表，<strong>时间效率不如邻接矩阵</strong>。</li><li>可以把邻接表转化为<code>AVL</code>树或红黑树，将时间效率优化到<code>O(logn)</code>。或者转换为哈希表，将时间效率优化到<code>O(1)</code>。</li></ol><h2 id="图的基本操作和实现" tabindex="-1"><a class="header-anchor" href="#图的基本操作和实现" aria-hidden="true">#</a> 图的基本操作和实现</h2><p>图的基本操作可分为<strong>对边的操作</strong>和<strong>对顶点的操作</strong>两种。</p><h3 id="基于邻接矩阵的实现" tabindex="-1"><a class="header-anchor" href="#基于邻接矩阵的实现" aria-hidden="true">#</a> 基于邻接矩阵的实现</h3><p>假设给定一个顶点数量为<code>N</code>的无向图，其相关操作如下：</p><ul><li><code>init()</code>: 初始化图。</li><li><code>addEdge(i, i)</code>: 添加边。</li><li><code>removeEdge(i, j)</code>: 删除边。</li><li><code>addVertex(val)</code>: 添加顶点。</li><li><code>removeVertex(index)</code>: 删除顶点。</li><li><code>getSize()</code>：获取顶点数量。</li><li><code>getVertices()</code>：获取顶点列表</li><li><code>getAdjacencyMatrix()</code>：获取邻接矩阵。</li></ul>',31),h={href:"https://github.com/wangtunan/js-algorithm/blob/master/src/graph/adjacencyMatrixGraph.js",target:"_blank",rel:"noopener noreferrer"},g=d('<h3 id="基于邻接表的实现" tabindex="-1"><a class="header-anchor" href="#基于邻接表的实现" aria-hidden="true">#</a> 基于邻接表的实现</h3><p>假设无向图的顶点总数为<code>N</code>，边数为<code>M</code>，其相关操作如下：</p><ul><li><code>init()</code>: 初始化图。</li><li><code>addEdge(v1, v2)</code>: 添加边。</li><li><code>removeEdge(v1, v2)</code>: 删除边。</li><li><code>addVertex(v)</code>: 添加顶点。</li><li><code>removeVertex(v)</code>: 删除顶点。</li><li><code>getSize()</code>: 获取顶点数量。</li><li><code>getAdjacencyList()</code>：获取邻接表。</li></ul>',3),p={href:"https://github.com/wangtunan/js-algorithm/blob/master/src/graph/adjacencyListGraph.js",target:"_blank",rel:"noopener noreferrer"},_=d('<h3 id="效率对比" tabindex="-1"><a class="header-anchor" href="#效率对比" aria-hidden="true">#</a> 效率对比</h3><p>假设图中有<code>N</code>个顶点和<code>M</code>条边，则以上两种实现方案的效率对比如下：</p><table><thead><tr><th>操作</th><th>邻接矩阵</th><th>邻接表(链表)</th><th>邻接表(哈希表)</th></tr></thead><tbody><tr><td>判断是否邻接</td><td>O(1)</td><td>O(m)</td><td>O(1)</td></tr><tr><td>添加边</td><td>O(1)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>删除边</td><td>O(1)</td><td>O(m)</td><td>O(1)</td></tr><tr><td>添加顶点</td><td>O(n)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>删除顶点</td><td>O(n²)</td><td>O(n + m)</td><td>O(n)</td></tr><tr><td>内存占用</td><td>O(n²)</td><td>O(n + m)</td><td>O(n + m)</td></tr></tbody></table><p>整体来看，基于邻接矩阵实现的图，体现了以<strong>空间换时间</strong>的思想；而基于邻接表实现的图，则体现了以<strong>时间换空间</strong>的思想。</p><h2 id="图的遍历" tabindex="-1"><a class="header-anchor" href="#图的遍历" aria-hidden="true">#</a> 图的遍历</h2><h3 id="广度优先遍历" tabindex="-1"><a class="header-anchor" href="#广度优先遍历" aria-hidden="true">#</a> 广度优先遍历</h3><h3 id="深度优先遍历" tabindex="-1"><a class="header-anchor" href="#深度优先遍历" aria-hidden="true">#</a> 深度优先遍历</h3>',7);function m(u,x){const r=c("ExternalLinkIcon");return n(),i("div",null,[l,e("p",null,[t("完整实现，请参考"),e("a",h,[t("基于邻接矩阵实现的图"),o(r)])]),g,e("p",null,[t("完整实现，请参考"),e("a",p,[t("基于邻接表实现的图"),o(r)])]),_])}const f=a(s,[["render",m],["__file","index.html.vue"]]);export{f as default};
