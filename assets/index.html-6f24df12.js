import{_ as s,r as t,o as p,c as e,a as n,b as o,e as c,d as r}from"./app-73ecf878.js";const u={},i=r(`<h1 id="动态规划" tabindex="-1"><a class="header-anchor" href="#动态规划" aria-hidden="true">#</a> 动态规划</h1><p>动态规划<code>Dynamic Programming</code>是一种重要的算法范式，它将一个问题分解为一系列更小的子问题，并通过存储子问题的解来避免重复计算，从而大幅提升时间效率。</p><h2 id="初探动态规划" tabindex="-1"><a class="header-anchor" href="#初探动态规划" aria-hidden="true">#</a> 初探动态规划</h2><p>假设给定<code>n</code>个楼梯，每步只能1阶或者2阶，请问有多少种方案可以爬到楼顶？我们以<code>n</code>为3具体，具体爬楼梯过程如下图： <img src="https://www.hello-algo.com/chapter_dynamic_programming/intro_to_dynamic_programming.assets/climbing_stairs_example.png" alt="动态规划-爬楼梯"></p><h3 id="方法一-回溯" tabindex="-1"><a class="header-anchor" href="#方法一-回溯" aria-hidden="true">#</a> 方法一：回溯</h3><p>对于这一个问题，可以用上一节回溯算法来实现，其代码如下：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">backTracking</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> n<span class="token punctuation">,</span> choices<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 爬到第n个台阶，数量加1</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 遍历所有选择</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> choice <span class="token keyword">of</span> choices<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 剪枝：不允许超过n</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>state <span class="token operator">+</span> choice <span class="token operator">&gt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 尝试：做出选择，更新状态</span>
    <span class="token function">backTracking</span><span class="token punctuation">(</span>state <span class="token operator">+</span> choice<span class="token punctuation">,</span> n<span class="token punctuation">,</span> choices<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 回退：无</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">climbingStairsBacktrack</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 步骤选择</span>
  <span class="token keyword">const</span> choices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 从0阶开始爬</span>
  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 存储最终结果</span>
  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">backTracking</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> n<span class="token punctuation">,</span> choices<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="方法二-暴力搜索" tabindex="-1"><a class="header-anchor" href="#方法二-暴力搜索" aria-hidden="true">#</a> 方法二：暴力搜索</h3><h3 id="方法三-记忆化搜索" tabindex="-1"><a class="header-anchor" href="#方法三-记忆化搜索" aria-hidden="true">#</a> 方法三：记忆化搜索</h3><h3 id="方法四-动态规划" tabindex="-1"><a class="header-anchor" href="#方法四-动态规划" aria-hidden="true">#</a> 方法四：动态规划</h3><h2 id="dp问题特性" tabindex="-1"><a class="header-anchor" href="#dp问题特性" aria-hidden="true">#</a> DP问题特性</h2><h2 id="dp解题思路" tabindex="-1"><a class="header-anchor" href="#dp解题思路" aria-hidden="true">#</a> DP解题思路</h2><h2 id="_0-1背包问题" tabindex="-1"><a class="header-anchor" href="#_0-1背包问题" aria-hidden="true">#</a> 0-1背包问题</h2><h2 id="完全背包问题" tabindex="-1"><a class="header-anchor" href="#完全背包问题" aria-hidden="true">#</a> 完全背包问题</h2><h2 id="编辑距离问题" tabindex="-1"><a class="header-anchor" href="#编辑距离问题" aria-hidden="true">#</a> 编辑距离问题</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,16),l={href:"https://www.hello-algo.com/chapter_dynamic_programming/",target:"_blank",rel:"noopener noreferrer"};function k(d,h){const a=t("ExternalLinkIcon");return p(),e("div",null,[i,n("ul",null,[n("li",null,[n("a",l,[o("Hello 算法 动态规划"),c(a)])])])])}const f=s(u,[["render",k],["__file","index.html.vue"]]);export{f as default};
