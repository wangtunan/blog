import{_ as p,r as o,o as e,c,e as a,a as n,b as t,d as u}from"./app-X3BR2DoQ.js";const l={},i=n("h1",{id:"中等",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#中等","aria-hidden":"true"},"#"),t(" 中等")],-1),r=n("h2",{id:"_200-岛屿的数量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_200-岛屿的数量","aria-hidden":"true"},"#"),t(" 200.岛屿的数量")],-1),k=u(`<p>方法一：深度优先遍历</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// way1: 深度优先遍历</span>
<span class="token comment">// m和n分别为矩阵行的数量和列的数量</span>
<span class="token comment">// 时间复杂度：O(m * n)</span>
<span class="token comment">// 空间复杂度：O(m * n)，最坏情况下遍历完整个矩阵</span>
<span class="token keyword">var</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> grid<span class="token punctuation">.</span>length <span class="token operator">||</span>
    j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span>
    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;0&#39;</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>
  <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">numIslands</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_207-课程表" tabindex="-1"><a class="header-anchor" href="#_207-课程表" aria-hidden="true">#</a> 207.课程表</h2>`,3),d=n("h2",{id:"_208-实现-trie-前缀树",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_208-实现-trie-前缀树","aria-hidden":"true"},"#"),t(" 208.实现 Trie (前缀树)")],-1),h=n("h2",{id:"_994-腐烂的橘子",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_994-腐烂的橘子","aria-hidden":"true"},"#"),t(" 994.腐烂的橘子")],-1);function m(f,_){const s=o("leetcode-link");return e(),c("div",null,[i,r,a(s,{title:"200.岛屿的数量",link:"https://leetcode.cn/problems/number-of-islands/"}),k,a(s,{title:"207.课程表",link:"https://leetcode.cn/problems/course-schedule"}),d,a(s,{title:"208.实现 Trie (前缀树)",link:"https://leetcode.cn/problems/implement-trie-prefix-tree"}),h,a(s,{title:"994.腐烂的橘子",link:"https://leetcode.cn/problems/rotting-oranges"})])}const b=p(l,[["render",m],["__file","index.html.vue"]]);export{b as default};
