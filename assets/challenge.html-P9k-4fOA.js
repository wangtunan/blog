import{_ as t,c as o,b as p,e as a,a as l,d as e,r as c,o as i}from"./app-DK3FZFZ6.js";const r={};function k(u,s){const n=c("link-and-solution");return i(),o("div",null,[s[3]||(s[3]=p(`<h1 id="type-challenges" tabindex="-1"><a class="header-anchor" href="#type-challenges"><span>Type-Challenges</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>在学习完<code>TypeScript</code>一些基础知识后，我们已经可以熟练使用一些基本类型定义了，但对于<code>TypeScript</code>的高级用法却依旧无法入门，为了更有趣的学习<code>TypeScript</code>高级用法，我们选择<a href="https://github.com/type-challenges/type-challenges/blob/master/README.zh-CN.md" target="_blank" rel="noopener noreferrer">Type-Challenges</a>类型挑战来作为我们学习的目标。</p><p>在<code>Type-Challenges</code>中，可以从简单(<code>easy</code>)、中等(<code>medium</code>)、困难(<code>hard</code>)以及地狱(<code>extreme</code>)难度，循序渐进的学习<code>TypeScript</code>高级技巧。</p><p>如果你需要选择其它的方向来深入学习<code>TypeScript</code>高级技巧，这里也有一些推荐的开源项目：</p><ul><li>官方内置：在<code>lib.es5.d.ts</code>文件中，<code>TypeScript</code>官方默认内置了一些辅助工具函数，例如：<code>Partial</code>、<code>Required</code>、<code>Pick</code>以及<code>Record</code>等等。</li><li>其它开源库：<a href="https://github.com/piotrwitek/utility-types" target="_blank" rel="noopener noreferrer">utility-types</a>、<a href="https://github.com/millsp/ts-toolbelt" target="_blank" rel="noopener noreferrer">ts-toolbelt</a>、<a href="https://github.com/andnp/SimplyTyped" target="_blank" rel="noopener noreferrer">SimplyTyped</a></li></ul><p>在之后的挑战中，我们会尽力对每道题进行必要的讲解，力争在进行<code>Type-Challenges</code>类型挑战时弄清楚所有涉及到的知识点。</p><h2 id="核心知识点" tabindex="-1"><a class="header-anchor" href="#核心知识点"><span>核心知识点</span></a></h2><h3 id="加号和减号" tabindex="-1"><a class="header-anchor" href="#加号和减号"><span>加号和减号</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>加号和减号的用法类似。</p></div><p>在一些内置工具中，可能会出现<code>+</code>或者<code>-</code>这些符号，例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：{ name: string; age: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Required<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>观察以上结果可以得出结论：<code>-?</code>是去掉类型中属性后面的<code>?</code>，整个<code>Required</code>的实际效果是去掉<code>T</code>类型中所有属性键后面的<code>?</code>，让所有属性变成必填的。</p><h3 id="keyof-和-in" tabindex="-1"><a class="header-anchor" href="#keyof-和-in"><span>keyof 和 in</span></a></h3><p><code>keyof</code>和<code>in</code>经常会连在一起使用，当它们连在一起使用时，通常表示一个迭代的过程。</p><h4 id="keyof" tabindex="-1"><a class="header-anchor" href="#keyof"><span>keyof</span></a></h4><p>在<code>TS</code>中，<code>keyof T</code>这段代码表示获取<code>T</code>类型中所有属性键，这些属性键组合成一个联合类型，例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果：&#39;name&#39; | &#39;age&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>TS</code>中的<code>keyof T</code>，它有点类似<code>JavaScript</code>中的<code>Object.keys()</code>，它们的共同点都是获取属性键的集合，只不过<code>keyof T</code>得到的结果是一个联合类型，而<code>Object.keys()</code>得到的是一个数组。</p><h4 id="in" tabindex="-1"><a class="header-anchor" href="#in"><span>in</span></a></h4><p><code>in</code>操作符的右侧通常跟一个联合类型，可以使用<code>in</code>来迭代这个联合类型，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 仅演示使用, K为每次迭代的项</span></span>
<span class="line"><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;sex&#39;</span></span>
<span class="line"><span class="token constant">K</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span> <span class="token comment">// 第一次迭代结果</span></span>
<span class="line"><span class="token constant">K</span> <span class="token operator">=</span> <span class="token string">&#39;age&#39;</span>  <span class="token comment">// 第二次迭代结果</span></span>
<span class="line"><span class="token constant">K</span> <span class="token operator">=</span> <span class="token string">&#39;sex&#39;</span>  <span class="token comment">// 第三次迭代结果</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据<code>keyof</code>和<code>in</code>的特点，我们可以撰写一些辅助工具，这里以<code>Readonly</code>为例。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果：{ readony name: string; readonly age: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>[P in keyof T]</code>：这段代码表示遍历<code>T</code>中的每一个属性键，每次遍历时属性键取名为<code>P</code>，这和<code>JavaScript</code>中的<code>for in</code>非常类似：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// ts中的迭代</span></span>
<span class="line"><span class="token constant">P</span> <span class="token keyword">in</span> keyof <span class="token constant">T</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// js中的迭代</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof"><span>typeof</span></a></h3><p><code>TS</code>中的<code>typeof</code>，可以用来获取一个<code>JavaScript</code>变量的类型，经常用于获取一个普通对象或者一个函数的类型，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;AAA&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token number">23</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：(a: number, b:number) =&gt; number</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span>  <span class="token operator">=</span> <span class="token keyword">typeof</span> add</span>
<span class="line"><span class="token comment">// 结果：{ name: string; age: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="never" tabindex="-1"><a class="header-anchor" href="#never"><span>never</span></a></h3><p><code>never</code>类型表示永远不会有值的一种类型。</p><p>例如，如果一个函数抛出一个错误，那么这个函数就可以用<code>never</code>或者<code>void</code>来表示其返回值，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// never更适合用来表示永远没有返回值的函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">handlerError</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// void适合用来表示返回值为空的函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">handlerError</span><span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<code>never</code>的另外一个知识点是：如果一个联合类型中存在<code>never</code>，那么实际的联合类型并不会包含<code>never</code>，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 定义</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">test</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">|</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token comment">// 实际</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">test</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="extends" tabindex="-1"><a class="header-anchor" href="#extends"><span>extends</span></a></h3><p><code>extends</code>关键词，一般有两种用法：<strong>类型约束</strong>和<strong>条件类型</strong>。</p><h4 id="类型约束" tabindex="-1"><a class="header-anchor" href="#类型约束"><span>类型约束</span></a></h4><p>类型约束经常和泛型一起使用：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 类型约束</span></span>
<span class="line"><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>keyof T</code>是一个整体，它表示一个联合类型。<code>U extends Union</code>这一整段表示<code>U</code>的类型被收缩在一个联合类型的范围内。例如： <code>U extends &#39;name&#39; | &#39;age&#39;</code>，则表示<code>U</code>只能为<code>name</code>或者<code>age</code>二者其中之一。</p><h4 id="条件类型" tabindex="-1"><a class="header-anchor" href="#条件类型"><span>条件类型</span></a></h4><p>常见的条件类型表现形式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token string">&#39;Y&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;N&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们发现条件类型有点像<code>JavaScript</code>中的三元表达式，事实上它们的工作原理是类似的，例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">boolean</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>                    <span class="token comment">// true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>           <span class="token comment">// true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result3</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>   <span class="token comment">// true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result4</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span>         <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在条件类型中，有一个特别需要注意的东西就是：<strong>分布式条件类型</strong>，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 内置工具：交集</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Extract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">type1</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">type2</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 交集结果：&#39;name&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span>type1<span class="token punctuation">,</span> type2<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 推理步骤</span></span>
<span class="line"><span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token function">step1：</span> <span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;name&#39;</span></span>
<span class="line">step2<span class="token operator">:</span>  <span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span>   <span class="token operator">=&gt;</span> <span class="token builtin">never</span></span>
<span class="line">result<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token builtin">never</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;name&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends U ? T : never</code>：因为<code>T</code>是一个联合类型，所以这里适用于<strong>分布式条件类型</strong>的概念。根据其概念，在实际的过程中会把<code>T</code>类型中的每一个子类型进行迭代，如下：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 第一次迭代：</span></span>
<span class="line"><span class="token string">&#39;name&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token comment">// 第二次迭代：</span></span>
<span class="line"><span class="token string">&#39;age&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在迭代完成之后，会把每次迭代的结果组合成一个新的联合类型(根据<code>never</code>类型的特点，最后的结果会剔除掉<code>never</code>)，如下：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token builtin">never</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;name&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="infer" tabindex="-1"><a class="header-anchor" href="#infer"><span>infer</span></a></h3><p><code>infer</code>关键词的作用是延时推导，它会在类型未推导时进行占位，等到真正推导成功后，它能准确的返回正确的类型。</p><p>为了更好的理解<code>infer</code>关键词的用法，我们使用<code>ReturnType</code>这个例子来说明，<code>ReturnType</code>是一个用来获取函数返回类型的工具。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果: number</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> add<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends (...args: any) =&gt; infer R</code>：如果不看<code>infer R</code>，这段代码实际表示：<code>T</code>是不是一个函数类型。</li><li><code>(...args: any) =&gt; infer R</code>：这段代码实际表示一个函数类型，其中把它的参数使用<code>args</code>来表示，把它的返回类型用<code>R</code>来进行占位。 如果<code>T</code>满足是一个函数类型，那么我们返回其函数的返回类型，也就是<code>R</code>；如果不是一个函数类型，就返回<code>never</code>。</li></ul><p><code>TS</code>中的<code>infer</code>占位更像<code>JavaScript</code>中的模板字符串：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 函数的返回类型使用R占位表示</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> info <span class="token constant">R</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 模板字符串中的值，使用变量name占位表示</span></span>
<span class="line"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="符号" tabindex="-1"><a class="header-anchor" href="#符号"><span>&amp; 符号</span></a></h3><p>在<code>TS</code>中有两种类型值得我们重点关注：<strong>联合类型</strong>和<strong>交叉类型</strong>。</p><p>联合类型一般适用于基本类型的<strong>合并</strong>，它使用<code>|</code>符号进行连接，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>而交叉类型则适用于对象或者函数的<strong>合并</strong>，它使用<code>&amp;</code>符号进行连接，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>T &amp; U</code>表示一个新的类型，其中这个类型包含<code>T</code>和<code>U</code>中所有的键，这和<code>JavaScript</code>中的<code>Object.assign()</code>函数的作用非常类似。</p><p>根据交叉类型的概念，我们可以封装一个合并对象的<code>merge</code>函数，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// ts v4.8.4以上版本</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>to<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> from<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">K</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">;</span><span class="token punctuation">(</span>to <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> from<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">any</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> to <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> <span class="token constant">K</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// ts v4.8.4以下版本</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">merge</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>to<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> from<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">K</span>  <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">;</span><span class="token punctuation">(</span>to <span class="token keyword">as</span> <span class="token constant">K</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> from<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token builtin">any</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> to <span class="token keyword">as</span> <span class="token constant">K</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;AAA&#39;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token number">23</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// js结果：{ name：&#39;AAA&#39;; age: 23; }</span></span>
<span class="line"><span class="token comment">// ts结果：{ name: string; age: number; }</span></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初级" tabindex="-1"><a class="header-anchor" href="#初级"><span>初级</span></a></h2><h3 id="内置pick-选取" tabindex="-1"><a class="header-anchor" href="#内置pick-选取"><span>内置Pick(选取)</span></a></h3>`,73)),a(n,{num:"4"}),s[4]||(s[4]=p(`<h4 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h4><p><code>Pick</code>表示从一个类型中选取指定的几个字段组合成一个新的类型，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  sex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果: { name: string; address: string; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PickResult</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;address&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>K extends keyof T</code>：表示<code>K</code>只能是<code>keyof T</code>的子类型，如果我们在使用<code>Pick</code>的时候传递了不存在于<code>T</code>的字段，会报错：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 报错：phone无法分配给keyof T</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;phone&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置readonly-只读" tabindex="-1"><a class="header-anchor" href="#内置readonly-只读"><span>内置Readonly(只读)</span></a></h3>`,9)),a(n,{num:"7"}),s[5]||(s[5]=p(`<h4 id="用法-1" tabindex="-1"><a class="header-anchor" href="#用法-1"><span>用法</span></a></h4><p><code>Readonly</code>是用来让所有属性变为只读，其用法为：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：{ readonly name: string; readonly age: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> MyReadonly<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-1" tabindex="-1"><a class="header-anchor" href="#实现方式-1"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tupletoobject-元组转对象" tabindex="-1"><a class="header-anchor" href="#tupletoobject-元组转对象"><span>TupleToObject(元组转对象)</span></a></h3>`,6)),a(n,{num:"11"}),s[6]||(s[6]=p(`<h4 id="用法-2" tabindex="-1"><a class="header-anchor" href="#用法-2"><span>用法</span></a></h4><p><code>TupleToObject&lt;T&gt;</code>是用来把一个元组转换成一个<code>key/value</code>相同的对象，例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 类型：readonly [&#39;msg&#39;, &#39;name&#39;]</span></span>
<span class="line"><span class="token keyword">const</span> tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;msg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token comment">// 结果：{ msg: &#39;msg&#39;; name: &#39;name&#39;; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> TupleToObject<span class="token operator">&lt;</span><span class="token keyword">typeof</span> tuple<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-2" tabindex="-1"><a class="header-anchor" href="#实现方式-2"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">TupleToObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">P</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>as const</code>：常用来进行常量断言，在此处表示将<code>[&#39;msg&#39;,&#39;name&#39;]</code>推导常量元组，表示其不能新增、删除、修改元素，可以使用<code>as readonly</code>来辅助理解。</li><li><code>T[number]</code>：表示返回数组中所有数字型索引的元素，形成一个联合类型，例如：<code>&#39;msg&#39;|&#39;name&#39;</code>。</li></ul><h3 id="first-数组第一个元素" tabindex="-1"><a class="header-anchor" href="#first-数组第一个元素"><span>First(数组第一个元素)</span></a></h3>`,8)),a(n,{num:"14"}),s[7]||(s[7]=p(`<h4 id="用法-3" tabindex="-1"><a class="header-anchor" href="#用法-3"><span>用法</span></a></h4><p><code>First&lt;T&gt;</code>用来返回数组的第一个元素，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：3</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> First<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：never</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> First<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-3" tabindex="-1"><a class="header-anchor" href="#实现方式-3"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 索引实现方式</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">First<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 占位实现方式</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">First<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends []</code>：用来判断<code>T</code>是否是一个空数组。</li><li><code>T[0]</code>：根据下标取数组第一个元素。</li><li><code>infer R</code>： 表示数组第一个元素的占位。</li><li><code>...infer L</code>: 表示数组剩余元素的占位。</li></ul><h3 id="length-元组的长度" tabindex="-1"><a class="header-anchor" href="#length-元组的长度"><span>Length(元组的长度)</span></a></h3>`,8)),a(n,{num:"18"}),s[8]||(s[8]=p(`<h4 id="用法-4" tabindex="-1"><a class="header-anchor" href="#用法-4"><span>用法</span></a></h4><p><code>Length&lt;T&gt;</code>用来获取一个数组(包括类数组)的长度，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：3</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Length<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：10</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Length<span class="token operator">&lt;</span><span class="token punctuation">{</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">10</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-4" tabindex="-1"><a class="header-anchor" href="#实现方式-4"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Length<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> length<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends { length: number; }</code>：判断<code>T</code>是否是<code>{ length: number; }</code>的子类型，如果是则代表<code>T</code>为数组或者类数组。</li><li><code>T[&#39;length&#39;]</code>：取<code>T</code>对象的<code>length</code>属性的值(注意，在<code>TypeScript</code>中不能使用<code>T.length</code>来取值，而应该使用<code>T[&#39;length&#39;]</code>)。</li></ul><h3 id="内置exclude-排除" tabindex="-1"><a class="header-anchor" href="#内置exclude-排除"><span>内置Exclude(排除)</span></a></h3>`,8)),a(n,{num:"43"}),s[9]||(s[9]=p(`<h4 id="用法-5" tabindex="-1"><a class="header-anchor" href="#用法-5"><span>用法</span></a></h4><p><code>Exclude</code>是排除的意思，它从<code>T</code>类型中排除属于<code>U</code>类型的子集，可以理解成取<code>T</code>对于<code>U</code>的差集，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;name&#39;|&#39;age&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ExcludeResult</span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-5" tabindex="-1"><a class="header-anchor" href="#实现方式-5"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyExclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>T extends U</code>：这段代码会从<code>T</code>的子类型开始分发，例如：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> </span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&#39;name&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">|</span></span>
<span class="line">  <span class="token string">&#39;age&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">|</span></span>
<span class="line">  <span class="token string">&#39;sex&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;sex&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token string">&#39;sex&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="promisetype-promise包裹类型" tabindex="-1"><a class="header-anchor" href="#promisetype-promise包裹类型"><span>PromiseType(promise包裹类型)</span></a></h3>`,8)),a(n,{num:"189"}),s[10]||(s[10]=p(`<h4 id="用法-6" tabindex="-1"><a class="header-anchor" href="#用法-6"><span>用法</span></a></h4><p><code>PromiseType</code>是用来获取<code>Promise</code>包裹类型的，例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getInfo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果：(） =&gt; Promise&lt;string|number&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">funcType</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> getInfo</span>
<span class="line"><span class="token comment">// 结果：Promise&lt;string|number&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">returnResult</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span>funcType<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：string|number</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PromiseResult</span> <span class="token operator">=</span> PromiseType<span class="token operator">&lt;</span>returnResult<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-6" tabindex="-1"><a class="header-anchor" href="#实现方式-6"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">PromiseType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span></span></span>
<span class="line">      <span class="token operator">?</span> PromiseType<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token constant">R</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends Promise&lt;infer R&gt;</code>：判断<code>T</code>是否是<code>Promise&lt;infer R&gt;</code>的子类型，也就是说<code>T</code>必须满足<code>Promise&lt;any&gt;</code>的形式。</li></ul><h3 id="if-判断" tabindex="-1"><a class="header-anchor" href="#if-判断"><span>If(判断)</span></a></h3>`,8)),a(n,{num:"268"}),s[11]||(s[11]=p(`<h4 id="用法-7" tabindex="-1"><a class="header-anchor" href="#用法-7"><span>用法</span></a></h4><p><code>If&lt;C, T, F&gt;</code>用来表示根据<code>C</code>的值来返回<code>T</code>或者<code>F</code>，如果<code>C</code>为<code>true</code>，则返回<code>T</code>；如果<code>C</code>为<code>false</code>，则返回<code>F</code>，例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;a&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> If<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：&#39;b&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> If<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上案例，我们可以直观的发现<code>If&lt;C, T, F&gt;</code>的作用有点类似<code>JavaScript</code>中的三元表达式：<code>C ? T : F</code>。</p><h4 id="实现方式-7" tabindex="-1"><a class="header-anchor" href="#实现方式-7"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">If<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">F</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>C extends boolean</code>：表示<code>C</code>为<code>boolean</code>类型的子类型，既<code>C</code>只能为<code>true</code>或者<code>false</code>，传递其它值报错。</li><li><code>C extends true</code>：如果用<code>JavaScript</code>来表示的话，相当于<code>C===true</code>.</li></ul><h3 id="concat-数组concat方法" tabindex="-1"><a class="header-anchor" href="#concat-数组concat方法"><span>Concat(数组concat方法)</span></a></h3>`,9)),a(n,{num:"533"}),s[12]||(s[12]=p(`<h4 id="用法-8" tabindex="-1"><a class="header-anchor" href="#用法-8"><span>用法</span></a></h4><p><code>Concat&lt;T, U&gt;</code>用来将两个数组合并起来，类似实现数组的<code>concat</code>方法，使用方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[1, 2, 3, 4]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Concat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-8" tabindex="-1"><a class="header-anchor" href="#实现方式-8"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends any[]</code>：用来限制<code>T</code>是一个数组，如果传递非数组会报错，<code>U</code>也是一样的道理。</li><li><code>[...T, ...U]</code>：可以理解成<code>JavaScript</code>的扩展运算符<code>...</code>。</li></ul><h3 id="includes-数组includes方法" tabindex="-1"><a class="header-anchor" href="#includes-数组includes方法"><span>Includes(数组includes方法)</span></a></h3>`,8)),a(n,{num:"898"}),s[13]||(s[13]=p(`<h4 id="用法-9" tabindex="-1"><a class="header-anchor" href="#用法-9"><span>用法</span></a></h4><p><code>Includes&lt;T, U&gt;</code>用来判断<code>U</code>是否在数组<code>T</code>中，类似实现数组的<code>includes</code>方法，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-9" tabindex="-1"><a class="header-anchor" href="#实现方式-9"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Equal<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简单版</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MyIncludes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token comment">// 完善版</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MyIncludes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> Equal<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span></span>
<span class="line">      <span class="token operator">?</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token operator">:</span> MyIncludes<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T[number]</code>：它返回数组中所有数字类型键对应的值，将这些值构造成一个联合类型，例如：<code>1 | 2 | 3</code>。</li><li><code>U extends T[number]</code>：判断<code>U</code>是否是某个联合类型的子类型，例如：<code>1 extends 1 | 2 | 3</code>。</li><li><code>Equal</code>：是用来判断两个值是否相等的辅助方法。</li></ul><h3 id="push-数组push方法" tabindex="-1"><a class="header-anchor" href="#push-数组push方法"><span>Push(数组push方法)</span></a></h3>`,8)),a(n,{num:"3057"}),s[14]||(s[14]=p(`<h4 id="用法-10" tabindex="-1"><a class="header-anchor" href="#用法-10"><span>用法</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[1, 2, 3, 4]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Push<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-10" tabindex="-1"><a class="header-anchor" href="#实现方式-10"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Push实现</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Push<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unshift-数组unshift方法" tabindex="-1"><a class="header-anchor" href="#unshift-数组unshift方法"><span>Unshift(数组unshift方法)</span></a></h3>`,5)),a(n,{num:"3060"}),s[15]||(s[15]=p(`<p>与<code>pop</code>和<code>push</code>方法相似的另外一对方法叫<code>shift</code>和<code>unshift</code>，它们的实现思路是一样的。</p><h4 id="用法-11" tabindex="-1"><a class="header-anchor" href="#用法-11"><span>用法</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[0, 1, 2, 3]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Unshift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-11" tabindex="-1"><a class="header-anchor" href="#实现方式-11"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Unshift实现</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Unshift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置parameters-函数的参数类型" tabindex="-1"><a class="header-anchor" href="#内置parameters-函数的参数类型"><span>内置Parameters(函数的参数类型)</span></a></h3>`,6)),a(n,{num:"3312"}),s[16]||(s[16]=p(`<h4 id="用法-12" tabindex="-1"><a class="header-anchor" href="#用法-12"><span>用法</span></a></h4><p><code>Parameters</code>是用来获取一个函数的参数类型的，其中获取的结果是一个元组，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// [number, string]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> MyParameters<span class="token operator">&lt;</span><span class="token keyword">typeof</span> add<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-12" tabindex="-1"><a class="header-anchor" href="#实现方式-12"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyParameters<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="内置partial-可填-和内置required-必填" tabindex="-1"><a class="header-anchor" href="#内置partial-可填-和内置required-必填"><span>内置Partial(可填)和内置Required(必填)</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此题不属于type-challenges类型挑战题</p></div><h4 id="用法-13" tabindex="-1"><a class="header-anchor" href="#用法-13"><span>用法</span></a></h4><p><code>Partial</code>和<code>Required</code>一个是让所有属性可填、另外一个是让所有属性必填，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果: { name?: string; age?: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PartialResult</span> <span class="token operator">=</span> MyPartial<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果: { name: string; age: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">RequiredResult</span> <span class="token operator">=</span> MyRequired<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-13" tabindex="-1"><a class="header-anchor" href="#实现方式-13"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyPartial<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MyRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置record-构造" tabindex="-1"><a class="header-anchor" href="#内置record-构造"><span>内置Record(构造)</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此题不属于type-challenges类型挑战题</p></div><h4 id="用法-14" tabindex="-1"><a class="header-anchor" href="#用法-14"><span>用法</span></a></h4><p><code>Record&lt;K, T&gt;</code>用来将<code>K</code>的每一个键(<code>k</code>)指定为<code>T</code>类型，这样由多个<code>k/T</code>组合成了一个新的类型，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">keys</span> <span class="token operator">=</span> <span class="token string">&#39;Cat&#39;</span><span class="token operator">|</span><span class="token string">&#39;Dot&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Animal</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Expected</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  Cat<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  Dog<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：Expected</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">RecordResult</span> <span class="token operator">=</span> Record<span class="token operator">&lt;</span>keys<span class="token punctuation">,</span> Animal<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-14" tabindex="-1"><a class="header-anchor" href="#实现方式-14"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyRecord<span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>K extends keyof any</code>：此代码表示<code>K</code>是<code>keyof any</code>任意类型其所有键的子类型，例如：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// K为 &#39;Dog&#39;|&#39;cat&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">UnionKeys</span> <span class="token operator">=</span> <span class="token string">&#39;Dog&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Cat&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// K为&#39;name&#39;|&#39;age&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TypeKeys</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> Person</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内置extract-交集" tabindex="-1"><a class="header-anchor" href="#内置extract-交集"><span>内置Extract(交集)</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此题不属于type-challenges类型挑战题</p></div><h4 id="用法-15" tabindex="-1"><a class="header-anchor" href="#用法-15"><span>用法</span></a></h4><p><code>Extract&lt;T, U&gt;</code>用来取联合类型<code>T</code>和<code>U</code>的交集，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：&#39;age&#39;|&#39;address&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ExtractResult</span> <span class="token operator">=</span> Extract<span class="token operator">&lt;</span><span class="token keyword">keyof</span> Person<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-15" tabindex="-1"><a class="header-anchor" href="#实现方式-15"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyExtract<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends U</code>：此代码会自动将<code>T</code>的子类型进行分发，例如：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">U</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string">&#39;name&#39;</span><span class="token operator">|</span><span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token function-variable function">T</span> <span class="token operator">:</span> <span class="token parameter">never</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token string">&#39;name&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">:</span> never <span class="token operator">|</span></span>
<span class="line">  <span class="token string">&#39;age&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;sex&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">:</span> never <span class="token operator">|</span></span>
<span class="line">  <span class="token string">&#39;address&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">:</span> never</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string">&#39;age&#39;</span><span class="token operator">|</span><span class="token string">&#39;address&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中级" tabindex="-1"><a class="header-anchor" href="#中级"><span>中级</span></a></h2><h3 id="内置returntype-函数返回类型" tabindex="-1"><a class="header-anchor" href="#内置returntype-函数返回类型"><span>内置ReturnType(函数返回类型)</span></a></h3>`,34)),a(n,{num:"2"}),s[17]||(s[17]=p(`<h4 id="用法-16" tabindex="-1"><a class="header-anchor" href="#用法-16"><span>用法</span></a></h4><p><code>ReturnType&lt;T&gt;</code>是用来获取一个函数的返回类型的，例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getRandom</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> number <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果：number</span></span>
<span class="line">type result <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> getRandom<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-16" tabindex="-1"><a class="header-anchor" href="#实现方式-16"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ReturnType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T extends (...args: any) =&gt; infer R</code>：判断<code>T</code>类型是否是一个函数的子类型，既<code>T</code>是不是一个函数。</li><li><code>infer R</code>：表示待推导的函数返回类型为<code>R</code>，后续可以在表达式中使用<code>R</code>来代替真正的返回类型。</li></ul><h3 id="内置omit-移除" tabindex="-1"><a class="header-anchor" href="#内置omit-移除"><span>内置Omit(移除)</span></a></h3>`,8)),a(n,{num:"3"}),s[18]||(s[18]=p(`<h4 id="用法-17" tabindex="-1"><a class="header-anchor" href="#用法-17"><span>用法</span></a></h4><p><code>Omit</code>是移除的意思，它用来在<code>T</code>类型中移除指定的字段，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：{ name？: string; age: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">OmitResult</span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;address&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-17" tabindex="-1"><a class="header-anchor" href="#实现方式-17"><span>实现方式</span></a></h4><p><code>Omit</code>可以借助在上面已经实现过的<code>Pick</code>和<code>Exclude</code>配合来实现，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Omit实现</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MyOmit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> MyExclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li>使用<code>MyExclude&lt;keyof T, K&gt;</code>，可以从<code>T</code>中移除指定的字段，移除后得到一个新的联合类型：<code>&#39;name&#39;|&#39;age&#39;</code></li><li>使用<code>MyPick&lt;T, &#39;name&#39;|&#39;age&#39;&gt;</code>，可以从<code>T</code>中选取这两个字段，组合成一个新的类型。</li></ul><h3 id="readonly-按需readonly" tabindex="-1"><a class="header-anchor" href="#readonly-按需readonly"><span>Readonly(按需Readonly)</span></a></h3>`,9)),a(n,{num:"8"}),s[19]||(s[19]=p(`<h4 id="用法-18" tabindex="-1"><a class="header-anchor" href="#用法-18"><span>用法</span></a></h4><p>不同于初级实现中的<code>Readonly</code>，在中级实现的<code>Readonly</code>中，如果我们传递了指定的字段，那么<code>Readonly</code>会表现为按需实现<code>readonly</code>，用法如下。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  desc<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Expected1</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">readonly</span> desc<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">readonly</span> completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Expected2</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">readonly</span> desc<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">readonly</span> completed<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：Expected1</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ReadonlyResult1</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：Expected2</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ReadonlyResult2</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;desc&#39;</span><span class="token operator">|</span><span class="token string">&#39;completed&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 测试：</span></span>
<span class="line"><span class="token keyword">const</span> obj<span class="token operator">:</span> ReadonlyResult2 <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token string">&#39;AAA&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  desc<span class="token operator">:</span> <span class="token string">&#39;23&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  completed<span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">obj<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span></span>
<span class="line">obj<span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token string">&#39;32&#39;</span> <span class="token comment">// error</span></span>
<span class="line">obj<span class="token punctuation">.</span>completed <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// error</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-18" tabindex="-1"><a class="header-anchor" href="#实现方式-18"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// ts v4.4+版本可直接用</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// ts v4.5+版本必须用</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>K extends keyof T = keyof T</code>：如要传递了<code>K</code>，那么只能是<code>T</code>中已经存在的属性，不存在则报错；如果不传递，则默认值为<code>keyof T</code>，意味着全部属性都添加<code>readonly</code>。</li><li><code>T &amp; U</code>：在本例中表示将<code>T</code>和<code>U</code>中的字段结合起来，如果没有<code>&amp;</code>会丢失一些属性，例如<code>title</code>。</li></ul><h3 id="deepreadonly-深度readonly" tabindex="-1"><a class="header-anchor" href="#deepreadonly-深度readonly"><span>DeepReadonly(深度Readonly)</span></a></h3>`,8)),a(n,{num:"9"}),s[20]||(s[20]=p(`<h4 id="用法-19" tabindex="-1"><a class="header-anchor" href="#用法-19"><span>用法</span></a></h4><p><code>DeepReadonly</code>用来将一个嵌套对象类型中所有字段全部添加<code>readonly</code>关键词，例如：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 类型：</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  b<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  c<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    d<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">    e<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">    f<span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果：</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> b<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token keyword">readonly</span> c<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">readonly</span> d<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">    <span class="token keyword">readonly</span> e<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">readonly</span> f<span class="token operator">:</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-19" tabindex="-1"><a class="header-anchor" href="#实现方式-19"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">}</span> <span class="token operator">?</span> DeepReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T[P] extends { [key: string]: any }</code>：这段表示<code>T[P]</code>是否是一个包含索引签名的字段，如果包含我们认为它是一个嵌套对象，就可以递归调用<code>DeepReadonly</code>。</li></ul><h3 id="tupletounion-元组转联合类型" tabindex="-1"><a class="header-anchor" href="#tupletounion-元组转联合类型"><span>TupleToUnion(元组转联合类型)</span></a></h3>`,8)),a(n,{num:"10"}),s[21]||(s[21]=p(`<h4 id="用法-20" tabindex="-1"><a class="header-anchor" href="#用法-20"><span>用法</span></a></h4><p><code>TupleToUnion</code>是用来将一个元组转换成联合类型的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;1&#39; | &#39;2&#39; | &#39;3&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> TupleToUnion<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-20" tabindex="-1"><a class="header-anchor" href="#实现方式-20"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// way1: T[number]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// way2: 递归</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TupleToUnion<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> args<span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span>args<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T[number]</code>：它会自动迭代元组的数字型索引，然后将所有元素组合成一个联合类型。</li><li><code>R | TupleToUnion&lt;args&gt;</code>：<code>R</code>表示每一次迭代中的第一个元素，它的迭代过程可以用下面伪代码表示：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 第一次迭代</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span></span>
<span class="line"><span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span>args<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第二次迭代</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span></span>
<span class="line"><span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">|</span> TupleToUnion<span class="token operator">&lt;</span>args<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第三次迭代</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;3&#39;</span></span>
<span class="line"><span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;3&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="chainable-可串联构造器" tabindex="-1"><a class="header-anchor" href="#chainable-可串联构造器"><span>Chainable(可串联构造器)</span></a></h3>`,9)),a(n,{num:"12"}),s[22]||(s[22]=p(`<h4 id="用法-21" tabindex="-1"><a class="header-anchor" href="#用法-21"><span>用法</span></a></h4><p><code>Chainable</code>是用来让一个对象可以进行链式调用的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Expected</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  foo<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  bar<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    value<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">declare</span> <span class="token keyword">const</span> obj<span class="token operator">:</span> Chainable<span class="token operator">&lt;</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：Expected</span></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> obj</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> value<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-21" tabindex="-1"><a class="header-anchor" href="#实现方式-21"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Chainable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token generic-function"><span class="token function">options</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">)</span><span class="token operator">:</span> Chainable<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span><span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">V</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>{[k in K]: V}</code>：每次调用<code>options</code>时，把<code>key/value</code>构造成一个对象，例如：<code>{ foo: 123 }</code>。</li><li><code>T &amp; U</code>：此处使用到<code>&amp;</code>关键词，用来合并<code>T</code>和<code>U</code>两个对象中的所有<code>key</code>。</li><li><code>Chainable&lt;&gt;</code>：递归调用<code>Chainable</code>，赋予新对象以链式调用的能力。</li></ul><h3 id="last-数组最后一个元素" tabindex="-1"><a class="header-anchor" href="#last-数组最后一个元素"><span>Last(数组最后一个元素)</span></a></h3>`,8)),a(n,{num:"15"}),s[23]||(s[23]=p(`<h4 id="用法-22" tabindex="-1"><a class="header-anchor" href="#用法-22"><span>用法</span></a></h4><p><code>Last</code>是用来获取数组中最后一个元素的，它和我们之前已经实现的<code>First</code>思路很相似。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：3</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Last<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-22" tabindex="-1"><a class="header-anchor" href="#实现方式-22"><span>实现方式</span></a></h4><p><code>Last</code>的实现方式很巧妙，因为它既可以在索引上做文章来实现，也可以用占位的思想来实现。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// way1：索引思想</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Last<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// way2: 后占位思想</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Last<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">L</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>[any, ...T]</code>：此代码表示我们构建了一个新数组，并添加了一个新元素到第一个位置，然后把原数组<code>T</code>中的元素依次扩展到新数组中，可以用以下伪代码表示：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 原数组</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 新数组</span></span>
<span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 结果: 3</span></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>T[&#39;length&#39;]</code>：这里我们获取到的是原始<code>T</code>数组的长度，例如<code>[1, 2, 3]</code>，长度值为<code>3</code>。而在新数组中，索引为<code>3</code>的位置正好是最后一个元素的索引，通过这种方式就能达到我们的目的。</li><li><code>T extends [...infer R, infer L]</code>：这段代码表示，我们将原数组中最后一个元素使用<code>L</code>进行占位，而其它元素我们用一个<code>R</code>数组表示。这样，如果数组满足这种格式，就能正确返回最后一个元素的值。</li></ul><h3 id="pop-数组pop方法" tabindex="-1"><a class="header-anchor" href="#pop-数组pop方法"><span>Pop(数组Pop方法)</span></a></h3>`,11)),a(n,{num:"16"}),s[24]||(s[24]=p(`<p>继续沿用以上处理索引思想或占位的思想，我们能快速实现数组<code>pop</code>方法。</p><h4 id="用法-23" tabindex="-1"><a class="header-anchor" href="#用法-23"><span>用法</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：[1, 2]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Pop<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：[]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Pop<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-23" tabindex="-1"><a class="header-anchor" href="#实现方式-23"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Pop实现</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Pop<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> Rest</span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="promiseall返回类型" tabindex="-1"><a class="header-anchor" href="#promiseall返回类型"><span>PromiseAll返回类型</span></a></h3>`,6)),a(n,{num:"20"}),s[25]||(s[25]=p(`<h4 id="用法-24" tabindex="-1"><a class="header-anchor" href="#用法-24"><span>用法</span></a></h4><p><code>PromiseAll</code>是用来取<code>Promise.all()</code>函数所有返回的类型，其用法如下</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> result1 <span class="token operator">=</span> <span class="token function">PromiseAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> result2 <span class="token operator">=</span> <span class="token function">PromiseAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> result3 <span class="token operator">=</span> <span class="token function">PromiseAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> result4 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">PromiseAll</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;&gt;&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果1： Promise&lt;[1, 2, 3]&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> result1</span>
<span class="line"><span class="token comment">// 结果2： Promise&lt;[1, 2, number]&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> result2</span>
<span class="line"><span class="token comment">// 结果3： Promise&lt;[number, number, number]&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t3</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> result3</span>
<span class="line"><span class="token comment">// 结果4： Promise&lt;number[]&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t4</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> result4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-24" tabindex="-1"><a class="header-anchor" href="#实现方式-24"><span>实现方式</span></a></h4><p>与之前的例子不同，<code>PromiseAll</code>我们声明的是一个<code>function</code>而不是<code>type</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Awaited为内置类型</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PromiseAllType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> Awaited<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">PromiseAll</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>values<span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> PromiseAllType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li>因为<code>Promise.all()</code>函数接受的是一个数组，因此泛型<code>T</code>限制为一个<code>any[]</code>类型的数组。</li><li><code>PromiseAllType</code>的实现思路有点像之前的<code>PromiseType</code>，只不过这里多了一层<code>Promise</code>的包裹，因为<code>Promise.all()</code>的返回类型也是一个<code>Promise</code>。</li></ul><h3 id="lookup-查找" tabindex="-1"><a class="header-anchor" href="#lookup-查找"><span>LookUp(查找)</span></a></h3>`,9)),a(n,{num:"62"}),s[26]||(s[26]=p(`<h4 id="用法-25" tabindex="-1"><a class="header-anchor" href="#用法-25"><span>用法</span></a></h4><p><code>LookUp</code>是用来根据类型值查<code>type</code>找类型的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token string">&#39;cat&#39;</span></span>
<span class="line">  color<span class="token operator">:</span> <span class="token string">&#39;black&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;orange&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;gray&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> <span class="token string">&#39;dog&#39;</span></span>
<span class="line">  color<span class="token operator">:</span> <span class="token string">&#39;white&#39;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;wang&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：Dog</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> LookUp<span class="token operator">&lt;</span>Cat <span class="token operator">|</span> Dog<span class="token punctuation">,</span> <span class="token string">&#39;dog&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-25" tabindex="-1"><a class="header-anchor" href="#实现方式-25"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">LookUp<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">U</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>U extends { type: string; }</code>：这段代码限制<code>U</code>的类型必须是具有属性为<code>type</code>的对象。</li><li><code>U extends { type: T }</code>：如果把<code>T</code>的值实际带入，为<code>U extends { type: &#39;dog&#39; }</code>，表示判断<code>U</code>中的<code>type</code>值是不是<code>dog</code>，是则返回<code>U</code>。</li></ul><h3 id="trim、trimleft以及trimright" tabindex="-1"><a class="header-anchor" href="#trim、trimleft以及trimright"><span>Trim、TrimLeft以及TrimRight</span></a></h3>`,8)),l("p",null,[s[0]||(s[0]=e("TrimLeft：")),a(n,{num:"106"}),s[1]||(s[1]=e(" TrimRight：")),a(n,{num:"4803"}),s[2]||(s[2]=e(" Trim：")),a(n,{num:"108"})]),s[27]||(s[27]=p('<h4 id="用法-26" tabindex="-1"><a class="header-anchor" href="#用法-26"><span>用法</span></a></h4><p><code>Trim</code>、<code>TrimLeft</code>以及<code>TrimRight</code>这几个工具比较好理解，它们都是用来移除字符串中的空白符的。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> TrimLeft<span class="token operator">&lt;</span><span class="token string">&#39; str&#39;</span><span class="token operator">&gt;</span>  <span class="token comment">// &#39;str&#39;</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> Trim<span class="token operator">&lt;</span><span class="token string">&#39; str &#39;</span><span class="token operator">&gt;</span>     <span class="token comment">// &#39;str&#39;</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">t3</span> <span class="token operator">=</span> TrimRight<span class="token operator">&lt;</span><span class="token string">&#39;str &#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;str&#39;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-26" tabindex="-1"><a class="header-anchor" href="#实现方式-26"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Space</span> <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> <span class="token operator">|</span> <span class="token string">&#39;\\n&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;\\t&#39;</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">TrimLeft<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimLeft<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">Trim<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token operator">?</span> Trim<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">TrimRight<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Space<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> TrimRight<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token constant">S</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>TrimLeft</code>和<code>TrimRight</code>的实现思路是相同的，区别在于空白符的占位出现在左侧还是右侧。</li><li><code>Trim</code>的实现就是把<code>TrimLeft</code>和<code>TrimRight</code>所做的事情结合起来。</li></ul><h3 id="capitalize-首字母大写-和uncapitalize-首字母小写" tabindex="-1"><a class="header-anchor" href="#capitalize-首字母大写-和uncapitalize-首字母小写"><span>Capitalize(首字母大写)和UnCapitalize(首字母小写)</span></a></h3>',8)),a(n,{num:"110"}),s[28]||(s[28]=p('<h4 id="用法-27" tabindex="-1"><a class="header-anchor" href="#用法-27"><span>用法</span></a></h4><p><code>Capitalize</code>是用来将一个字符串的首字母变成大写的，而<code>UnCapitalize</code>所做的事情跟它相反，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> Capitalize<span class="token operator">&lt;</span><span class="token string">&#39;hello&#39;</span><span class="token operator">&gt;</span>   <span class="token comment">// &#39;Hello&#39;</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> UnCapitalize<span class="token operator">&lt;</span><span class="token string">&#39;Hello&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// &#39;hello&#39;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-27" tabindex="-1"><a class="header-anchor" href="#实现方式-27"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Capitalize<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Uppercase<span class="token operator">&lt;</span>char<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token constant">S</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">UnCapitalize<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Lowercase<span class="token operator">&lt;</span>char<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token constant">S</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li>无论是<code>Capitalize</code>还是<code>UnCapitalize</code>，它们都依赖内置的工具函数<code>Uppercase</code>或者<code>Lowercase</code>。对于<code>Capitalize</code>而言，我们只需要把首字母隔离出来，然后调用<code>Uppercase</code>即可。对于<code>UnCapitalize</code>而言，我们把首字母调用<code>Lowercase</code>即可。</li></ul><h3 id="replace" tabindex="-1"><a class="header-anchor" href="#replace"><span>Replace</span></a></h3>',8)),a(n,{num:"116"}),s[29]||(s[29]=p(`<h4 id="用法-28" tabindex="-1"><a class="header-anchor" href="#用法-28"><span>用法</span></a></h4><p><code>Replace</code>是用来将字符串中第一次出现的某段内容，使用指定的字符串进行替换，而<code>ReplaceAll</code>是全部替换，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：&#39;foofoobar&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2： foobarbar</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> Replace<span class="token operator">&lt;</span><span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-28" tabindex="-1"><a class="header-anchor" href="#实现方式-28"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Replace<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  from <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  to <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">?</span> from <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">        <span class="token operator">?</span> <span class="token constant">S</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">:</span> <span class="token constant">S</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replaceall" tabindex="-1"><a class="header-anchor" href="#replaceall"><span>ReplaceAll</span></a></h3>`,6)),a(n,{num:"119"}),s[30]||(s[30]=p(`<h4 id="用法-29" tabindex="-1"><a class="header-anchor" href="#用法-29"><span>用法</span></a></h4><p><code>ReplaceAll</code>是用来将字符串中指定字符全部替换的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;foofoofoo&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t</span> <span class="token operator">=</span> ReplaceAll<span class="token operator">&lt;</span><span class="token string">&#39;foobarbar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token operator">&gt;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-29" tabindex="-1"><a class="header-anchor" href="#实现方式-29"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ReplaceAll<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  from <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  to <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">from</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">?</span> from <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">        <span class="token operator">?</span> <span class="token constant">S</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ReplaceAll<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>to<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ReplaceAll<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> from<span class="token punctuation">,</span> to<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">:</span> <span class="token constant">S</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="appendargument-追加参数" tabindex="-1"><a class="header-anchor" href="#appendargument-追加参数"><span>AppendArgument(追加参数)</span></a></h3>`,6)),a(n,{num:"191"}),s[31]||(s[31]=p(`<h4 id="用法-30" tabindex="-1"><a class="header-anchor" href="#用法-30"><span>用法</span></a></h4><p><code>AppendArgument</code>是用来向一个函数追加一个参数的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">//  结果：(a: number, b: number) =&gt; number</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> AppendArgument<span class="token operator">&lt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-30" tabindex="-1"><a class="header-anchor" href="#实现方式-30"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">AppendArgument<span class="token operator">&lt;</span>Fn<span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Fn <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li>我们首先利用<code>infer</code>关键词得到了<code>Fn</code>函数的参数类型以及返回类型，然后把新的参数添加到参数列表，并原样返回其函数类型。</li></ul><h3 id="permutation-排列组合" tabindex="-1"><a class="header-anchor" href="#permutation-排列组合"><span>Permutation(排列组合)</span></a></h3>`,8)),a(n,{num:"296"}),s[32]||(s[32]=p(`<h4 id="用法-31" tabindex="-1"><a class="header-anchor" href="#用法-31"><span>用法</span></a></h4><p><code>Permutation</code>是用来将联合类型中的每一个类型进行排列组合，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：[&#39;A&#39;, &#39;B&#39;] | [&#39;B&#39;, &#39;A&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Permutation<span class="token operator">&lt;</span><span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;] | [&#39;A&#39;, &#39;C&#39;, &#39;B&#39;] | [&#39;B&#39;, &#39;A&#39;, &#39;C&#39;] | [&#39;B&#39;, &#39;C&#39;, &#39;A&#39;] | [&#39;C&#39;, &#39;A&#39;, &#39;B&#39;] | [&#39;C&#39;, &#39;B&#39;, &#39;A&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Permutation<span class="token operator">&lt;</span><span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;C&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-31" tabindex="-1"><a class="header-anchor" href="#实现方式-31"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Permutation<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span>Permutation<span class="token operator">&lt;</span>Exclude<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>[T] extends [never]</code>：这段代码主要是为了处理联合类型为空的情况。</li><li><code>T extends U</code>：这段代码主要是需要使用<strong>分布式条件类型</strong>这个知识点，当<code>T extends U</code>成立时，在其后的判断语句中，<code>T</code>代表当前迭代的类型。</li><li><code>&lt;Exclude&lt;U, T&gt;</code>：因为此时的<code>T</code>代表当前迭代的类型，所以我们从原始联合类型中排除当前类型，然后递归调用<code>Permutation</code>。当<code>T</code>为<code>A</code>时，递归调用<code>Permutation&lt;&#39;B&#39; | &#39;C&#39;&gt;</code>, 此时结果为<code>[&#39;A&#39;]</code> + <code>[&#39;B&#39;, &#39;C&#39;]</code> 或 <code>[&#39;A&#39;]</code> + <code>[&#39;C&#39;, &#39;B&#39;]</code>。</li></ul><h3 id="lengthofstring-字符串的长度" tabindex="-1"><a class="header-anchor" href="#lengthofstring-字符串的长度"><span>LengthOfString(字符串的长度)</span></a></h3>`,8)),a(n,{num:"298"}),s[33]||(s[33]=p(`<h4 id="用法-32" tabindex="-1"><a class="header-anchor" href="#用法-32"><span>用法</span></a></h4><p><code>LengthOfString</code>是用来计算一个字符串长度的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> LengthOfString<span class="token operator">&lt;</span><span class="token string">&#39;Hello&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="实现方式-32" tabindex="-1"><a class="header-anchor" href="#实现方式-32"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">LengthOfString<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">?</span> LengthOfString<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> Char<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li>我们通过一个泛型的辅助数组来帮计算字符串的长度，在第一次符合条件时，将其第一个字符添加到数组中，在后续的递归过程中，如果不符合条件，直接返回<code>T[&#39;length&#39;]</code>，这个过程可以用如下代码表示：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 第一次递归</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;ello&#39;</span></span>
<span class="line"><span class="token comment">// 第二次递归</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;ello&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;llo&#39;</span></span>
<span class="line"><span class="token comment">// 第三次递归</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;llo&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;lo&#39;</span></span>
<span class="line"><span class="token comment">// 第四次递归</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;lo&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;o&#39;</span></span>
<span class="line"><span class="token comment">// 第五次递归</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;H&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;e&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flatten-数组降维" tabindex="-1"><a class="header-anchor" href="#flatten-数组降维"><span>Flatten(数组降维)</span></a></h3>`,9)),a(n,{num:"459"}),s[34]||(s[34]=p(`<h4 id="用法-33" tabindex="-1"><a class="header-anchor" href="#用法-33"><span>用法</span></a></h4><p><code>Flatten</code>是用来将多维数组进行降维的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[1, 2, 3]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Flatten<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-33" tabindex="-1"><a class="header-anchor" href="#实现方式-33"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Flatten<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>Flatten<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>Flatten<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span>Flatten<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：<code>Flatten</code>数组降维的主要思路是，遍历数组中的每一个元素，判断其是否为一个数组，如果是，则递归调用<code>Flatten</code>，进行降维。</p><h3 id="appendtoobject-对象添加新属性" tabindex="-1"><a class="header-anchor" href="#appendtoobject-对象添加新属性"><span>AppendToObject(对象添加新属性)</span></a></h3>`,7)),a(n,{num:"527"}),s[35]||(s[35]=p(`<h4 id="用法-34" tabindex="-1"><a class="header-anchor" href="#用法-34"><span>用法</span></a></h4><p><code>AppendToObject</code>是用来向指定对象添加一个额外的属性(<code>key/value</code>)，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：{ id: number; name: string; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> AppendToObject<span class="token operator">&lt;</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-34" tabindex="-1"><a class="header-anchor" href="#实现方式-34"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">basicKeyType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AppendToObject<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> basicKeyType<span class="token punctuation">,</span> <span class="token constant">V</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">V</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>basicKeyType</code>：在<code>JavaScript</code>中，因为一个对象的属性只能是<code>string</code>、<code>number</code>或者<code>symbol</code>这三种类型，所以我们限定<code>K</code>必须满足此条件。</li><li><code>keyof T | K</code>：这里表示<code>keyof T</code>的联合类型和<code>K</code>，组合成一个新的联合类型。</li></ul><h3 id="absolute-绝对值" tabindex="-1"><a class="header-anchor" href="#absolute-绝对值"><span>Absolute(绝对值)</span></a></h3>`,8)),a(n,{num:"529"}),s[36]||(s[36]=p(`<h4 id="用法-35" tabindex="-1"><a class="header-anchor" href="#用法-35"><span>用法</span></a></h4><p><code>Absolute</code>是用来取一个数的绝对值的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：&quot;531&quot;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Absolute<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">531</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：&quot;9999&quot;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Absolute<span class="token operator">&lt;</span><span class="token number">9_999n</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-35" tabindex="-1"><a class="header-anchor" href="#实现方式-35"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">NumberLike</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> bigint</span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Absolute<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> NumberLike<span class="token operator">&gt;</span></span> <span class="token operator">=</span>  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">N</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">N</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>NumberLike</code>：我们认为<code>&#39;1&#39;</code>和<code>1</code>都是一个合法的数字，所以定义一个辅助的<code>NumberList</code>联合类型。</li><li><code>\${T}</code> extends <code>-\${infer N}</code>：这里判断我们传递的数字是否为负数，如果是则直接取其正数部分，否则直接返回。</li></ul><p><strong>注意</strong>：这里说到的取绝对值，最后的结果之所以是一个字符串类型，是因为<code>TS</code>对递归次数有限制。如果你想要真正的数字类型，可以考虑实现一个<code>MakeArray</code>辅助方法，使用此方法可以将字符串类型的数字，转换成一个真正的数字类型，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MakeArray<span class="token operator">&lt;</span><span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">T</span></span>
<span class="line">  <span class="token operator">:</span> MakeArray<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：3</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> MakeArray<span class="token operator">&lt;</span><span class="token string">&#39;3&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringtoarray-字符串转数组" tabindex="-1"><a class="header-anchor" href="#stringtoarray-字符串转数组"><span>StringToArray(字符串转数组)</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>此题不属于type-challenges类型挑战题</p></div><h4 id="用法-36" tabindex="-1"><a class="header-anchor" href="#用法-36"><span>用法</span></a></h4><p><code>StringToArray</code>是用来将一个字符串转换成一个数组的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> StringToArray<span class="token operator">&lt;</span><span class="token string">&#39;hello&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-36" tabindex="-1"><a class="header-anchor" href="#实现方式-36"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">StringToArray<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">?</span> StringToArray<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> Char<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token constant">U</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：<code>StringToArray</code>的实现主要是使用了递归的思想，它每次拿到字符串中一个字符，然后存入一个辅助数组中，当字符串为空时，直接返回这个辅助数组。</p><h3 id="stringtounion-字符串转联合类型" tabindex="-1"><a class="header-anchor" href="#stringtounion-字符串转联合类型"><span>StringToUnion(字符串转联合类型)</span></a></h3>`,18)),a(n,{num:"531"}),s[37]||(s[37]=p(`<h4 id="用法-37" tabindex="-1"><a class="header-anchor" href="#用法-37"><span>用法</span></a></h4><p>在实现<code>StringToArray</code>后，我们能够很容易实现<code>StringToUnion</code>，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;h&#39; | &#39;e&#39; | &#39;l&#39; | &#39;l&#39; | &#39;o&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> StringToUnion<span class="token operator">&lt;</span><span class="token string">&#39;hello&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-37" tabindex="-1"><a class="header-anchor" href="#实现方式-37"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// way1: 递归思想</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">StringToUnion<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">?</span> Char <span class="token operator">|</span> StringToUnion<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token comment">// way2: 借用StringToArray</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">StringToUnion<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> StringToArray<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：<code>StringToArray&lt;S&gt;</code>返回的是一个数组，<code>T[number]</code>表示对一个数组进行数字类型索引迭代，其迭代结果是每个元素组合成的一个联合类型。</p><h3 id="merge-类型合并" tabindex="-1"><a class="header-anchor" href="#merge-类型合并"><span>Merge(类型合并)</span></a></h3>`,7)),a(n,{num:"599"}),s[38]||(s[38]=p(`<h4 id="用法-38" tabindex="-1"><a class="header-anchor" href="#用法-38"><span>用法</span></a></h4><p><code>Merge</code>是用来合并两个类型，如果有重复的字段类型，则第二个的字段类型覆盖第一个的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Bar</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  c<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：{ a: number; b: number; c: boolean; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Merge<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> Bar<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-38" tabindex="-1"><a class="header-anchor" href="#实现方式-38"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Merge<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">F</span> <span class="token operator">|</span> <span class="token keyword">keyof</span> <span class="token constant">S</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">S</span> <span class="token operator">?</span> <span class="token constant">S</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">F</span> <span class="token operator">?</span> <span class="token constant">F</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>keyof F | keyof S</code>：这段代码的含义是将<code>F</code>和<code>S</code>这两个对象的键组合成一个新的联合类型。</li><li><code>P extends</code>：这里进行了两次<code>extends</code>判断，其中第二次不能直接写成<code>F[P]</code>，而应该多判断一次，当满足条件时才使用<code>F[P]</code>，这是因为<code>P</code>的类型判断无法作用于<code>:</code>符号后面。</li></ul><h3 id="kebabcase-字符串转连字符" tabindex="-1"><a class="header-anchor" href="#kebabcase-字符串转连字符"><span>KebabCase(字符串转连字符)</span></a></h3>`,8)),a(n,{num:"612"}),s[39]||(s[39]=p('<h4 id="用法-39" tabindex="-1"><a class="header-anchor" href="#用法-39"><span>用法</span></a></h4><p><code>KebabCase</code>是用来将驼峰形式字符串，转成连字符形式字符串的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：foo-bar-baz</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> KebabCase<span class="token operator">&lt;</span><span class="token string">&#39;FooBarBaz&#39;</span><span class="token operator">&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-39" tabindex="-1"><a class="header-anchor" href="#实现方式-39"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">KebabCase<span class="token operator">&lt;</span></span>\n<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>\n<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">      <span class="token operator">?</span> <span class="token constant">S2</span> <span class="token keyword">extends</span> <span class="token class-name">Uncapitalize<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;</span></span></span>\n<span class="line">        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Uncapitalize<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>KebabCase<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">        <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Uncapitalize<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>KebabCase<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">      <span class="token operator">:</span> <span class="token constant">S</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="diff-类型差异部分" tabindex="-1"><a class="header-anchor" href="#diff-类型差异部分"><span>Diff(类型差异部分)</span></a></h3>',6)),a(n,{num:"645"}),s[40]||(s[40]=p(`<h4 id="用法-40" tabindex="-1"><a class="header-anchor" href="#用法-40"><span>用法</span></a></h4><p><code>Diff</code>是用来获取两个类型的不同部分的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Bar</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  gender<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：{ id: number; gender: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Diff<span class="token operator">&lt;</span>Foo<span class="token punctuation">,</span> Bar<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-40" tabindex="-1"><a class="header-anchor" href="#实现方式-40"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">DiffKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Exclude<span class="token operator">&lt;</span><span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">keyof</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token keyword">keyof</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token operator">|</span> <span class="token constant">U</span><span class="token punctuation">)</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Diff<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> DiffKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">U</span> <span class="token operator">?</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>keyof Foo | keyof Bar</code>：这段代码是把<code>T</code>和<code>U</code>中的所有属性组合成一个新的联合类型。</li><li><code>keyof (T | U)</code>：这段代码是取<code>T</code>和<code>U</code>的公共属性。</li><li><code>Exclude&lt;K1, K2&gt;</code>：这段代码主要是用来从<code>K1</code>中排除<code>K2</code>，带入以上例子也就是排除掉所有公共属性。</li><li><code>Diff&lt;T, U&gt;</code>：在获取到<code>DiffKeys</code>后，就可以迭代的方式获取到每个属性<code>key</code>，它所对应的类型了。</li><li><code>K extends keyof U</code>：额外再判断一次，是因为<code>K</code>不能在三元表达式右侧使用。</li></ul><h3 id="anyof-数组元素真值判断" tabindex="-1"><a class="header-anchor" href="#anyof-数组元素真值判断"><span>AnyOf(数组元素真值判断)</span></a></h3>`,8)),a(n,{num:"949"}),s[41]||(s[41]=p(`<h4 id="用法-41" tabindex="-1"><a class="header-anchor" href="#用法-41"><span>用法</span></a></h4><p><code>AnyOf</code>用来判断数组元素真假值的，如果任一值为真，返回<code>true</code>；数组为空或者全部为<code>false</code>，才返回<code>false</code>，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> AnyOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-41" tabindex="-1"><a class="header-anchor" href="#实现方式-41"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FalsyType</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">never</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AnyOf<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">FalsyType</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：因为我们就是要区分<code>true/false</code>，所以我们把所有为<code>false</code>的值全部列举出来，然后使用<code>T[number]</code>索引迭代，依次去跟<code>FalsyType</code>比较，其中<code>{ [key: string]: never }</code>表示空对象<code>{}</code>。</p><h3 id="isnever-是否是never类型" tabindex="-1"><a class="header-anchor" href="#isnever-是否是never类型"><span>IsNever(是否是Never类型)</span></a></h3>`,7)),a(n,{num:"1042"}),s[42]||(s[42]=p(`<h4 id="用法-42" tabindex="-1"><a class="header-anchor" href="#用法-42"><span>用法</span></a></h4><p><code>IsNever</code>是用来判断是否为<code>never</code>类型，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果3：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result3</span> <span class="token operator">=</span> IsNever<span class="token operator">&lt;</span><span class="token builtin">never</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-42" tabindex="-1"><a class="header-anchor" href="#实现方式-42"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Equal<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// way1: 类型数组</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">never</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token comment">// way2: 数组值</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token comment">// way3: 值比较</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">IsNever<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Equal<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isunion-是否联合类型" tabindex="-1"><a class="header-anchor" href="#isunion-是否联合类型"><span>IsUnion(是否联合类型)</span></a></h3>`,6)),a(n,{num:"1097"}),s[43]||(s[43]=p(`<h4 id="用法-43" tabindex="-1"><a class="header-anchor" href="#用法-43"><span>用法</span></a></h4><p><code>IsUnion</code>是用来判断一个类型是否为联合类型的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">|</span><span class="token builtin">number</span><span class="token operator">|</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果3：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> IsUnion<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-43" tabindex="-1"><a class="header-anchor" href="#实现方式-43"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// way1: 排除法</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">IsUnion<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">[</span>Exclude<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token operator">?</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token comment">// way2: 正反对比法</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">IsUnion<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span></span>
<span class="line">      <span class="token operator">?</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">unknown</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：上面的实现虽然代码不多，但可能无法一下子就弄明白，为了更好的理解这种实现方式，我们来看如下两个案例分析：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 案例一</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span></span>
<span class="line">step1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">number</span></span>
<span class="line">step2<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span></span>
<span class="line">step3<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span></span>
<span class="line">step4<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token boolean">true</span></span>
<span class="line">result<span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 案例二</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">=</span> <span class="token builtin">string</span></span>
<span class="line">step1<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span></span>
<span class="line">step2<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token boolean">false</span></span>
<span class="line">result<span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据之前我们学到的<strong>分布式条件类型</strong>知识，<code>T extends U</code>的时候，会把<code>T</code>进行子类型分发。</p><p>如案例一的<code>step3</code>、<code>step4</code>，在分发后会把每次迭代的结果联合起来，组合成最终的结果。</p><h3 id="replacekeys-类型替换" tabindex="-1"><a class="header-anchor" href="#replacekeys-类型替换"><span>ReplaceKeys(类型替换)</span></a></h3>`,10)),a(n,{num:"1130"}),s[44]||(s[44]=p(`<h4 id="用法-44" tabindex="-1"><a class="header-anchor" href="#用法-44"><span>用法</span></a></h4><p><code>ReplaceKeys</code>是用来在一个类型中，使用指定的Y类型来替换已经存在的T类型的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：{ id: number; name: boolean; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> ReplaceKeys<span class="token operator">&lt;</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-44" tabindex="-1"><a class="header-anchor" href="#实现方式-44"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ReplaceKeys<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">U</span><span class="token punctuation">]</span><span class="token operator">:</span></span>
<span class="line">    <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span></span>
<span class="line">      <span class="token operator">?</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">Y</span></span>
<span class="line">        <span class="token operator">?</span> <span class="token constant">Y</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="removeindexsignature-移除索引签名" tabindex="-1"><a class="header-anchor" href="#removeindexsignature-移除索引签名"><span>RemoveIndexSignature(移除索引签名)</span></a></h3>`,6)),a(n,{num:"1367"}),s[45]||(s[45]=p(`<h4 id="用法-45" tabindex="-1"><a class="header-anchor" href="#用法-45"><span>用法</span></a></h4><p><code>RemoveIndexSignature</code>是用来移除一个类型中的索引签名的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Foo</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：{ foo(): void; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> RemoveIndexSignature<span class="token operator">&lt;</span>Foo<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-45" tabindex="-1"><a class="header-anchor" href="#实现方式-45"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CheckIndexSignature<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">RemoveIndexSignature<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token operator">=</span> PropertyKey<span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token punctuation">(</span>CheckIndexSignature<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>CheckIndexSignature</code>：因为索引签名有一个特点，为<code>string | number | symbol</code>，所以我们通过<code>P extends T ? true : false</code>形式排除此索引签名。其原理如下：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FooKeys</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token string">&#39;foo&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第一次迭代</span></span>
<span class="line">example1<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span></span>
<span class="line">step1<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">step2<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">|</span></span>
<span class="line">       <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">|</span></span>
<span class="line">       <span class="token punctuation">(</span><span class="token builtin">symbol</span> <span class="token keyword">extends</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">|</span></span>
<span class="line">step3<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token boolean">false</span></span>
<span class="line">step4<span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第二次迭代</span></span>
<span class="line">example2<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">P</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span></span>
<span class="line">step1<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">step2<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">|</span></span>
<span class="line">       <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">|</span></span>
<span class="line">       <span class="token punctuation">(</span><span class="token builtin">symbol</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">|</span></span>
<span class="line">step3<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token boolean">false</span> <span class="token operator">|</span> <span class="token boolean">false</span></span>
<span class="line">step4<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token operator">|</span> <span class="token boolean">false</span></span>
<span class="line">step5<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>as xxx</code>：在之前的案例中，我们介绍过<code>as</code>的用法，在这里有<strong>加工</strong>或<strong>再次断言</strong>的意思。在使用<code>in</code>操作符进行迭代时，对每一个<code>P</code>再使用<code>CheckIndexSignature</code>加工一下，如果是索引签名，这里的结果为<code>never</code>，为<code>never</code>时表示跳过当前迭代，进而达到排除索引签名的目的。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 第一次迭代 P = &#39;foo&#39;</span></span>
<span class="line">   CheckIndexSignature<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> <span class="token function-variable function">P</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token boolean">false</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> <span class="token function-variable function">P</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token constant">P</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第二次迭代 P = string</span></span>
<span class="line">   CheckIndexSignature<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> <span class="token function-variable function">P</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span> <span class="token operator">?</span> <span class="token function-variable function">P</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token builtin">never</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 最终结果</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="percentageparser-百分比解析" tabindex="-1"><a class="header-anchor" href="#percentageparser-百分比解析"><span>PercentageParser(百分比解析)</span></a></h3>`,11)),a(n,{num:"1978"}),s[46]||(s[46]=p(`<h4 id="用法-46" tabindex="-1"><a class="header-anchor" href="#用法-46"><span>用法</span></a></h4><p><code>PercentageParser</code>是用来解析百分比字符串的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> PercentageParser<span class="token operator">&lt;</span><span class="token string">&#39;+85%&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// [&#39;+&#39;, &#39;85&#39;, &#39;%&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> PercentageParser<span class="token operator">&lt;</span><span class="token string">&#39;-85%&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// [&#39;-&#39;, &#39;85&#39;, &#39;%&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result3</span> <span class="token operator">=</span> PercentageParser<span class="token operator">&lt;</span><span class="token string">&#39;85&#39;</span><span class="token operator">&gt;</span>   <span class="token comment">// [&#39;&#39;, &#39;85&#39;, &#39;&#39;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-46" tabindex="-1"><a class="header-anchor" href="#实现方式-46"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CheckPrefix<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token string">&#39;+&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">?</span> <span class="token constant">S</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">CheckSuffix<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token string">&#39;%&#39;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PercentageParser<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>CheckPrefix<span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span>CheckSuffix<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>CheckSuffix<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>CheckPrefix</code>是用来处理百分比字符串前面的符号的，如果存在<code>+</code>或者<code>-</code>，则原样返回，如果不存在则返回<code>never</code>，表示没有符号。</li><li><code>CheckSuffix</code>是用来处理百分比字符串后面的百分比符号的，如果存在，则返回一个数组(最后一项固定为百分比符号)；如果不存在，则返回的数组最后一个元素固定为空字符串。</li></ul><h3 id="dropchar-移除字符" tabindex="-1"><a class="header-anchor" href="#dropchar-移除字符"><span>DropChar(移除字符)</span></a></h3>`,8)),a(n,{num:"2070"}),s[47]||(s[47]=p(`<h4 id="用法-47" tabindex="-1"><a class="header-anchor" href="#用法-47"><span>用法</span></a></h4><p><code>DropChar</code>是用来在字符串中移除指定字符的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：butterfly!</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> DropChar<span class="token operator">&lt;</span><span class="token string">&#39; b u t t e r f l y ! &#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-47" tabindex="-1"><a class="header-anchor" href="#实现方式-47"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">DropChar<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">S</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">C</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> DropChar<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token constant">C</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">S</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：<code>DropChar</code>和<code>ReplaceAll</code>的实现思路非常相似，首先需要判断待移除的字符是不是空字符串，如果是，则直接返回原始字符串；如果不是，先判断字符串中是否包含待移除的字符，包含则递归调用；不包含则直接返回原始字符串。</p><h3 id="minusone-减一" tabindex="-1"><a class="header-anchor" href="#minusone-减一"><span>MinusOne(减一)</span></a></h3>`,7)),a(n,{num:"2257"}),s[48]||(s[48]=p(`<p><code>MinusOne</code>是用来实现数字减一的，其用法如下：</p><h4 id="用法-48" tabindex="-1"><a class="header-anchor" href="#用法-48"><span>用法</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：99</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> MinusOne<span class="token operator">&lt;</span><span class="token number">100</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-48" tabindex="-1"><a class="header-anchor" href="#实现方式-48"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MinusOne<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> Rest<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line">  <span class="token operator">:</span> MinusOne<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：在实现<code>MinusOne</code>的时候，借用了一个空数组，首先判断数组的长度是否等于传递的数字<code>N</code>，如果相等则从数组中随意移除一位，然后返回剩下数组的长度即可；如果不相等，则往数组中添加一个元素，再递归调用<code>MinusOne</code>。</p><p><strong>注意</strong>：由于<code>TS</code>在递归调用时存在最大递归调用次数，所以对于比较大的数字会提示错误。</p><h3 id="pickbytype-根据类型选取" tabindex="-1"><a class="header-anchor" href="#pickbytype-根据类型选取"><span>PickByType(根据类型选取)</span></a></h3>`,8)),a(n,{num:"2595"}),s[49]||(s[49]=p(`<h4 id="用法-49" tabindex="-1"><a class="header-anchor" href="#用法-49"><span>用法</span></a></h4><p><code>PickByType</code>是用来根据类型选取属性的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  count<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  isReadonly<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  isEnable<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果：{ isReadonly: boolean, isEnable: boolean }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> PickByType<span class="token operator">&lt;</span>Model<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-49" tabindex="-1"><a class="header-anchor" href="#实现方式-49"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">PickByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：<code>PickByType</code>的实现，可以使用<code>as</code>进行第二次断言，当类型满足时就返回当前迭代的<code>P</code>，不满足类型时就返回<code>never</code>，因为<code>never</code>最后会被排除，所以最后的迭代结果只有满足类型的键。</p><h3 id="startswith-字符串startswith方法" tabindex="-1"><a class="header-anchor" href="#startswith-字符串startswith方法"><span>StartsWith(字符串startsWith方法)</span></a></h3>`,7)),a(n,{num:"2688"}),s[50]||(s[50]=p(`<h4 id="用法-50" tabindex="-1"><a class="header-anchor" href="#用法-50"><span>用法</span></a></h4><p><code>StartsWith</code>是用来实现<code>JavaScript</code>中字符串的<code>startsWith</code>功能，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> StartsWith<span class="token operator">&lt;</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ab&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-50" tabindex="-1"><a class="header-anchor" href="#实现方式-50"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">StartsWith<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">C</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="endswith-字符串endswith方法" tabindex="-1"><a class="header-anchor" href="#endswith-字符串endswith方法"><span>EndsWith(字符串endsWith方法)</span></a></h3>`,6)),a(n,{num:"2693"}),s[51]||(s[51]=p(`<h4 id="用法-51" tabindex="-1"><a class="header-anchor" href="#用法-51"><span>用法</span></a></h4><p><code>EndsWith</code>是用来实现<code>JavaScript</code>中字符串的<code>endsWith</code>功能，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> endsWith<span class="token operator">&lt;</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bc&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-51" tabindex="-1"><a class="header-anchor" href="#实现方式-51"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">EndsWith<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">C</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="partialbykeys-按需可选" tabindex="-1"><a class="header-anchor" href="#partialbykeys-按需可选"><span>PartialByKeys(按需可选)</span></a></h3>`,6)),a(n,{num:"2757"}),s[52]||(s[52]=p(`<h4 id="用法-52" tabindex="-1"><a class="header-anchor" href="#用法-52"><span>用法</span></a></h4><p><code>PartialByKeys</code>是用来实现按需可选的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  address<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">UserPartialName</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  address<span class="token operator">:</span> <span class="token builtin">string</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：UserPartialName</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> PartialByKeys<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-52" tabindex="-1"><a class="header-anchor" href="#实现方式-52"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CopyKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PartialByKeys<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> CopyKeys<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>Omit</code>部分：根据之前介绍的<code>Omit</code>的知识，<code>Omit&lt;T, K&gt;</code>表示从<code>T</code>中剔除含有<code>K</code>的类型。</li><li><code>CopyKeys</code>部分：如果不使用<code>CopyKeys</code>，最后的结果为<code>T &amp; U</code>形式，它实际上与使用<code>CopyKeys</code>的结果是一样的。这里使用<code>CopyKeys</code>，很大程度上是为了测试。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 使用CopyKeys，结果为true；不使用，结果为false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Equal<span class="token operator">&lt;</span>PartialByKeys<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> UserPartialName<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="requiredbykeys-按需必填" tabindex="-1"><a class="header-anchor" href="#requiredbykeys-按需必填"><span>RequiredByKeys(按需必填)</span></a></h3>`,9)),a(n,{num:"2759"}),s[53]||(s[53]=p(`<p>在实现<code>PartialByKeys</code>后，很容易按照相同的思路去实现<code>RequiredByKeys</code>。</p><h4 id="用法-53" tabindex="-1"><a class="header-anchor" href="#用法-53"><span>用法</span></a></h4><p><code>RequiredByKeys</code>是用来实现按需必填的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">UserRequiredName</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：UserRequiredName</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> RequiredByKeys<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&#39;name&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-53" tabindex="-1"><a class="header-anchor" href="#实现方式-53"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CopyKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">RequiredByKeys<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token constant">T</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> CopyKeys<span class="token operator">&lt;</span>Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：实现思路参考<code>PartialByKeys</code>。</p><h3 id="mutable-可改" tabindex="-1"><a class="header-anchor" href="#mutable-可改"><span>Mutable(可改)</span></a></h3>`,8)),a(n,{num:"2793"}),s[54]||(s[54]=p(`<h4 id="用法-54" tabindex="-1"><a class="header-anchor" href="#用法-54"><span>用法</span></a></h4><p><code>Mutable</code>是用来让所有属性变为可改的(移除<code>readonly</code>关键词)，其用法为：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果：{ name: string; age: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MutableResult</span> <span class="token operator">=</span> MyMutable<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-54" tabindex="-1"><a class="header-anchor" href="#实现方式-54"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MyMutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">-</span><span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解读：</p><ul><li><code>-readonly</code>：表示把<code>readonly</code>关键词去掉，去掉之后此字段变为可改的。</li></ul><h3 id="omitbytype-按类型移除" tabindex="-1"><a class="header-anchor" href="#omitbytype-按类型移除"><span>OmitByType(按类型移除)</span></a></h3>`,8)),a(n,{num:"2852"}),s[55]||(s[55]=p(`<p><code>OmitByType</code>的实现思路和<code>PickByType</code>类似。</p><h4 id="用法-55" tabindex="-1"><a class="header-anchor" href="#用法-55"><span>用法</span></a></h4><p><code>OmitByType</code>是用来按照类型移除的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  count<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  isReadonly<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  isEnable<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">ModelOmitBoolean</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  count<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：ModelOmitBoolean</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> OmitByType<span class="token operator">&lt;</span>Model<span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-55" tabindex="-1"><a class="header-anchor" href="#实现方式-55"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">OmitByType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解析：实现思路参考<code>PickByType</code>。</p><h3 id="objectentries" tabindex="-1"><a class="header-anchor" href="#objectentries"><span>ObjectEntries</span></a></h3>`,8)),a(n,{num:"2946"}),s[56]||(s[56]=p(`<h4 id="用法-56" tabindex="-1"><a class="header-anchor" href="#用法-56"><span>用法</span></a></h4><p><code>ObjectEntries</code>是用来实现<code>JavaScript</code>中的<code>Object.entries()</code>方法，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Model</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  locations<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ModelEntries</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">&#39;locations&#39;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：ModelEntries</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> ObjectEntries<span class="token operator">&lt;</span>Model<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-56" tabindex="-1"><a class="header-anchor" href="#实现方式-56"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">RemoveUndefined<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ObjectEntries<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">,</span> RemoveUndefined<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>RemoveUndefined</code>：当<code>T</code>仅为<code>undefined</code>，表示原始类型就是<code>undefined</code>; 当<code>T</code>为联合类型时，移除联合类型中的<code>undefined</code>。</li><li><code>[P in keyof T]-?</code>: 表示移除可选属性。</li><li><code>{} extends Pick&lt;T, P&gt;</code>: 判断当前的<code>P</code>是否为可选属性，是的话就是使用<code>RemoveUndefined</code>移除其中的<code>undefined</code>，否则取原始类型。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果都为true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="shift-数组shift方法" tabindex="-1"><a class="header-anchor" href="#shift-数组shift方法"><span>Shift(数组shift方法)</span></a></h3>`,9)),a(n,{num:"3062"}),s[57]||(s[57]=p(`<h4 id="用法-57" tabindex="-1"><a class="header-anchor" href="#用法-57"><span>用法</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Shift结果：[2, 3]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">shiftResult</span> <span class="token operator">=</span> Shift<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-57" tabindex="-1"><a class="header-anchor" href="#实现方式-57"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Shift实现</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Shift<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tupletonestedobject-元组转嵌套对象" tabindex="-1"><a class="header-anchor" href="#tupletonestedobject-元组转嵌套对象"><span>TupleToNestedObject(元组转嵌套对象)</span></a></h3>`,5)),a(n,{num:"3188"}),s[58]||(s[58]=p(`<h4 id="用法-58" tabindex="-1"><a class="header-anchor" href="#用法-58"><span>用法</span></a></h4><p><code>TupleToNestedObject</code>是用来将元组转成嵌套对象的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：{ a: { b: string; } }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> TupleToNestedObject<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-58" tabindex="-1"><a class="header-anchor" href="#实现方式-58"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">TupleToNestedObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">F</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> TupleToNestedObject<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">U</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>F &amp; string</code>: 等价于如下代码：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token constant">F</span> <span class="token operator">&amp;</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token constant">F</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="reverse" tabindex="-1"><a class="header-anchor" href="#reverse"><span>Reverse</span></a></h3>`,9)),a(n,{num:"3192"}),s[59]||(s[59]=p(`<h4 id="用法-59" tabindex="-1"><a class="header-anchor" href="#用法-59"><span>用法</span></a></h4><p><code>Reverse</code>是用来实现数组的<code>reverse()</code>方法的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[&#39;b&#39;, &#39;a&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Reverse<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-59" tabindex="-1"><a class="header-anchor" href="#实现方式-59"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Reverse<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token operator">...</span>Reverse<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fliparguments-反转函数参数类型" tabindex="-1"><a class="header-anchor" href="#fliparguments-反转函数参数类型"><span>FlipArguments(反转函数参数类型)</span></a></h3>`,6)),a(n,{num:"3196"}),s[60]||(s[60]=p(`<p>借助上面的<code>Reverse</code>方法，可以很容易实现函数参数的反转。</p><h4 id="用法-60" tabindex="-1"><a class="header-anchor" href="#用法-60"><span>用法</span></a></h4><p><code>FlipArguments</code>是用来实现反转函数参数类型的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：(a: number, b: string) =&gt; string | number</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> FlipArguments<span class="token operator">&lt;</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-60" tabindex="-1"><a class="header-anchor" href="#实现方式-60"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FlipArguments<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">A</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> Reverse<span class="token operator">&lt;</span><span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flattendepth-数组按深度降维" tabindex="-1"><a class="header-anchor" href="#flattendepth-数组按深度降维"><span>FlattenDepth(数组按深度降维)</span></a></h3>`,7)),a(n,{num:"3243"}),s[61]||(s[61]=p(`<h4 id="用法-61" tabindex="-1"><a class="header-anchor" href="#用法-61"><span>用法</span></a></h4><p><code>FlattenDepth</code>是用来按深度进行数组降维的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[1, 2, 3, 4, [5]]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> FlattenDepth<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-61" tabindex="-1"><a class="header-anchor" href="#实现方式-61"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FlattenDepth<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">D</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">U</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">D</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">T</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>FlattenDepth<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>FlattenDepth<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span>FlattenDepth<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：<code>FlattenDepth</code>的实现思路和<code>Flatten</code>基本一致，区别是按深度降维时需要一个数组去记录降维的次数(深度)。</p><h3 id="bem" tabindex="-1"><a class="header-anchor" href="#bem"><span>BEM</span></a></h3>`,7)),a(n,{num:"3326"}),s[62]||(s[62]=p(`<h4 id="用法-62" tabindex="-1"><a class="header-anchor" href="#用法-62"><span>用法</span></a></h4><p><code>BEM</code>是用来将字符串连接成CSS BEM格式的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;btn__primary--small&#39; | &#39;btn__primary--mini&#39; </span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token constant">BEM</span><span class="token operator">&lt;</span><span class="token string">&#39;btn&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;primary&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;small&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mini&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-62" tabindex="-1"><a class="header-anchor" href="#实现方式-62"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ArrayToString<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">P</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">BEM</span><span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">B</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">E</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">M</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">B</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ArrayToString<span class="token operator">&lt;</span><span class="token constant">E</span><span class="token punctuation">,</span> <span class="token string">&#39;--&#39;</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ArrayToString<span class="token operator">&lt;</span><span class="token constant">M</span><span class="token punctuation">,</span> <span class="token string">&#39;__&#39;</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：实现<code>BEM</code>的思路并不复杂，只需要记住如下两个知识点：</p><ul><li>判断是一个空数组，可以使用<code>T extends []</code>或者<code>T[&#39;length&#39;] extends 0</code>。</li><li><code>T[number]</code>会自动迭代数组，例如：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果: &#39;A__B&#39; | &#39;A__C&#39; | &#39;A__D&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">A__</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;C&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;D&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inordertraversal-中序遍历" tabindex="-1"><a class="header-anchor" href="#inordertraversal-中序遍历"><span>InOrderTraversal(中序遍历)</span></a></h3>`,9)),a(n,{num:"3376"}),s[63]||(s[63]=p(`<p><strong>先序遍历</strong>：<code>PreOrderTraversal</code>先访问根节点，然后访问左节点，最后访问右节点。<br><strong>中序遍历</strong>：<code>InOrderTraversal</code>先访问左节点，然后访问根节点，最后访问右节点。<br><strong>后序遍历</strong>：<code>PostOrderTraversal</code>先访问左节点，然后访问右节点，最后访问根节点。</p><h4 id="用法-63" tabindex="-1"><a class="header-anchor" href="#用法-63"><span>用法</span></a></h4><p><code>InOrderTraversal</code>是用来实现二叉树中序遍历的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  val<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  right<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    val<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    left<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      val<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">      left<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">      right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    right<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果: [1, 3, 2]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> InOrderTraversal<span class="token operator">&lt;</span><span class="token keyword">typeof</span> tree<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-63" tabindex="-1"><a class="header-anchor" href="#实现方式-63"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 一个二叉树节点</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span></span>
<span class="line">  val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  left<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">  right<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 先序遍历实现</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PreOrderTraversal<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;val&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>PreOrderTraversal<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>PreOrderTraversal<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;right&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 中序遍历实现</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">InOrderTraversal<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>InOrderTraversal<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;val&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>InOrderTraversal<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;right&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 后序遍历实现</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">PostOrderTraversal<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span>TreeNode<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token operator">...</span>PostOrderTraversal<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;left&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>PostOrderTraversal<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;right&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;val&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>[T] extends [TreeNode]</code>: 使用此形式而不用<code>T extends TreeNode</code>，这是因为<code>T</code>是一个<code>TreeNode | null</code>，在左侧会进行分布式条件类型，判断两次：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 如果Tree嵌套比较深的话，ts会报错</span></span>
<span class="line">TreeNode <span class="token keyword">extends</span> <span class="token class-name">TreeNode</span> <span class="token operator">|</span></span>
<span class="line"><span class="token keyword">null</span> <span class="token keyword">extends</span> <span class="token class-name">TreeNode</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>遍历方式：根据先序遍历<code>PreOrderTraversal</code>、中序遍历<code>InOrderTraversal</code>、后序遍历<code>PostOrderTraversal</code>的定义，只需要在递归的时候处理其访问顺序即可。</li></ul><h3 id="flipobject-对象键值交换" tabindex="-1"><a class="header-anchor" href="#flipobject-对象键值交换"><span>FlipObject(对象键值交换)</span></a></h3>`,11)),a(n,{num:"4179"}),s[64]||(s[64]=p(`<h4 id="用法-64" tabindex="-1"><a class="header-anchor" href="#用法-64"><span>用法</span></a></h4><p><code>FlipObject</code>是用来将对象的键值交换的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：{ pi: &#39;a&#39; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> FlipObject<span class="token operator">&lt;</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;pi&#39;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-64" tabindex="-1"><a class="header-anchor" href="#实现方式-64"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">BasicType</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">FlipObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> BasicType<span class="token operator">&gt;&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">P</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="fibonacci-斐波那契数列" tabindex="-1"><a class="header-anchor" href="#fibonacci-斐波那契数列"><span>Fibonacci(斐波那契数列)</span></a></h3>`,6)),a(n,{num:"4182"}),s[65]||(s[65]=p(`<p><strong>菲波那切数列</strong>：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144...</p><h4 id="用法-65" tabindex="-1"><a class="header-anchor" href="#用法-65"><span>用法</span></a></h4><p><code>Fibonacci</code>是用来实现斐波那契数列的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Fibonacci<span class="token operator">&lt;</span><span class="token number">5</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="实现方式-65" tabindex="-1"><a class="header-anchor" href="#实现方式-65"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Fibonacci<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  Index <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  Prev <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  Current <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Index<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">N</span></span></span>
<span class="line">  <span class="token operator">?</span> Current<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> Fibonacci<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> Current<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Prev<span class="token punctuation">,</span> <span class="token operator">...</span>Current<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>Index</code>：标记当前数列是第几项，从1开始。</li><li><code>Prev</code>：存储数列上一次计算的值，从0开始。</li><li><code>Current</code>: 标记当前数列的值，根据数列的特点，第N项的值，等于<code>N - 1</code>项 + <code>N - 2</code>项的值，即：<code>Current = [...Prev, ...Current]</code></li></ul><h3 id="allcombinations-全排列" tabindex="-1"><a class="header-anchor" href="#allcombinations-全排列"><span>AllCombinations(全排列)</span></a></h3>`,9)),a(n,{num:"4260"}),s[66]||(s[66]=p(`<h4 id="用法-66" tabindex="-1"><a class="header-anchor" href="#用法-66"><span>用法</span></a></h4><p><code>AllCombinations</code>是用来列举全部排列组合可能性的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;&#39; | &#39;A&#39; | &#39;AB&#39; | &#39;B&#39; | &#39;BA&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> AllCombinations<span class="token operator">&lt;</span><span class="token string">&#39;AB&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-66" tabindex="-1"><a class="header-anchor" href="#实现方式-66"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">StringToUnion<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">F</span> <span class="token operator">|</span> StringToUnion<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Combination<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">K</span> <span class="token operator">=</span> <span class="token constant">S</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">U</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">S</span></span></span>
<span class="line">    <span class="token operator">?</span> Combination<span class="token operator">&lt;</span>Exclude<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">K</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">U</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AllCombinations<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Combination<span class="token operator">&lt;</span>StringToUnion<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>StringToUnion</code>是用来将字符串变成一个联合类型的，例如：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果： &#39;A&#39; | &#39;B&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> StringToUnion<span class="token operator">&lt;</span><span class="token string">&#39;AB&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Combination</code>是用来将联合类型进行排列组合的，以以上<code>&#39;A&#39; | &#39;B&#39;</code>这个联合类型为例，步骤如下：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 第一步：从&#39;A&#39; | &#39;B这个联合类型中排除当前迭代的字符&#39;A&#39;</span></span>
<span class="line"><span class="token constant">K</span> <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span>  <span class="token operator">=&gt;</span> Exclude<span class="token operator">&lt;</span><span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;A&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 第一步子递归：</span></span>
<span class="line">Combination<span class="token operator">&lt;</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;A&#39;</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;A&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">B</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;AB&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第二步：从&#39;A&#39; | &#39;B&#39;这个联合类型中排除当前迭代的字符&#39;B&#39;</span></span>
<span class="line"><span class="token constant">K</span> <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span> <span class="token operator">=&gt;</span> Exclude<span class="token operator">&lt;</span><span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;B&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 第二步子递归：</span></span>
<span class="line">Combination<span class="token operator">&lt;</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span><span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span> <span class="token operator">|</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">A</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">=&gt;</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;BA&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：剔除相同元素</span></span>
<span class="line">result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;A&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;AB&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;B&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;BA&#39;</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="greaterthan-大于" tabindex="-1"><a class="header-anchor" href="#greaterthan-大于"><span>GreaterThan(大于)</span></a></h3>`,11)),a(n,{num:"4425"}),s[67]||(s[67]=p(`<h4 id="用法-67" tabindex="-1"><a class="header-anchor" href="#用法-67"><span>用法</span></a></h4><p><code>GreaterThan&lt;T, N&gt;</code>是来用判断正整数T是否大于正整数N的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> GreaterThan<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-67" tabindex="-1"><a class="header-anchor" href="#实现方式-67"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 如果比较的数比较大，会提示：Type instantiation is excessively deep and possibly infinite</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">GreaterThan<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">N</span> <span class="token keyword">extends</span> Number<span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">R</span></span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">R</span></span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token operator">:</span> GreaterThan<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：使用一个空数组来辅助，每次递归添加一个元素，如果正整数<code>T</code>先等于这个数组的长度，则为<code>false</code>；如果正整数<code>N</code>先等于这个数组的长度，则为<code>true</code>。</p><h3 id="zip-按位置匹配" tabindex="-1"><a class="header-anchor" href="#zip-按位置匹配"><span>Zip(按位置匹配)</span></a></h3>`,7)),a(n,{num:"4471"}),s[68]||(s[68]=p(`<h4 id="用法-68" tabindex="-1"><a class="header-anchor" href="#用法-68"><span>用法</span></a></h4><p><code>Zip</code>是用来将两个元组按照相同索引位置组合成一个新数组的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[[1, true], [2, false]]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Zip<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-68" tabindex="-1"><a class="header-anchor" href="#实现方式-68"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Zip<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> Head<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Tail<span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>First<span class="token punctuation">,</span> Head<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>Zip<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> Tail<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="istuple-是否为元组" tabindex="-1"><a class="header-anchor" href="#istuple-是否为元组"><span>IsTuple(是否为元组)</span></a></h3>`,6)),a(n,{num:"4484"}),s[69]||(s[69]=p(`<h4 id="用法-69" tabindex="-1"><a class="header-anchor" href="#用法-69"><span>用法</span></a></h4><p><code>IsTuple</code>是用来判断是否为一个元组的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> IsTuple<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-69" tabindex="-1"><a class="header-anchor" href="#实现方式-69"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsTuple<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token operator">?</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解析：以上代码中，比较关键的代码是<code>number extends T[&#39;length&#39;]</code>，这里不能写成<code>T[&#39;length&#39;] extends number</code>，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// case1：需要返回false，因为它不定长，违反了元组的定义</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> IsTuple<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// case2：需要返回true，因为它定长，只不过长度为0</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> IsTuple<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// case1计算逻辑，T[&#39;length&#39;]返回的是number，不是一个确定的值</span></span>
<span class="line"><span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// case2计算逻辑，T[&#39;length&#39;]返回的是0</span></span>
<span class="line"><span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token number">0</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="chunk-lodash分割数组" tabindex="-1"><a class="header-anchor" href="#chunk-lodash分割数组"><span>Chunk(lodash分割数组)</span></a></h3>`,8)),a(n,{num:"4499"}),s[70]||(s[70]=p(`<p><a href="https://www.lodashjs.com/docs/lodash.chunk" target="_blank" rel="noopener noreferrer">Lodash Chunk</a>: 将一个数组分割成长度为N的多个小数组。</p><h4 id="用法-70" tabindex="-1"><a class="header-anchor" href="#用法-70"><span>用法</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[[1, 2], [3, 4]]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Chunk<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-70" tabindex="-1"><a class="header-anchor" href="#实现方式-70"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Chunk<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  Size <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Size</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span>Chunk<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Size<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> Chunk<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> Size<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">0</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">R</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：实现<code>Chunk</code>大体思路是：借助一个辅助空数组，在遍历数组时往这个辅助数组中添加元素，一直到等于指定长度，然后进行下一次相同操作。</p><h3 id="fill-数组fill方法" tabindex="-1"><a class="header-anchor" href="#fill-数组fill方法"><span>Fill(数组fill方法)</span></a></h3>`,7)),a(n,{num:"4518"}),s[71]||(s[71]=p(`<h4 id="用法-71" tabindex="-1"><a class="header-anchor" href="#用法-71"><span>用法</span></a></h4><p><code>Fill</code>是用来在一个数组中，用指定元素，替换开始索引和结束索引元素的。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[1, true, true]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Fill<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-71" tabindex="-1"><a class="header-anchor" href="#实现方式-71"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Fill<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  Start <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  End <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  Count <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  Flag <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> Count<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> Start <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Count<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">End</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">T</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> Flag <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">F</span><span class="token punctuation">,</span> <span class="token operator">...</span>Fill<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">,</span> Start<span class="token punctuation">,</span> End<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token operator">...</span>Fill<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token punctuation">,</span> Start<span class="token punctuation">,</span> End<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>Count</code>: 遍历标志位，从数组第一项开始，当等于<code>End</code>时，结束替换。</li><li><code>Flag</code>：遍历标志位，从数组第一项开始，当等于<code>Start</code>是，开始替换。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[1, true, true]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Fill<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第一次遍历 Count = [], Flag = false, T = [1, 2, 3]</span></span>
<span class="line"><span class="token comment">// 满足Flag extends false条件，Count = [0]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第二次遍历 Count = [0], Flag = true(计算而言)，T = [1, 2, 3]</span></span>
<span class="line"><span class="token comment">// 不满足Flag extends false条件，开始替换，Count = [0, 0], T = [1, true, 3]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第三次遍历 Count = [0, 0], Flag = true(主动传递), T =[1, true, 3]</span></span>
<span class="line"><span class="token comment">// 不满足Flag extends false条件，开始替换，Count = [0, 0, 0], T = [1, true, true]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 最后一次判断 Count = [0, 0, 0]，长度等于End，结束，T = [1, true, true]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="without-移除" tabindex="-1"><a class="header-anchor" href="#without-移除"><span>Without(移除)</span></a></h3>`,9)),a(n,{num:"5117"}),s[72]||(s[72]=p(`<h4 id="用法-72" tabindex="-1"><a class="header-anchor" href="#用法-72"><span>用法</span></a></h4><p><code>Without</code>是用来从数组中移除指定元素的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[3]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Without<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-72" tabindex="-1"><a class="header-anchor" href="#实现方式-72"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ToUnion<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Without<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">F</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token operator">=</span> ToUnion<span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> First <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span></span>
<span class="line">      <span class="token operator">?</span> Without<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> Without<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">R</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：因为<code>F</code>支持单数字和数组，所以定义一个<code>ToUion</code>来统一处理成联合类型。随后直接遍历数组，如果当前迭代的元素在联合类型中，则直接跳过进行下一次迭代；否则，把当前迭代元素添加到<code>R</code>辅助数组中。</p><h3 id="trunc-math-trunc取整" tabindex="-1"><a class="header-anchor" href="#trunc-math-trunc取整"><span>Trunc(Math.trunc取整)</span></a></h3>`,7)),a(n,{num:"5140"}),s[73]||(s[73]=p(`<h4 id="用法-73" tabindex="-1"><a class="header-anchor" href="#用法-73"><span>用法</span></a></h4><p><code>Trunc</code>是用来实现<code>Math.trunc()</code>方法的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：100</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Trunc<span class="token operator">&lt;</span><span class="token number">100.32</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：0</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Trunc<span class="token operator">&lt;</span><span class="token number">.3</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-73" tabindex="-1"><a class="header-anchor" href="#实现方式-73"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Trunc<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">L</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token string">&#39;0&#39;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">L</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="indexof-数组indexof方法" tabindex="-1"><a class="header-anchor" href="#indexof-数组indexof方法"><span>IndexOf(数组indexOf方法)</span></a></h3>`,6)),a(n,{num:"5153"}),s[74]||(s[74]=p(`<h4 id="用法-74" tabindex="-1"><a class="header-anchor" href="#用法-74"><span>用法</span></a></h4><p><code>IndexOf</code>是用来实现数组<code>indexOf</code>方法的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：2</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> IndexOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-74" tabindex="-1"><a class="header-anchor" href="#实现方式-74"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">IndexOf<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span><span class="token punctuation">,</span></span>
<span class="line">  Index <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> IsEqual<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> First<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span></span>
<span class="line">    <span class="token operator">?</span> Index<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> IndexOf<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：需要借助<code>IsEqual</code>来判断两个值是否相等，原因考虑如下案例：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> IsEqual<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="join-数组join方法" tabindex="-1"><a class="header-anchor" href="#join-数组join方法"><span>Join(数组join方法)</span></a></h3>`,8)),a(n,{num:"5310"}),s[75]||(s[75]=p('<h4 id="用法-75" tabindex="-1"><a class="header-anchor" href="#用法-75"><span>用法</span></a></h4><p><code>Join</code>是用来实现数组<code>join</code>方法的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;a-p-p-l-e&#39;</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Join<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token operator">&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-75" tabindex="-1"><a class="header-anchor" href="#实现方式-75"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Join<span class="token operator">&lt;</span></span>\n<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>\n<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span></span>\n<span class="line">    <span class="token operator">?</span> Rest<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">0</span></span>\n<span class="line">      <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>First<span class="token operator">&amp;</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">      <span class="token operator">:</span> Join<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span> <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">U</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>First<span class="token operator">&amp;</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span></span>\n<span class="line">    <span class="token operator">:</span> <span class="token constant">R</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lastindexof-数组lastindexof方法" tabindex="-1"><a class="header-anchor" href="#lastindexof-数组lastindexof方法"><span>LastIndexOf(数组lastIndexOf方法)</span></a></h3>',6)),a(n,{num:"5317"}),s[76]||(s[76]=p(`<p>借助<code>IndexOf</code>的实现思路，很容易实现<code>lastIndexOf</code>方法。</p><h4 id="用法-76" tabindex="-1"><a class="header-anchor" href="#用法-76"><span>用法</span></a></h4><p><code>LastIndexOf</code>是用来实现数组<code>lastIndexOf</code>方法的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：3</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> LastIndexOf<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-76" tabindex="-1"><a class="header-anchor" href="#实现方式-76"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">LastIndexOf<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token constant">U</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">,</span> <span class="token keyword">infer</span> Last<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> IsEqual<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span></span>
<span class="line">    <span class="token operator">?</span> Rest<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> LastIndexOf<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="unique-数组去重" tabindex="-1"><a class="header-anchor" href="#unique-数组去重"><span>Unique(数组去重)</span></a></h3>`,7)),a(n,{num:"5360"}),s[77]||(s[77]=p(`<h4 id="用法-77" tabindex="-1"><a class="header-anchor" href="#用法-77"><span>用法</span></a></h4><p><code>Unique</code>是用来实现数组去重的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[1, 2, 3]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Unique<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-77" tabindex="-1"><a class="header-anchor" href="#实现方式-77"><span>实现方式</span></a></h4><p>借助<code>IsEqual</code>和<code>Includes</code>，很容易实现<code>Unique</code>数组去重。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Includes<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Last<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> IsEqual<span class="token operator">&lt;</span>First<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token operator">:</span> Includes<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Unique<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Last<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> Includes<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span></span>
<span class="line">    <span class="token operator">?</span> Unique<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> Unique<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">R</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maptypes-类型转换" tabindex="-1"><a class="header-anchor" href="#maptypes-类型转换"><span>MapTypes(类型转换)</span></a></h3>`,7)),a(n,{num:"5821"}),s[78]||(s[78]=p(`<h4 id="用法-78" tabindex="-1"><a class="header-anchor" href="#用法-78"><span>用法</span></a></h4><p><code>MapTypes</code>是用来根据指定类型进行替换的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：{ type: number; age: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> MapTypes<span class="token operator">&lt;</span><span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> mapFrom<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>mapTo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-78" tabindex="-1"><a class="header-anchor" href="#实现方式-78"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">GetMapType<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token constant">R</span><span class="token punctuation">,</span></span>
<span class="line">  Type <span class="token operator">=</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> mapFrom<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> mapTo<span class="token operator">:</span> <span class="token keyword">infer</span> To <span class="token punctuation">}</span> <span class="token operator">?</span> To <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span>Type<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> Type</span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MapTypes<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> GetMapType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：在以上的实现中，最核心的代码是获取<code>Type</code>类型。</p><ul><li><code>R extends { mapFrom: T, mapTo: infer To }</code>：这段代码表示，<code>R</code>是不是右边的子类型，我们以以上案例来说明：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 当P = &#39;type&#39;时，</span></span>
<span class="line"><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">{</span> mapFrom<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>mapTo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token punctuation">{</span> mapFrom<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> mapTo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> mapFrom<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> mapTo<span class="token operator">:</span> <span class="token keyword">infer</span> To <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token function-variable function">To</span> <span class="token operator">=</span> <span class="token builtin">number</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 当P = &#39;age&#39;时</span></span>
<span class="line"><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">{</span> mapFrom<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>mapTo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token punctuation">{</span> mapFrom<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> mapTo<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> mapFrom<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> mapTo<span class="token operator">:</span> <span class="token keyword">infer</span> To <span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token operator">=&gt;</span> GetMapType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token builtin">number</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token punctuation">{</span> age<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="constructtuple-构造元组" tabindex="-1"><a class="header-anchor" href="#constructtuple-构造元组"><span>ConstructTuple(构造元组)</span></a></h3>`,9)),a(n,{num:"7544"}),s[79]||(s[79]=p(`<h4 id="用法-79" tabindex="-1"><a class="header-anchor" href="#用法-79"><span>用法</span></a></h4><p><code>ConstructTuple</code>是用来构造指定长度的元组的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[unknown, unknown]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> ConstructTuple<span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-79" tabindex="-1"><a class="header-anchor" href="#实现方式-79"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ConstructTuple<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">L</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">L</span></span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">R</span></span>
<span class="line">  <span class="token operator">:</span> ConstructTuple<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="numberrange-限定范围数字" tabindex="-1"><a class="header-anchor" href="#numberrange-限定范围数字"><span>NumberRange(限定范围数字)</span></a></h3>`,6)),a(n,{num:"8640"}),s[80]||(s[80]=p(`<h4 id="用法-80" tabindex="-1"><a class="header-anchor" href="#用法-80"><span>用法</span></a></h4><p><code>NumberRange</code>是用来返回指定范围内的数字的，其返回的是一个联合类型，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：2 | 3 | 4 | 5 | 6 | 7 | 8 | 9</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> NumberRange<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-80" tabindex="-1"><a class="header-anchor" href="#实现方式-80"><span>实现方式</span></a></h4><p>实现思路参考：数组<code>Fill</code>方法。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">NumberRange<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">L</span><span class="token punctuation">,</span> </span>
<span class="line">  <span class="token constant">H</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">I</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">F</span> <span class="token operator">=</span> <span class="token constant">I</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token constant">L</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">I</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">H</span></span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">I</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token constant">H</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">false</span></span></span>
<span class="line">    <span class="token operator">?</span> NumberRange<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">H</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> NumberRange<span class="token operator">&lt;</span><span class="token constant">L</span><span class="token punctuation">,</span> <span class="token constant">H</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token constant">I</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="subsequence-元组子序列" tabindex="-1"><a class="header-anchor" href="#subsequence-元组子序列"><span>Subsequence(元组子序列)</span></a></h3>`,7)),a(n,{num:"8987"}),s[81]||(s[81]=p(`<h4 id="用法-81" tabindex="-1"><a class="header-anchor" href="#用法-81"><span>用法</span></a></h4><p><code>Subsequence</code>是用来根据指定数组生成元组子序列的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[] | [1] | [2] | [1, 2]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Subsequence<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-81" tabindex="-1"><a class="header-anchor" href="#实现方式-81"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Subsequence<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Last<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> Subsequence<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token constant">R</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">R</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>R | [...R, First]</code>: 在一个数组中，对一个联合类型的数组使用<code>...</code>扩展时，会自动进行元素分发，例如：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[&#39;a&#39;, &#39;b&#39;] | [&#39;a&#39;, &#39;c&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="checkrepeatedchars-是否包含相同字符" tabindex="-1"><a class="header-anchor" href="#checkrepeatedchars-是否包含相同字符"><span>CheckRepeatedChars(是否包含相同字符)</span></a></h3>`,9)),a(n,{num:"9142"}),s[82]||(s[82]=p('<h4 id="用法-82" tabindex="-1"><a class="header-anchor" href="#用法-82"><span>用法</span></a></h4><p><code>CheckRepeatedChars</code>是用来检查字符串中是否存在重复字符的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：false </span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> CheckRepeatedChars<span class="token operator">&lt;</span><span class="token string">&#39;abc&#39;</span><span class="token operator">&gt;</span></span>\n<span class="line"><span class="token comment">// 结果2：true</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> CheckRepeatedChars<span class="token operator">&lt;</span><span class="token string">&#39;abb&#39;</span><span class="token operator">&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-82" tabindex="-1"><a class="header-anchor" href="#实现方式-82"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CheckRepeatedChars<span class="token operator">&lt;</span></span>\n<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>\n<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> Last<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">  <span class="token operator">?</span> Last <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">    <span class="token operator">?</span> <span class="token boolean">true</span></span>\n<span class="line">    <span class="token operator">:</span> CheckRepeatedChars<span class="token operator">&lt;</span>Last<span class="token operator">&gt;</span></span>\n<span class="line">  <span class="token operator">:</span> <span class="token boolean">false</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>${string}${First}${string}</code>：表示字符串包含<code>First</code>，也可以用<code>infer</code>来代替：<code>${infer Left}${First}${infer Right}</code>。</li></ul><h3 id="firstuniquecharindex-字符串中第一个唯一字符" tabindex="-1"><a class="header-anchor" href="#firstuniquecharindex-字符串中第一个唯一字符"><span>FirstUniqueCharIndex(字符串中第一个唯一字符)</span></a></h3>',8)),a(n,{num:"9286"}),s[83]||(s[83]=p(`<h4 id="用法-83" tabindex="-1"><a class="header-anchor" href="#用法-83"><span>用法</span></a></h4><p><code>FirstUniqueCharIndex</code>是用来获取字符串中第一个唯一字符的索引的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1： 0(字符l)</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> FirstUniqueCharIndex<span class="token operator">&lt;</span><span class="token string">&#39;leetcode&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2： 2(字符v)</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> FirstUniqueCharIndex<span class="token operator">&lt;</span><span class="token string">&#39;loveleetcode&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-83" tabindex="-1"><a class="header-anchor" href="#实现方式-83"><span>实现方式</span></a></h4><p>借助<code>CheckRepeatedChars</code>的实现思路，很容易实现<code>FirstUniqueCharIndex</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FirstUniqueCharIndex<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Last<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> First <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">R</span></span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> FirstUniqueCharIndex<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> Last <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token operator">?</span> FirstUniqueCharIndex<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：此题的实现思路和<code>FirstUniqueCharIndex</code>类似，只是多了一层判断，以上面案例为例：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果： 2(字符v)</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> FirstUniqueCharIndex<span class="token operator">&lt;</span><span class="token string">&#39;loveleetcode&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第一次迭代时：S = loveleetcode R = [] R[number] = never First = l</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string">&#39;l&#39;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">never</span></span> 不满足，<span class="token string">&#39;oveleetcode&#39;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">l</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>满足</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第二次迭代时：S = oveleetcode R = [&#39;l&#39;] R[number] = &#39;l&#39; First = o</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string">&#39;o&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;l&#39;</span> 不满足，<span class="token string">&#39;veleetcode&#39;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">o</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>满足</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第三次迭代时：S = veleetcode R = [&#39;l&#39;, &#39;0&#39;] R[number] = &#39;l&#39; | &#39;o&#39; First = v</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token string">&#39;v&#39;</span> <span class="token keyword">extends</span> <span class="token string">&#39;l&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;o&#39;</span> 不满足，<span class="token string">&#39;eleetcode&#39;</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">v</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>不满足</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：R[&#39;length&#39;]</span></span>
<span class="line"><span class="token operator">=&gt;</span> <span class="token number">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parseurlparams-解析url路径参数" tabindex="-1"><a class="header-anchor" href="#parseurlparams-解析url路径参数"><span>ParseUrlParams(解析url路径参数)</span></a></h3>`,9)),a(n,{num:"9616"}),s[84]||(s[84]=p(`<h4 id="用法-84" tabindex="-1"><a class="header-anchor" href="#用法-84"><span>用法</span></a></h4><p><code>ParseUrlParams</code>是用来解析<code>url</code>上参数名的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;id&#39; | &#39;user&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> ParseUrlParams<span class="token operator">&lt;</span><span class="token string">&#39;posts/:id/:user&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-84" tabindex="-1"><a class="header-anchor" href="#实现方式-84"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ParseUrlParams<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Last<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token operator">?</span> Last <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Left<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Right<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> Left <span class="token operator">|</span> ParseUrlParams<span class="token operator">&lt;</span>Right<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> Last</span>
<span class="line">  <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getmiddleelement-数组中位数" tabindex="-1"><a class="header-anchor" href="#getmiddleelement-数组中位数"><span>GetMiddleElement(数组中位数)</span></a></h3>`,6)),a(n,{num:"9896"}),s[85]||(s[85]=p(`<h4 id="用法-85" tabindex="-1"><a class="header-anchor" href="#用法-85"><span>用法</span></a></h4><p><code>GetMiddleElement</code>是用来取数组中位数的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1： [2]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> GetMiddleElement<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2： [2, 3]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> GetMiddleElement<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-85" tabindex="-1"><a class="header-anchor" href="#实现方式-85"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">GetMiddleElement<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">T</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Middle<span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> GetMiddleElement<span class="token operator">&lt;</span>Middle<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T[&#39;length&#39;] extends 0 | 1 | 2</code>：当数组长度小于等于而时，其中位数就是自身。</li><li><code>T extends [any, ...infer Middle, any]</code>: 当长度大于2时，每次迭代去掉首、尾元素，直至数组长度小于等于2，返回。</li></ul><h3 id="findonlyelements-数组只出现一次的元素" tabindex="-1"><a class="header-anchor" href="#findonlyelements-数组只出现一次的元素"><span>FindOnlyElements(数组只出现一次的元素)</span></a></h3>`,8)),a(n,{num:"9898"}),s[86]||(s[86]=p(`<h4 id="用法-86" tabindex="-1"><a class="header-anchor" href="#用法-86"><span>用法</span></a></h4><p><code>FindOnlyElements</code>是用来获取数组中只出现一次的元素，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1： [1, 2, 3]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> FindOnlyElements<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2： [1]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> FindOnlyElements<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-86" tabindex="-1"><a class="header-anchor" href="#实现方式-86"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FindOnlyElements<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Last<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> First <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token operator">...</span>Last<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> FindOnlyElements<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> FindOnlyElements<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">R</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="countarrayelement-计数数组中元素出现的次数" tabindex="-1"><a class="header-anchor" href="#countarrayelement-计数数组中元素出现的次数"><span>CountArrayElement(计数数组中元素出现的次数)</span></a></h3>`,6)),a(n,{num:"9989"}),s[87]||(s[87]=p(`<h4 id="用法-87" tabindex="-1"><a class="header-anchor" href="#用法-87"><span>用法</span></a></h4><p><code>CountArrayElement</code>是用来实现计算数组中元素出现次数的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1: { 1: 1, 2: 1, 3: 1 }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> CountArrayElement<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2: { 1: 2, 2: 2, 3: 1 }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> CountArrayElement<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-87" tabindex="-1"><a class="header-anchor" href="#实现方式-87"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Flatten<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Last<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token punctuation">[</span>First<span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> Flatten<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span> </span>
<span class="line">    <span class="token operator">:</span> First <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> Flatten<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span>Flatten<span class="token operator">&lt;</span>First<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> Flatten<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">R</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ObjectCount<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Last<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> First <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">R</span></span>
<span class="line">    <span class="token operator">?</span> ObjectCount<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> Omit<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> Record<span class="token operator">&lt;</span>First<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">[</span>First<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span></span>
<span class="line">    <span class="token operator">:</span> ObjectCount<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> Omit<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> First<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> Record<span class="token operator">&lt;</span>First<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">R</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">CountArrayElement<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> ObjectCount<span class="token operator">&lt;</span>Flatten<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>Flatten</code>：实现<code>Flatten</code>，用来处理传递多维数组的情况，例如：<code>CountArrayElement&lt;[1, [1, 2], 3, [4, [5]]]&gt;</code></li><li><code>First extends keyof R</code>: 如果当前数组的遍历项是<code>R</code>对象中的一个键，则表明需要计数加一；如果不是，则代表是新项，需要计数为1；</li><li><code>[P in keyof R]: R[P][&#39;length&#39;]</code>: 因为最后结果需要返回数组，而非数组，所以迭代<code>R</code>对象，返回其每个属性的数组长度即可。</li></ul><h3 id="integer-数字整数" tabindex="-1"><a class="header-anchor" href="#integer-数字整数"><span>Integer(数字整数)</span></a></h3>`,8)),a(n,{num:"10969"}),s[88]||(s[88]=p('<h4 id="用法-88" tabindex="-1"><a class="header-anchor" href="#用法-88"><span>用法</span></a></h4><p><code>Integer</code>是用来返回数字的整数部分的，如果传入的数子包含小数，则返回<code>never</code>，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：1</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Integer<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">&gt;</span></span>\n<span class="line"><span class="token comment">// 结果2：never</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Integer<span class="token operator">&lt;</span><span class="token number">1.1</span><span class="token operator">&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-88" tabindex="-1"><a class="header-anchor" href="#实现方式-88"><span>实现方式</span></a></h4><p>根据<code>JavaScript</code>中<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener noreferrer">BigInt</a>的用法，其不能包含小数。所以实现方式如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Integer<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>bigint<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>${T}</code> extends <code>${bigint}</code>：这里转成字符串形式比较，不能直接比较，因为<code>number</code>和<code>bigint</code>是两个不同的类型。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：都是false</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name">bigint</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> bigint <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toprimitive-转化基本类型" tabindex="-1"><a class="header-anchor" href="#toprimitive-转化基本类型"><span>ToPrimitive(转化基本类型)</span></a></h3>',10)),a(n,{num:"16259"}),s[89]||(s[89]=p(`<h4 id="用法-89" tabindex="-1"><a class="header-anchor" href="#用法-89"><span>用法</span></a></h4><p><code>ToPrimitive</code>是用来返回一个对象的类型的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">PersonInfo</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;Tom&#39;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token number">30</span></span>
<span class="line">  married<span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">  addr<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    home<span class="token operator">:</span> <span class="token string">&#39;123456&#39;</span></span>
<span class="line">    phone<span class="token operator">:</span> <span class="token string">&#39;13111111111&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;sing&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dance&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  readonlyArr<span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Expected</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  married<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  addr<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    home<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">    phone<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  hobbies<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span></span>
<span class="line">  readonlyArr<span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span></span>
<span class="line">  fn<span class="token operator">:</span> <span class="token builtin">Function</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：Expected</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> ToPrimitive<span class="token operator">&lt;</span>PersonInfo<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-89" tabindex="-1"><a class="header-anchor" href="#实现方式-89"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ToPrimitive<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token builtin">Function</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> ToPrimitive<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li>对于函数来说：当满足<code>T extends (...args: any[]) =&gt; any</code>条件时，直接返回<code>Function</code>。</li><li>对于嵌套对象来说，递归调用<code>ToPrimitive</code>即可。</li><li>对于普通类型来说，判断其是否满足<code>T extends { valueOf: () =&gt; infer R }</code>，是则返回其类型。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// ts中的valueOf是js中的valueOf一样</span></span>
<span class="line"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">123</span></span>
<span class="line"><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deepmutable-深度mutable" tabindex="-1"><a class="header-anchor" href="#deepmutable-深度mutable"><span>DeepMutable(深度Mutable)</span></a></h3>`,9)),a(n,{num:"17973"}),s[90]||(s[90]=p(`<h4 id="用法-90" tabindex="-1"><a class="header-anchor" href="#用法-90"><span>用法</span></a></h4><p><code>DeepMutable</code>是用来深度移除属性<code>readonly</code>修饰符的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> title<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token keyword">readonly</span> description<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token keyword">readonly</span> completed<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  <span class="token keyword">readonly</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">readonly</span> author<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Expected</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  description<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  completed<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  meta<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    author<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：Expected</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> DeepMutable<span class="token operator">&lt;</span>Test<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-90" tabindex="-1"><a class="header-anchor" href="#实现方式-90"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">DeepMutable<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">T</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">-</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> DeepMutable<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="allmatch-数组元素是否与给定元素完全相同" tabindex="-1"><a class="header-anchor" href="#allmatch-数组元素是否与给定元素完全相同"><span>AllMatch(数组元素是否与给定元素完全相同)</span></a></h3>`,6)),a(n,{num:"18142"}),s[91]||(s[91]=p(`<h4 id="用法-91" tabindex="-1"><a class="header-anchor" href="#用法-91"><span>用法</span></a></h4><p><code>AllMatch</code>是用来判断，数组元素是否与给定元素完全相同的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> AllMatch<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> AllMatch<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-91" tabindex="-1"><a class="header-anchor" href="#实现方式-91"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 不考虑边界情况，简易实现方法</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">errTest1</span> <span class="token operator">=</span> AllMatch<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">errTest2</span> <span class="token operator">=</span> AllMatch<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">errTest3</span> <span class="token operator">=</span> AllMatch<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token operator">&gt;</span>  <span class="token comment">// false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AllMatch<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span></span>
<span class="line"><span class="token operator">?</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 考虑边界情况：完整实现</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">IsEqual<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">AllMatch<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> IsEqual<span class="token operator">&lt;</span>First<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span></span>
<span class="line">    <span class="token operator">?</span> AllMatch<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filter-数组过滤" tabindex="-1"><a class="header-anchor" href="#filter-数组过滤"><span>Filter(数组过滤)</span></a></h3>`,6)),a(n,{num:"18220"}),s[92]||(s[92]=p(`<h4 id="用法-92" tabindex="-1"><a class="header-anchor" href="#用法-92"><span>用法</span></a></h4><p><code>Filter</code>是用来实现数组过滤方法的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：[2]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Filter<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：[1, 2]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Filter<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-92" tabindex="-1"><a class="header-anchor" href="#实现方式-92"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Filter<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">P</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> First <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">P</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">[</span>First<span class="token punctuation">,</span> <span class="token operator">...</span>Filter<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> Filter<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="findallindex-查找数组中给定元素所有索引" tabindex="-1"><a class="header-anchor" href="#findallindex-查找数组中给定元素所有索引"><span>FindAllIndex(查找数组中给定元素所有索引)</span></a></h3>`,6)),a(n,{num:"21104"}),s[93]||(s[93]=p(`<h4 id="用法-93" tabindex="-1"><a class="header-anchor" href="#用法-93"><span>用法</span></a></h4><p><code>FindAllIndex</code>是用来返回字符串中所有匹配索引的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：[11]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> FindAllIndex<span class="token operator">&lt;</span><span class="token string">&#39;TypeScript type challenges&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;type&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：[2, 13]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> FindAllIndex<span class="token operator">&lt;</span><span class="token string">&#39;TypeScript type challenges&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;pe&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果3：[]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result3</span> <span class="token operator">=</span> FindAllIndex<span class="token operator">&lt;</span><span class="token string">&#39;TypeScript type challenges&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-93" tabindex="-1"><a class="header-anchor" href="#实现方式-93"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FindAll<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">I</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Last<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">P</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">?</span> FindAll<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token constant">P</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">I</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> FindAll<span class="token operator">&lt;</span>Last<span class="token punctuation">,</span> <span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">I</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">R</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>I extends any[] = []</code>: 设置索引，字符串每迭代移除，<code>I</code>数组长度增加一。</li><li><code>T extends \${P}\${string}</code>: 当满足条件时，向结果数组<code>R</code>中添加当前索引即可。</li></ul><h3 id="combkeys-组合键" tabindex="-1"><a class="header-anchor" href="#combkeys-组合键"><span>CombKeys(组合键)</span></a></h3>`,8)),a(n,{num:"21106"}),s[94]||(s[94]=p(`<h4 id="用法-94" tabindex="-1"><a class="header-anchor" href="#用法-94"><span>用法</span></a></h4><p><code>CombKeys</code>是用来实现组合键的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;cmd ctrl&#39; | &#39;cmd opt&#39; | &#39;cmd fn&#39; | &#39;ctrl opt&#39; | &#39;ctrl fn&#39; | &#39;opt fn&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> CombKeys<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;cmd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ctrl&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;opt&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fn&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-94" tabindex="-1"><a class="header-anchor" href="#实现方式-94"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CombKeys<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Last <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Last<span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">|</span> CombKeys<span class="token operator">&lt;</span>Last<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replacefirst-替换元组中第一个匹配项" tabindex="-1"><a class="header-anchor" href="#replacefirst-替换元组中第一个匹配项"><span>ReplaceFirst(替换元组中第一个匹配项)</span></a></h3>`,6)),a(n,{num:"25170"}),s[95]||(s[95]=p(`<h4 id="用法-95" tabindex="-1"><a class="header-anchor" href="#用法-95"><span>用法</span></a></h4><p><code>ReplaceFirst</code>是用来替换元组中第一个匹配项，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[1, 2, 4]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> ReplaceFirst<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-95" tabindex="-1"><a class="header-anchor" href="#实现方式-95"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ReplaceFirst<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">unknown</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  From<span class="token punctuation">,</span></span>
<span class="line">  To</span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> First <span class="token keyword">extends</span> <span class="token class-name">From</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">[</span>To<span class="token punctuation">,</span> <span class="token operator">...</span>Rest<span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token punctuation">[</span>First<span class="token punctuation">,</span> <span class="token operator">...</span>ReplaceFirst<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> From<span class="token punctuation">,</span> To<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="困难" tabindex="-1"><a class="header-anchor" href="#困难"><span>困难</span></a></h2><h3 id="simplevue-简单vue类型" tabindex="-1"><a class="header-anchor" href="#simplevue-简单vue类型"><span>SimpleVue(简单Vue类型)</span></a></h3>`,7)),a(n,{num:"6"}),s[96]||(s[96]=p('<h4 id="用法-96" tabindex="-1"><a class="header-anchor" href="#用法-96"><span>用法</span></a></h4><h4 id="实现方式-96" tabindex="-1"><a class="header-anchor" href="#实现方式-96"><span>实现方式</span></a></h4><h3 id="currying-柯里化" tabindex="-1"><a class="header-anchor" href="#currying-柯里化"><span>Currying(柯里化)</span></a></h3>',3)),a(n,{num:"17"}),s[97]||(s[97]=p(`<p>在<code>JavaScript</code>中<code>Currying</code>是用来实现函数柯里化的，其用法如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token keyword">const</span> three <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> curriedAdd <span class="token operator">=</span> <span class="token function">Currying</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> five <span class="token operator">=</span> <span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用法-97" tabindex="-1"><a class="header-anchor" href="#用法-97"><span>用法</span></a></h4><p><code>Currying</code>是用来实现<code>JavaScript</code>中的柯里化的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> func <span class="token operator">=</span> <span class="token function">Currying</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 结果：(a: string) =&gt; (a: number) =&gt; (a: boolean) =&gt; true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">funcType</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> func</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-97" tabindex="-1"><a class="header-anchor" href="#实现方式-97"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CurryFunction<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> First<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> Rest<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token number">0</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> First<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function-variable function">R</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> First<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> CurryFunction<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">R</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">Currying</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">F</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>fn<span class="token operator">:</span> <span class="token constant">F</span><span class="token punctuation">)</span><span class="token operator">:</span></span>
<span class="line">  <span class="token constant">F</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span></span>
<span class="line">  <span class="token operator">?</span> CurryFunction<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>P</code>：<code>P</code>为调用<code>Currying</code>函数时传递函数参数的参数数组，以上面为例，其值为：<code>[number, string, boolean]</code>。</li><li><code>P extends [infer First, ...infer Rest]</code>: 遍历参数列表，依次返回一个函数即可。</li></ul><h3 id="uniontointersection-元组取交集" tabindex="-1"><a class="header-anchor" href="#uniontointersection-元组取交集"><span>UnionToIntersection(元组取交集)</span></a></h3>`,10)),a(n,{num:"55"}),s[98]||(s[98]=p(`<p>在实现<code>UnionToIntersection</code>之前，我们先来回顾一下<code>TS</code>中<code>&amp;</code>符号的作用：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：never</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">&amp;</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token comment">// 结果：{ a: number; b: number; c: boolean; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span> c<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果：(a: boolean | number) =&gt; string</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例解析：</p><ul><li>案例一：因为<code>1</code>、<code>foo</code>以及<code>true</code>，没有交集部分，所以这里结果为<code>never</code>。</li><li>案例二：对于<code>a</code>和<code>c</code>属性而言，它们只存在于自身类型，所以交集部分是自身；对于<code>b</code>属性而言，它在两个类型中都存在，且其属性的类型存在交集部分，既：<code>number</code>。</li><li>案例三：对于函数的交叉类型，我们从函数参数、函数返回值这两个部分来说明。对于函数参数而言，取其联合类型；对于函数返回值而言，取其交叉类型。</li></ul><p>从以上几个案例中可以看出，<code>TS</code>中的<code>&amp;</code>符号是取交集的意思，也叫<strong>交叉类型</strong>。</p><h4 id="用法-98" tabindex="-1"><a class="header-anchor" href="#用法-98"><span>用法</span></a></h4><p><code>UnionToIntersection</code>所做的事情和<code>&amp;</code>符号是一样的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：never</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token string">&#39;foo&#39;</span> <span class="token operator">|</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：{ a: number; b: number; c: boolean; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> b<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">{</span> b<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">;</span> c<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：(a: boolean | number) =&gt; string</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result3</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-98" tabindex="-1"><a class="header-anchor" href="#实现方式-98"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> </span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> </span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> </span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">V</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>U extends any ? X : Y</code>： 这里把<code>U</code>类型处理成<code>(x: U) =&gt; any</code>的函数类型。</li><li><code>T extends (x: infer V) =&gt; any ? V : never</code>：这里的<code>T</code>就是上一步的函数类型，如果<code>extends</code>成立，则返回<code>V</code>，此时的<code>V</code>必然满足<code>U &amp; V</code>。</li></ul><h3 id="requiredkeys-所有必填字段" tabindex="-1"><a class="header-anchor" href="#requiredkeys-所有必填字段"><span>RequiredKeys(所有必填字段)</span></a></h3>`,13)),a(n,{num:"89"}),s[99]||(s[99]=p(`<h4 id="用法-99" tabindex="-1"><a class="header-anchor" href="#用法-99"><span>用法</span></a></h4><p><code>RequiredKeys</code>是用来返回一个类型中所有必填字段，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  sex<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：&#39;name&#39; | &#39;age&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> RequiredKeys<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-99" tabindex="-1"><a class="header-anchor" href="#实现方式-99"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">RequiredKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">P</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>{} extends Pick&lt;T, P&gt; ? never : P</code>：是用来判断当前遍历键是否可选键的。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// never</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">{</span> sex<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token string">&#39;sex&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getrequired-必填字段组成的类型" tabindex="-1"><a class="header-anchor" href="#getrequired-必填字段组成的类型"><span>GetRequired(必填字段组成的类型)</span></a></h3>`,9)),a(n,{num:"57"}),s[100]||(s[100]=p(`<h4 id="用法-100" tabindex="-1"><a class="header-anchor" href="#用法-100"><span>用法</span></a></h4><p><code>GetRequired</code>是用来取一个类型中那些由必填字段组成的一个新类型的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  sex<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：{ age: number; sex: undefined; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> GetRequired<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-100" tabindex="-1"><a class="header-anchor" href="#实现方式-100"><span>实现方式</span></a></h4><p>按照<code>RequiredKeys</code>的实现思路，能够很容易的实现<code>GetRequired</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">GetRequired<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>T[P] extends Required&lt;T&gt;[P] ? P : never</code>：用来判断当前遍历键的类型是否一致，一致则是必填类型。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// P为name时</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span> <span class="token operator">?</span> <span class="token string">&#39;name&#39;</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// P为age时</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">number</span></span> <span class="token operator">?</span> <span class="token string">&#39;age&#39;</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="optionalkeys-所有可选字段" tabindex="-1"><a class="header-anchor" href="#optionalkeys-所有可选字段"><span>OptionalKeys(所有可选字段)</span></a></h3>`,10)),a(n,{num:"90"}),s[101]||(s[101]=p(`<p><code>OptionalKeys</code>和<code>RequiredKeys</code>所做的事情相反，其获取的是所有可选字段。</p><h4 id="用法-101" tabindex="-1"><a class="header-anchor" href="#用法-101"><span>用法</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  sex<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：&#39;sex&#39; | &#39;address&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> OptionalKeys<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-101" tabindex="-1"><a class="header-anchor" href="#实现方式-101"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">OptionalKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token keyword">keyof</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Pick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">P</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：从上面代码中可以看出，它和<code>RequiredKeys</code>实现思路是一样的，区别只是在<code>extends</code>关键词后面的处理不同。</p><h3 id="getoptional-可选字段组成的类型" tabindex="-1"><a class="header-anchor" href="#getoptional-可选字段组成的类型"><span>GetOptional(可选字段组成的类型)</span></a></h3>`,7)),a(n,{num:"59"}),s[102]||(s[102]=p(`<h4 id="用法-102" tabindex="-1"><a class="header-anchor" href="#用法-102"><span>用法</span></a></h4><p>按照<code>OptionalKeys</code>的实现思路，能够很容易的实现<code>GetOptional</code>。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  sex<span class="token operator">?</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">  address<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：{ sex?: undefined; address?: string; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> GetOptional<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-102" tabindex="-1"><a class="header-anchor" href="#实现方式-102"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">GetOptional<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> <span class="token punctuation">(</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Required<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="capitalizewords-所有单词首字母大写" tabindex="-1"><a class="header-anchor" href="#capitalizewords-所有单词首字母大写"><span>CapitalizeWords(所有单词首字母大写)</span></a></h3>`,6)),a(n,{num:"112"}),s[103]||(s[103]=p('<h4 id="用法-103" tabindex="-1"><a class="header-anchor" href="#用法-103"><span>用法</span></a></h4><p><code>CapitalizeWords</code>是用来把一个字符串中所有单词，变为大写字母的，其中这个字符串以固定的分隔符分割，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;Foobar&#39;</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&#39;foobar&#39;</span><span class="token operator">&gt;</span></span>\n<span class="line"><span class="token comment">// 结果：&#39;Foo Bar.Hello,World&#39;</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&#39;foo bar.hello,world&#39;</span><span class="token operator">&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-103" tabindex="-1"><a class="header-anchor" href="#实现方式-103"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CapitalizeWords<span class="token operator">&lt;</span></span>\n<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>\n<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">  <span class="token operator">?</span> Uppercase<span class="token operator">&lt;</span>First<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name">Lowercase<span class="token operator">&lt;</span>First<span class="token operator">&gt;</span></span></span>\n<span class="line">    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Capitalize<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>CapitalizeWords<span class="token operator">&lt;</span>Rest<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">    <span class="token operator">:</span> CapitalizeWords<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span></span>\n<span class="line">  <span class="token operator">:</span> Capitalize<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>Uppercase&lt;First&gt; extends Lowercase&lt;First&gt;</code>：为了找到连串的大写字符串，例如：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// S = foo bar.hello,world</span></span>\n<span class="line"><span class="token constant">R</span> <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span> First <span class="token operator">=</span> <span class="token string">&#39; &#39;</span> Rest <span class="token operator">=</span> <span class="token string">&#39;bar.hello,world&#39;</span></span>\n<span class="line"><span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Capitalize<span class="token operator">&lt;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">foo </span><span class="token template-punctuation string">`</span></span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&#39;bar.hello,world&#39;</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line"><span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Foo </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>CapitalizeWords<span class="token operator">&lt;</span><span class="token string">&#39;bar.hello,world&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line"><span class="token operator">=&gt;</span> <span class="token operator">...</span></span>\n<span class="line"><span class="token operator">=&gt;</span> <span class="token string">&#39;Foo Bar.Hello,World&#39;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="camelcase-下划线字符串转小驼峰" tabindex="-1"><a class="header-anchor" href="#camelcase-下划线字符串转小驼峰"><span>CamelCase(下划线字符串转小驼峰)</span></a></h3>',9)),a(n,{num:"114"}),s[104]||(s[104]=p('<h4 id="用法-104" tabindex="-1"><a class="header-anchor" href="#用法-104"><span>用法</span></a></h4><p>与<strong>中级</strong>章节实现不同，此章节中<code>CamelCase</code>是用来将下划线字符串转小驼峰的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;fooBarHelloWorld&#39;</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> CamelCase<span class="token operator">&lt;</span><span class="token string">&#39;foo_bar_hello_world&#39;</span><span class="token operator">&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-104" tabindex="-1"><a class="header-anchor" href="#实现方式-104"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsLetter<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Uppercase<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name">Lowercase<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">CamelCase<span class="token operator">&lt;</span></span>\n<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>\n<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">  <span class="token operator">?</span> CamelCase<span class="token operator">&lt;</span></span>\n<span class="line">      Rest<span class="token punctuation">,</span></span>\n<span class="line">      IsLetter<span class="token operator">&lt;</span>First<span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span></span>\n<span class="line">      <span class="token operator">?</span> <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">P</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">        <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">P</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Uppercase<span class="token operator">&lt;</span>First<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">        <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Lowercase<span class="token operator">&lt;</span>First<span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">      <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>First<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">    <span class="token operator">&gt;</span></span>\n<span class="line">  <span class="token operator">:</span> <span class="token constant">R</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>IsLetter</code>: 用来判断是否为字母的。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> IsLetter<span class="token operator">&lt;</span><span class="token string">&#39;$&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// false</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> IsLetter<span class="token operator">&lt;</span><span class="token string">&#39;A&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// true</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>IsLetter&lt;L&gt; extends true</code>: 如果是字母的话，则根据是否以下划线结尾，如果是，则只需要紧邻下划线的字母<code>L</code>大写即可，否小写。</li></ul><h3 id="parseprintformat-获取字符串格式化参数" tabindex="-1"><a class="header-anchor" href="#parseprintformat-获取字符串格式化参数"><span>ParsePrintFormat(获取字符串格式化参数)</span></a></h3>',10)),a(n,{num:"147"}),s[105]||(s[105]=p(`<h4 id="用法-105" tabindex="-1"><a class="header-anchor" href="#用法-105"><span>用法</span></a></h4><p><code>ParsePrintFormat</code>是用来获取字符串格式化参数的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 参数映射表</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ControlMap</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&#39;c&#39;</span><span class="token operator">:</span> <span class="token string">&#39;char&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;s&#39;</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;d&#39;</span><span class="token operator">:</span> <span class="token string">&#39;dec&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;o&#39;</span><span class="token operator">:</span> <span class="token string">&#39;oct&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;h&#39;</span><span class="token operator">:</span> <span class="token string">&#39;hex&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;f&#39;</span><span class="token operator">:</span> <span class="token string">&#39;float&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;p&#39;</span><span class="token operator">:</span> <span class="token string">&#39;pointer&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：[&#39;string&#39;, &#39;dec&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> ParsePrintFormat<span class="token operator">&lt;</span><span class="token string">&#39;Hello %s: score is %d&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-105" tabindex="-1"><a class="header-anchor" href="#实现方式-105"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">ControlMap</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&#39;c&#39;</span><span class="token operator">:</span> <span class="token string">&#39;char&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;s&#39;</span><span class="token operator">:</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;d&#39;</span><span class="token operator">:</span> <span class="token string">&#39;dec&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;o&#39;</span><span class="token operator">:</span> <span class="token string">&#39;oct&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;h&#39;</span><span class="token operator">:</span> <span class="token string">&#39;hex&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;f&#39;</span><span class="token operator">:</span> <span class="token string">&#39;float&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;p&#39;</span><span class="token operator">:</span> <span class="token string">&#39;pointer&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// way1: 借助辅助数组</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ParsePrintFormat<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> Char <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ControlMap</span>
<span class="line">      <span class="token operator">?</span> ParsePrintFormat<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> ControlMap<span class="token punctuation">[</span>Char<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> ParsePrintFormat<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">R</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// way2: 不借助辅助数组</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ParsePrintFormat<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token builtin">string</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Char<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token operator">?</span> Char <span class="token keyword">extends</span> <span class="token keyword">keyof</span> ControlsMap</span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">[</span>ControlsMap<span class="token punctuation">[</span>Char<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span>ParsePrintFormat<span class="token operator">&lt;</span>Rest<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">:</span> ParsePrintFormat<span class="token operator">&lt;</span>Rest<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：在以上实现方法中，借用了辅助数组的思想，拿上面案例来说，具体迭代分析如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 第一次迭代</span></span>
<span class="line"><span class="token constant">S</span>满足条件 <span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">S1</span> <span class="token operator">=</span> <span class="token string">&#39;Hello &#39;</span> Char <span class="token operator">=</span> <span class="token string">&#39;s&#39;</span> <span class="token constant">S2</span> <span class="token operator">=</span> <span class="token string">&#39;: score is %d&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第二次迭代</span></span>
<span class="line"><span class="token constant">S</span>满足条件 <span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">]</span>  <span class="token constant">S1</span> <span class="token operator">=</span> <span class="token string">&#39;: score is &#39;</span> Char <span class="token operator">=</span> <span class="token string">&#39;d&#39;</span> <span class="token constant">S2</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 最后一次迭代</span></span>
<span class="line"><span class="token constant">S</span>不满足条件 <span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dec&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果</span></span>
<span class="line">result <span class="token operator">=</span> <span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;string&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dec&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vuebasicprops-vue的props类型" tabindex="-1"><a class="header-anchor" href="#vuebasicprops-vue的props类型"><span>VueBasicProps(Vue的Props类型)</span></a></h3>`,8)),a(n,{num:"213"}),s[106]||(s[106]=p('<h4 id="用法-106" tabindex="-1"><a class="header-anchor" href="#用法-106"><span>用法</span></a></h4><h4 id="实现方式-106" tabindex="-1"><a class="header-anchor" href="#实现方式-106"><span>实现方式</span></a></h4><h3 id="isany和notany" tabindex="-1"><a class="header-anchor" href="#isany和notany"><span>IsAny和NotAny</span></a></h3>',3)),a(n,{num:"223"}),s[107]||(s[107]=p(`<h4 id="用法-107" tabindex="-1"><a class="header-anchor" href="#用法-107"><span>用法</span></a></h4><p><code>IsAny</code>是用来判断一个类型是否为<code>any</code>的，<code>NotAny</code>和它做的事情相反。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span>     <span class="token comment">// false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t3</span> <span class="token operator">=</span> IsAny<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>       <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t4</span> <span class="token operator">=</span> NotAny<span class="token operator">&lt;</span><span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t5</span> <span class="token operator">=</span> NotAny<span class="token operator">&lt;</span><span class="token builtin">never</span><span class="token operator">&gt;</span>     <span class="token comment">// true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t6</span> <span class="token operator">=</span> NotAny<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>       <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-107" tabindex="-1"><a class="header-anchor" href="#实现方式-107"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">NotAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token keyword">extends</span> <span class="token class-name">IsAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：<code>1 &amp; T</code>的结果只能是：<code>1</code>、<code>never</code>或者<code>any</code>。当使用<code>0 extends</code>这三个结果的时候，只有<code>any</code>判断为真。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">extends</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token comment">// 结果：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">never</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token comment">// 结果：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t3</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="get-字符串路径取值" tabindex="-1"><a class="header-anchor" href="#get-字符串路径取值"><span>Get(字符串路径取值)</span></a></h3>`,8)),a(n,{num:"270"}),s[108]||(s[108]=p(`<h4 id="用法-108" tabindex="-1"><a class="header-anchor" href="#用法-108"><span>用法</span></a></h4><p><code>Get</code>是用来进行字符串路径取值的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Data</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  foo<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    bar<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      value<span class="token operator">:</span> <span class="token string">&#39;foobar&#39;</span><span class="token punctuation">,</span></span>
<span class="line">      count<span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    include<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&#39;foo.baz&#39;</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line">  hello<span class="token operator">:</span> <span class="token string">&#39;world&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：world</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> Get<span class="token operator">&lt;</span>Data<span class="token punctuation">,</span> <span class="token string">&#39;hello&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：foobar</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> Get<span class="token operator">&lt;</span>Data<span class="token punctuation">,</span> <span class="token string">&#39;foo.bar.value&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t3</span> <span class="token operator">=</span> Get<span class="token operator">&lt;</span>Data<span class="token punctuation">,</span> <span class="token string">&#39;foo.baz&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：never</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t4</span> <span class="token operator">=</span> Get<span class="token operator">&lt;</span>Data<span class="token punctuation">,</span> <span class="token string">&#39;no.exits&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-108" tabindex="-1"><a class="header-anchor" href="#实现方式-108"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Get<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> Get<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">S1</span> <span class="token operator">&amp;</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S2</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span> <span class="token operator">&amp;</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：对于<code>Get</code>的实现，主要分为两部分：含有<code>.</code>符号的字符串和不含<code>.</code>符号的字符串。</p><ul><li>含有<code>.</code>符号的字符串：对于这种情况，我们先判断<code>.</code>符号左侧部分是否满足为<code>T</code>类型的某个<code>key</code>，如果满足，则递归调用<code>Get</code>；如果不满足，则直接返回<code>never</code>。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// S1如果是T的属性键，则返回S1；如果不是，则返回never</span></span>
<span class="line">Get<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">S1</span> <span class="token operator">&amp;</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S2</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 等价于</span></span>
<span class="line"><span class="token constant">S1</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> Get<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">S1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S2</span><span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>不含有<code>.</code>符号的字符串：对于这种情况，我们只需要判断它是否为<code>T</code>类型中的某个<code>key</code>，如果是，则直接取值；如果不是，则返回<code>never</code>。</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// K如果是T的属性键，则返回K；如果不是，则返回never</span></span>
<span class="line"><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span> <span class="token operator">&amp;</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">// 等价于</span></span>
<span class="line"><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="stringtonumber-字符串数字转数字" tabindex="-1"><a class="header-anchor" href="#stringtonumber-字符串数字转数字"><span>StringToNumber(字符串数字转数字)</span></a></h3>`,11)),a(n,{num:"300"}),s[109]||(s[109]=p(`<h4 id="用法-109" tabindex="-1"><a class="header-anchor" href="#用法-109"><span>用法</span></a></h4><p><code>StringToNumber</code>是用来将字符串形式的数字转换成真正数字类型数字的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：123</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> StringToNumber<span class="token operator">&lt;</span><span class="token string">&#39;123&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-109" tabindex="-1"><a class="header-anchor" href="#实现方式-109"><span>实现方式</span></a></h4><p>在<code>JavaScript</code>中，我们可以很方便的调用<code>Number()</code>方法或者<code>parseInt()</code>方法来将字符串类型的数字，转换成数字类型的数字。但在<code>TS</code>中，并没有这样的方法，需要我们来手动实现。</p><p><code>StringToNumber</code>的实现并不容易理解，我们需要将其进行拆分，一步步来完善，其实现思路如下：</p><ul><li>第一步：可以很容易获取字符串<code>&#39;123&#39;</code>中每一位字符，我们将其存储在辅助数组<code>T</code>中，如下：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">StringToNumber<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> StringToNumber<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">S1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> StringToNumber<span class="token operator">&lt;</span><span class="token string">&#39;123&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第二步：我们需要将单个字符串类型的数字，转换成真正数字类型的数字，可以借助中间数组来帮忙，例如：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token string">&#39;1&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token number">1</span></span>
<span class="line"><span class="token string">&#39;2&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token number">2</span></span>
<span class="line"><span class="token string">&#39;3&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"><span class="token operator">...</span></span>
<span class="line"><span class="token string">&#39;9&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span> <span class="token number">9</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据以上规律，我们封装一个<code>MakeArray</code>方法，它的实现代码如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">MakeArray<span class="token operator">&lt;</span><span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> MakeArray<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t1</span> <span class="token operator">=</span> MakeArray<span class="token operator">&lt;</span><span class="token string">&#39;1&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// [0]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t2</span> <span class="token operator">=</span> MakeArray<span class="token operator">&lt;</span><span class="token string">&#39;2&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// [0, 0]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">t3</span> <span class="token operator">=</span> MakeArray<span class="token operator">&lt;</span><span class="token string">&#39;3&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// [0, 0, 0]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第三步：现在有了百位，十位和个位的数字，我们应该运用算术把它们按照一定的规律累加起来，如下：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">let</span> target <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第一次迭代</span></span>
<span class="line">target <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token comment">// 第二次迭代</span></span>
<span class="line">target <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">12</span></span>
<span class="line"><span class="token comment">// 第三次迭代</span></span>
<span class="line">target <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">123</span></span>
<span class="line"><span class="token comment">// 迭代规律</span></span>
<span class="line">target <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> target <span class="token operator">+</span> <span class="token constant">N</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据以上思路，我们还需要一个乘十的工具函数，对应到实际需求，就是需要把一个数组<code>copy</code>十次，因此我们封装一个<code>Multiply10</code>工具，其实现代码如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Multiply10<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Multiply10<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token comment">// [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第四步：根据前几步的分析，把所有东西串联起来，<code>StringToNumber</code>完整实现代码如下：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Digital</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token operator">|</span><span class="token string">&#39;1&#39;</span><span class="token operator">|</span><span class="token string">&#39;2&#39;</span><span class="token operator">|</span><span class="token string">&#39;3&#39;</span><span class="token operator">|</span><span class="token string">&#39;4&#39;</span><span class="token operator">|</span><span class="token string">&#39;5&#39;</span><span class="token operator">|</span><span class="token string">&#39;6&#39;</span><span class="token operator">|</span><span class="token string">&#39;7&#39;</span><span class="token operator">|</span><span class="token string">&#39;8&#39;</span><span class="token operator">|</span><span class="token string">&#39;9&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Multiply10<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MakeArray<span class="token operator">&lt;</span><span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> MakeArray<span class="token operator">&lt;</span><span class="token constant">N</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">StringToNumber<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">S1</span> <span class="token keyword">extends</span> <span class="token class-name">Digital</span></span>
<span class="line">      <span class="token operator">?</span> StringToNumber<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>Multiply10<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>MakeArray<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第五步：为了更好的理解递归的过程，我们拆解成如下步骤来说明：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> StringToNumber<span class="token operator">&lt;</span><span class="token string">&#39;123&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第一次递归，S满足\${infer S1}\${infer S2}， S1满足Digital</span></span>
<span class="line"><span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span> <span class="token constant">S1</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span> <span class="token constant">S2</span> <span class="token operator">=</span> <span class="token string">&#39;23&#39;</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第二次递归，S满足\${infer S1}\${infer S2}， S1满足Digital</span></span>
<span class="line"><span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;23&#39;</span>  <span class="token constant">S1</span> <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span> <span class="token constant">S2</span> <span class="token operator">=</span> <span class="token string">&#39;3&#39;</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token number">.0</span><span class="token punctuation">]</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第三次递归，S满足\${infer S1}\${infer S2}， S1满足Digital</span></span>
<span class="line"><span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;3&#39;</span>  <span class="token constant">S1</span> <span class="token operator">=</span> <span class="token string">&#39;3&#39;</span> <span class="token constant">S2</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token number">.0</span><span class="token punctuation">]</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">120</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 第四次递归，S不满足\${infer S1}\${infer S2} T[&#39;length&#39;]取值</span></span>
<span class="line"><span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">...</span><span class="token number">.0</span><span class="token punctuation">]</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> StringToNumber<span class="token operator">&lt;</span><span class="token string">&#39;123&#39;</span><span class="token operator">&gt;</span> <span class="token comment">// 123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filterout-数组元素过滤" tabindex="-1"><a class="header-anchor" href="#filterout-数组元素过滤"><span>FilterOut(数组元素过滤)</span></a></h3>`,21)),a(n,{num:"399"}),s[110]||(s[110]=p(`<h4 id="用法-110" tabindex="-1"><a class="header-anchor" href="#用法-110"><span>用法</span></a></h4><p><code>FilterOut</code>是用来从数组中移除指定元素的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[2]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> FilterOut<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token number">1</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-110" tabindex="-1"><a class="header-anchor" href="#实现方式-110"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FilterOut<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">F</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> args<span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token constant">R</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token constant">F</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token operator">?</span> FilterOut<span class="token operator">&lt;</span>args<span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">:</span> FilterOut<span class="token operator">&lt;</span>args<span class="token punctuation">,</span> <span class="token constant">F</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token constant">K</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li>第一步：我们借用赋值函数来存放最后的结果。</li><li>第二步：迭代数组<code>T</code>，拿每一个元素去和指定的<code>F</code>进行判断，如果<code>R</code>是<code>F</code>的子类型，则不添加此元素到结果数组中，反之添加。</li><li>第三步：当迭代完毕时，直接返回结果数组<code>K</code>。</li></ul><h3 id="tupletoenum-元组转枚举" tabindex="-1"><a class="header-anchor" href="#tupletoenum-元组转枚举"><span>TupleToEnum(元组转枚举)</span></a></h3>`,8)),a(n,{num:"472"}),s[111]||(s[111]=p(`<h4 id="用法-111" tabindex="-1"><a class="header-anchor" href="#用法-111"><span>用法</span></a></h4><p><code>TupleToEnum</code>是用来将元组转换为枚举的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">const</span> OperatingSystem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;macOs&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Windows&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Linux&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Expected1</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> MacOs<span class="token operator">:</span> <span class="token string">&#39;macOs&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">readonly</span> Windows<span class="token operator">:</span> <span class="token string">&#39;Windows&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">readonly</span> Linux<span class="token operator">:</span> <span class="token string">&#39;Linux&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Expected2</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> MacOs<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">readonly</span> Windows<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">readonly</span> Linux<span class="token operator">:</span> <span class="token number">2</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：Expected1</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> TupleToEnum<span class="token operator">&lt;</span><span class="token keyword">typeof</span> OperatingSystem<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果：Expected2</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> TupleToEnum<span class="token operator">&lt;</span><span class="token keyword">typeof</span> OperatingSystem<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-111" tabindex="-1"><a class="header-anchor" href="#实现方式-111"><span>实现方式</span></a></h4><p>在实现<code>TupleToEnum</code>之前，我们先来实现<code>TupleKeys</code>，它是用来获取所有元组索引组合成的联合类型的。</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">TupleKeys<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">readonly</span></span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> args<span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> TupleKeys<span class="token operator">&lt;</span>args<span class="token operator">&gt;</span> <span class="token operator">|</span> args<span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：0 | 1 | 2</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">keys</span> <span class="token operator">=</span> TupleKeys<span class="token operator">&lt;</span><span class="token keyword">typeof</span> OperatingSystem<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在有了以上<code>keys</code>后，就能很容易实现<code>TupleToEnum</code>了，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">TupleToEnum<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> TupleKeys<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token keyword">as</span> Capitalize<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">K</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="format-字符串格式化函数类型" tabindex="-1"><a class="header-anchor" href="#format-字符串格式化函数类型"><span>Format(字符串格式化函数类型)</span></a></h3>`,9)),a(n,{num:"545"}),s[112]||(s[112]=p(`<p><code>%s</code>表示格式化为<code>(x: string) =&gt; any</code>形式，<code>%d</code>表示格式化为<code>(x: number) =&gt; any</code>形式。</p><h4 id="用法-112" tabindex="-1"><a class="header-anchor" href="#用法-112"><span>用法</span></a></h4><p><code>Format</code>是将字符串格式化为指定函数类型的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：(x: string) =&gt; string</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> Format<span class="token operator">&lt;</span><span class="token string">&#39;a%sbc&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：(x: number) =&gt; string</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> Format<span class="token operator">&lt;</span><span class="token string">&#39;a%dbc&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果3：(x: number) =&gt; (x: string) =&gt; string&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result3</span> <span class="token operator">=</span> Format<span class="token operator">&lt;</span><span class="token string">&#39;a%dbc%s&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-112" tabindex="-1"><a class="header-anchor" href="#实现方式-112"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">FormatMaps</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&#39;s&#39;</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token string-property property">&#39;d&#39;</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Format<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">%</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">P</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">?</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> FormatMaps</span>
<span class="line">        <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> FormatMaps<span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Format<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lengthofstring-字符串的长度-1" tabindex="-1"><a class="header-anchor" href="#lengthofstring-字符串的长度-1"><span>LengthOfString(字符串的长度)</span></a></h3>`,7)),a(n,{num:"651"}),s[113]||(s[113]=p('<p>我们之前在<strong>中级</strong>大章节中已经实现过<code>LengthOfString</code>，但它面临的问题是，如果字符有上百个，由于<code>TS</code>对于递归的次数存在限制，会提示嵌套过深。</p><h4 id="用法-113" tabindex="-1"><a class="header-anchor" href="#用法-113"><span>用法</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：91</span></span>\n<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> LengthOfString<span class="token operator">&lt;</span><span class="token string">&#39;1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901&#39;</span><span class="token operator">&gt;</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-113" tabindex="-1"><a class="header-anchor" href="#实现方式-113"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">LengthOfString<span class="token operator">&lt;</span></span>\n<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>\n<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S0</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S3</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S4</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S5</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S6</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S7</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S8</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S9</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> Rest<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">      <span class="token operator">?</span> LengthOfString<span class="token operator">&lt;</span>Rest<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>\n<span class="line">      <span class="token operator">:</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span></span>\n<span class="line">          <span class="token operator">?</span> LengthOfString<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">S1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>\n<span class="line">          <span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码解析：这里我们巧妙的使用占位的思想，<code>S extends ${infer S1}${infer S2}${infer S3}</code>，如果<code>S</code>满足这个占位形式，则表示<code>S</code>的长度至少为<code>2</code>，带入到上面的例子，解析步骤如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 第一次递归</span></span>\n<span class="line"><span class="token constant">S</span>满足至少<span class="token number">10</span>个字符的长度，<span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token comment">// 第二弟递归</span></span>\n<span class="line"><span class="token constant">S</span>满足至少<span class="token number">10</span>个字符的长度，<span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token comment">// 省略</span></span>\n<span class="line"><span class="token comment">// 最后一次递归</span></span>\n<span class="line"><span class="token constant">S</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span>不满足至少<span class="token number">10</span>个字符的长度，<span class="token constant">R</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span></span>\n<span class="line"><span class="token comment">// 最后结果</span></span>\n<span class="line"><span class="token constant">R</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">91</span></span>\n<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="uniontotuple-联合类型转元组" tabindex="-1"><a class="header-anchor" href="#uniontotuple-联合类型转元组"><span>UnionToTuple(联合类型转元组)</span></a></h3>',8)),a(n,{num:"730"}),s[114]||(s[114]=p(`<h4 id="用法-114" tabindex="-1"><a class="header-anchor" href="#用法-114"><span>用法</span></a></h4><p><code>UnionToTuple</code>是用来将联合类型转成元组的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1：[&#39;a&#39;, &#39;b&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> UnionToTuple<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：[&#39;a&#39;, &#39;b&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> UnionToTuple<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果3：[&#39;a&#39;, &#39;b&#39;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result3</span> <span class="token operator">=</span> UnionToTuple<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token builtin">never</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-114" tabindex="-1"><a class="header-anchor" href="#实现方式-114"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> </span>
<span class="line">  <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> </span>
<span class="line">  <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> </span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">R</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">LastUnion<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token operator">&gt;</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token constant">R</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">UnionToTuple<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span><span class="token punctuation">,</span></span>
<span class="line">  Last <span class="token operator">=</span> LastUnion<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">never</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>UnionToTuple<span class="token operator">&lt;</span>Exclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Last<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span> Last<span class="token punctuation">]</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：</p><ul><li><code>UnionToIntersection</code>: 联合类型取交集，在之前已经实现过，这里不再赘述。主要理解以下案例：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数重载结果</span></span>
<span class="line"><span class="token comment">// function (x: 1): 0;</span></span>
<span class="line"><span class="token comment">// function (x: 2): 0;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span>f1 <span class="token operator">|</span> f2<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于函数参数的交集而言，不是简单的把参数取交集，而是&quot;联合&quot;起来，也就是构造一个新的函数类型，即：<strong>函数重载</strong></p><ul><li><code>LastUnion</code>: 取联合类型最后的一个元素，如果一个函数存在重载的情况，<code>TS</code>会取最后一个函数签名，例如：</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果1：2</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> f1 <span class="token operator">&amp;</span> f2 <span class="token keyword">extends</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token comment">// 结果2：1</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> f2 <span class="token operator">&amp;</span> f1 <span class="token keyword">extends</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="join-字符串拼接" tabindex="-1"><a class="header-anchor" href="#join-字符串拼接"><span>Join(字符串拼接)</span></a></h3>`,12)),a(n,{num:"847"}),s[115]||(s[115]=p(`<h4 id="用法-115" tabindex="-1"><a class="header-anchor" href="#用法-115"><span>用法</span></a></h4><p><code>Join</code>是用来实现拼接字符串的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果1： &#39;&#39;</span></span>
<span class="line"><span class="token keyword">const</span> Expected1 <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果2： &#39;a&#39;</span></span>
<span class="line"><span class="token keyword">const</span> Expected2 <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果3： &#39;abc&#39;</span></span>
<span class="line"><span class="token keyword">const</span> Expected3 <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 结果4： &#39;a-b-c&#39;</span></span>
<span class="line"><span class="token keyword">const</span> Expected4 <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-115" tabindex="-1"><a class="header-anchor" href="#实现方式-115"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Tail<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> Rest<span class="token punctuation">]</span> <span class="token operator">?</span> Rest <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">StringJoin<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">D</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> Only<span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> Only</span>
<span class="line">      <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">P</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">D</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>StringJoin<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> Tail<span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">&gt;&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">declare</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">join</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">D</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>delimiter<span class="token operator">:</span> <span class="token constant">D</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">string</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">...</span>parts<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> StringJoin<span class="token operator">&lt;</span><span class="token constant">D</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deeppick-深层次pick" tabindex="-1"><a class="header-anchor" href="#deeppick-深层次pick"><span>DeepPick(深层次Pick)</span></a></h3>`,6)),a(n,{num:"956"}),s[116]||(s[116]=p(`<h4 id="用法-116" tabindex="-1"><a class="header-anchor" href="#用法-116"><span>用法</span></a></h4><p><code>DeepPick</code>是用来深层次获取属性值的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Obj</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  b<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  c<span class="token operator">:</span>  <span class="token builtin">boolean</span><span class="token punctuation">,</span></span>
<span class="line">  obj<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    d<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">    e<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">    f<span class="token operator">:</span>  <span class="token builtin">boolean</span><span class="token punctuation">,</span></span>
<span class="line">    obj2<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      g<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">      h<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">      i<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果1：Obj</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> DeepPick<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：{ a: number; }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> DeepPick<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果3：{ a: number; } &amp; { obj: { d: number; } }</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result3</span> <span class="token operator">=</span> DeepPick<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;obj.d&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-116" tabindex="-1"><a class="header-anchor" href="#实现方式-116"><span>实现方式</span></a></h4><p>在之前，我们实现过根据属性路径取值<code>Get</code>，根据其思路我们很容易实现<code>DeepPick</code>，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> </span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> </span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>x<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">V</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">any</span> </span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">V</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">GetType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">S1</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">S1</span><span class="token punctuation">]</span><span class="token operator">:</span> GetType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">S1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">S2</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">S</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">DeepPick<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> UnionToIntersection<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token keyword">infer</span></span> keys <span class="token operator">?</span> GetType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> keys<span class="token operator">&gt;</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="camelize-对象属性键转小驼峰" tabindex="-1"><a class="header-anchor" href="#camelize-对象属性键转小驼峰"><span>Camelize(对象属性键转小驼峰)</span></a></h3>`,7)),a(n,{num:"1383"}),s[117]||(s[117]=p(`<h4 id="用法-117" tabindex="-1"><a class="header-anchor" href="#用法-117"><span>用法</span></a></h4><p><code>Camelize</code>是用来将对象中的<code>key</code>全部转换为小驼峰的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  some_PROP<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  prop<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    another_prop<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  array<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> snake_case<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Expected</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  someProp<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  prop<span class="token operator">:</span> <span class="token punctuation">{</span> </span>
<span class="line">    anotherProp<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  array<span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> snakeCase<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果：Expected</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Camelize<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-117" tabindex="-1"><a class="header-anchor" href="#实现方式-117"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">CamelCase<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>Lowercase<span class="token operator">&lt;</span><span class="token constant">S1</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>CamelCase<span class="token operator">&lt;</span>Capitalize<span class="token operator">&lt;</span>Lowercase<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;&gt;&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">S</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Camelize<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token keyword">as</span> CamelCase<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token operator">:</span> </span>
<span class="line">    <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">?</span> <span class="token punctuation">[</span>Camelize<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token keyword">extends</span> <span class="token class-name">Object</span></span>
<span class="line">        <span class="token operator">?</span> Camelize<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：<code>CamelCase</code>的实现可以分为两个部分，第一部分来自于处理属性<code>key</code>转小驼峰的情况，第二部分来自于嵌套对象的情况。</p><ul><li>处理属性<code>key</code>：根据之前介绍过的<code>as</code>用法，我们可以在<code>in</code>迭代过程中使用<code>as</code>来进一步<strong>加工或者处理</strong>属性<code>key</code>，也就是<code>CamelCase</code>的部分。</li><li>处理嵌套对象：对于<code>T[P]</code>而言，我们考虑嵌套对象为数组和普通对象的情况，首先判断是否为数组类型，如果是则迭代数组递归调用<code>Camelize</code>；如果是普通对象，则直接调用<code>Camelize</code>；如果都不是，则直接返回<code>T[P]</code>即可。</li></ul><h3 id="dropstring-移除全部字符" tabindex="-1"><a class="header-anchor" href="#dropstring-移除全部字符"><span>DropString(移除全部字符)</span></a></h3>`,8)),a(n,{num:"2059"}),s[118]||(s[118]=p(`<h4 id="用法-118" tabindex="-1"><a class="header-anchor" href="#用法-118"><span>用法</span></a></h4><p><code>DropString</code>是用来移除全部字符的，用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：&#39;ooar!&#39;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> DropString<span class="token operator">&lt;</span><span class="token string">&#39;foobar!&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fb&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-118" tabindex="-1"><a class="header-anchor" href="#实现方式-118"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">StrngToUnion<span class="token operator">&lt;</span><span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> </span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">S1</span> <span class="token operator">|</span> StrngToUnion<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token operator">&gt;</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">S</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">DropString<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">U</span> <span class="token operator">=</span> StrngToUnion<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">?</span> <span class="token constant">S1</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span></span>
<span class="line">      <span class="token operator">?</span> DropString<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>DropString<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">S</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码详解：实现<code>DropString</code>的核心是将指定的字符串转换为联合类型，转换之后只需要迭代字符串，判断当前迭代的字符是不是在联合类型中，如果是则直接丢弃，不是则原样保留。</p><h3 id="split-字符串split方法" tabindex="-1"><a class="header-anchor" href="#split-字符串split方法"><span>Split(字符串Split方法)</span></a></h3>`,7)),a(n,{num:"2822"}),s[119]||(s[119]=p(`<h4 id="用法-119" tabindex="-1"><a class="header-anchor" href="#用法-119"><span>用法</span></a></h4><p><code>Split</code>是用来实现字符串<code>split</code>方法的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 结果：[&quot;Hi!&quot;, &quot;How&quot;, &quot;are&quot;, &quot;you?&quot;]</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result</span> <span class="token operator">=</span> Split<span class="token operator">&lt;</span><span class="token string">&#39;Hi! How are you?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-119" tabindex="-1"><a class="header-anchor" href="#实现方式-119"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Split<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">SEP</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">R</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> _<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">      <span class="token operator">?</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token constant">SEP</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">infer</span> <span class="token constant">S2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">        <span class="token operator">?</span> Split<span class="token operator">&lt;</span><span class="token constant">S2</span><span class="token punctuation">,</span> <span class="token constant">SEP</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">S1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token constant">S</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">          <span class="token operator">?</span> <span class="token constant">SEP</span> <span class="token keyword">extends</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">            <span class="token operator">?</span> <span class="token constant">R</span></span>
<span class="line">            <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">]</span></span>
<span class="line">          <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">S</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="classpublickeys-类的公共键" tabindex="-1"><a class="header-anchor" href="#classpublickeys-类的公共键"><span>ClassPublicKeys(类的公共键)</span></a></h3>`,6)),a(n,{num:"2828"}),s[120]||(s[120]=p('<h4 id="用法-120" tabindex="-1"><a class="header-anchor" href="#用法-120"><span>用法</span></a></h4><h4 id="实现方式-120" tabindex="-1"><a class="header-anchor" href="#实现方式-120"><span>实现方式</span></a></h4><h3 id="isrequiredkeys-是否为必填key" tabindex="-1"><a class="header-anchor" href="#isrequiredkeys-是否为必填key"><span>IsRequiredKeys(是否为必填key)</span></a></h3>',3)),a(n,{num:"2857"}),s[121]||(s[121]=p(`<h4 id="用法-121" tabindex="-1"><a class="header-anchor" href="#用法-121"><span>用法</span></a></h4><p><code>IsRequiredKeys</code>是用来判断是否为必填<code>key</code>的，其用法如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Obj</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  b<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 结果1：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> IsRequiredKeys<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> IsRequiredKeys<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现方式-121" tabindex="-1"><a class="header-anchor" href="#实现方式-121"><span>实现方式</span></a></h4><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsRequiredKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">Record<span class="token operator">&lt;</span><span class="token constant">K</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>根据<code>IsRequiredKey</code>的实现思路，我们可以很容易实现<code>IsOptionalKey</code>，如下：</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsOptionalKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结果1：false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result1</span> <span class="token operator">=</span> IsOptionalKey<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 结果2：true</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">result2</span> <span class="token operator">=</span> IsOptionalKey<span class="token operator">&lt;</span>Obj<span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="objectentries-对象object-entries方法" tabindex="-1"><a class="header-anchor" href="#objectentries-对象object-entries方法"><span>ObjectEntries(对象Object.entries方法)</span></a></h3>`,8)),a(n,{num:"2949"}),s[122]||(s[122]=p('<h4 id="用法-122" tabindex="-1"><a class="header-anchor" href="#用法-122"><span>用法</span></a></h4><h4 id="实现方式-122" tabindex="-1"><a class="header-anchor" href="#实现方式-122"><span>实现方式</span></a></h4><h3 id="ispalindrome-是否为回文" tabindex="-1"><a class="header-anchor" href="#ispalindrome-是否为回文"><span>IsPalindrome(是否为回文)</span></a></h3>',3)),a(n,{num:"4037"}),s[123]||(s[123]=p('<h4 id="用法-123" tabindex="-1"><a class="header-anchor" href="#用法-123"><span>用法</span></a></h4><h4 id="实现方式-123" tabindex="-1"><a class="header-anchor" href="#实现方式-123"><span>实现方式</span></a></h4><h3 id="mutablekeys-所有可写键" tabindex="-1"><a class="header-anchor" href="#mutablekeys-所有可写键"><span>MutableKeys(所有可写键)</span></a></h3>',3)),a(n,{num:"5181"}),s[124]||(s[124]=p('<h4 id="用法-124" tabindex="-1"><a class="header-anchor" href="#用法-124"><span>用法</span></a></h4><h4 id="实现方式-124" tabindex="-1"><a class="header-anchor" href="#实现方式-124"><span>实现方式</span></a></h4><h3 id="intersection-交集" tabindex="-1"><a class="header-anchor" href="#intersection-交集"><span>Intersection(交集)</span></a></h3>',3)),a(n,{num:"5423"}),s[125]||(s[125]=p('<h4 id="用法-125" tabindex="-1"><a class="header-anchor" href="#用法-125"><span>用法</span></a></h4><h4 id="实现方式-125" tabindex="-1"><a class="header-anchor" href="#实现方式-125"><span>实现方式</span></a></h4><h3 id="binarytodecimal-二进制转十进制" tabindex="-1"><a class="header-anchor" href="#binarytodecimal-二进制转十进制"><span>BinaryToDecimal(二进制转十进制)</span></a></h3>',3)),a(n,{num:"6141"}),s[126]||(s[126]=p('<h4 id="用法-126" tabindex="-1"><a class="header-anchor" href="#用法-126"><span>用法</span></a></h4><h4 id="实现方式-126" tabindex="-1"><a class="header-anchor" href="#实现方式-126"><span>实现方式</span></a></h4><h3 id="objectkeypaths-对象属性键路径" tabindex="-1"><a class="header-anchor" href="#objectkeypaths-对象属性键路径"><span>ObjectKeyPaths(对象属性键路径)</span></a></h3>',3)),a(n,{num:"7258"}),s[127]||(s[127]=p('<h4 id="用法-127" tabindex="-1"><a class="header-anchor" href="#用法-127"><span>用法</span></a></h4><h4 id="实现方式-127" tabindex="-1"><a class="header-anchor" href="#实现方式-127"><span>实现方式</span></a></h4><h3 id="twosum-leetcode两数之和" tabindex="-1"><a class="header-anchor" href="#twosum-leetcode两数之和"><span>TwoSum(LeetCode两数之和)</span></a></h3>',3)),a(n,{num:"8804"}),s[128]||(s[128]=p('<h4 id="用法-128" tabindex="-1"><a class="header-anchor" href="#用法-128"><span>用法</span></a></h4><h4 id="实现方式-128" tabindex="-1"><a class="header-anchor" href="#实现方式-128"><span>实现方式</span></a></h4><h3 id="validdate-校验是否为合法日期" tabindex="-1"><a class="header-anchor" href="#validdate-校验是否为合法日期"><span>ValidDate(校验是否为合法日期)</span></a></h3>',3)),a(n,{num:"9155"}),s[129]||(s[129]=p('<h4 id="用法-129" tabindex="-1"><a class="header-anchor" href="#用法-129"><span>用法</span></a></h4><h4 id="实现方式-129" tabindex="-1"><a class="header-anchor" href="#实现方式-129"><span>实现方式</span></a></h4><h3 id="assign-对象object-assign方法" tabindex="-1"><a class="header-anchor" href="#assign-对象object-assign方法"><span>Assign(对象Object.assign方法)</span></a></h3>',3)),a(n,{num:"9160"}),s[130]||(s[130]=p('<h4 id="用法-130" tabindex="-1"><a class="header-anchor" href="#用法-130"><span>用法</span></a></h4><h4 id="实现方式-130" tabindex="-1"><a class="header-anchor" href="#实现方式-130"><span>实现方式</span></a></h4><h3 id="maximum-数字中的最大值" tabindex="-1"><a class="header-anchor" href="#maximum-数字中的最大值"><span>Maximum(数字中的最大值)</span></a></h3>',3)),a(n,{num:"9384"}),s[131]||(s[131]=p('<h4 id="用法-131" tabindex="-1"><a class="header-anchor" href="#用法-131"><span>用法</span></a></h4><h4 id="实现方式-131" tabindex="-1"><a class="header-anchor" href="#实现方式-131"><span>实现方式</span></a></h4><h3 id="deepcapitalize-深度首字母大写" tabindex="-1"><a class="header-anchor" href="#deepcapitalize-深度首字母大写"><span>DeepCapitalize(深度首字母大写)</span></a></h3>',3)),a(n,{num:"9775"}),s[132]||(s[132]=p('<h4 id="用法-132" tabindex="-1"><a class="header-anchor" href="#用法-132"><span>用法</span></a></h4><h4 id="实现方式-132" tabindex="-1"><a class="header-anchor" href="#实现方式-132"><span>实现方式</span></a></h4><h3 id="unionreplace-联合类型替换" tabindex="-1"><a class="header-anchor" href="#unionreplace-联合类型替换"><span>UnionReplace(联合类型替换)</span></a></h3>',3)),a(n,{num:"13580"}),s[133]||(s[133]=p('<h4 id="用法-133" tabindex="-1"><a class="header-anchor" href="#用法-133"><span>用法</span></a></h4><h4 id="实现方式-133" tabindex="-1"><a class="header-anchor" href="#实现方式-133"><span>实现方式</span></a></h4><h3 id="fizzbuzz-fizz和buzz输出问题" tabindex="-1"><a class="header-anchor" href="#fizzbuzz-fizz和buzz输出问题"><span>FizzBuzz(Fizz和Buzz输出问题)</span></a></h3>',3)),a(n,{num:"14080"}),s[134]||(s[134]=p('<h4 id="用法-134" tabindex="-1"><a class="header-anchor" href="#用法-134"><span>用法</span></a></h4><h4 id="实现方式-134" tabindex="-1"><a class="header-anchor" href="#实现方式-134"><span>实现方式</span></a></h4><h3 id="rle-运行长度编码" tabindex="-1"><a class="header-anchor" href="#rle-运行长度编码"><span>RLE(运行长度编码)</span></a></h3>',3)),a(n,{num:"14188"}),s[135]||(s[135]=p('<h4 id="用法-135" tabindex="-1"><a class="header-anchor" href="#用法-135"><span>用法</span></a></h4><h4 id="实现方式-135" tabindex="-1"><a class="header-anchor" href="#实现方式-135"><span>实现方式</span></a></h4><h3 id="objectpatharray-对象键路径数组" tabindex="-1"><a class="header-anchor" href="#objectpatharray-对象键路径数组"><span>ObjectPathArray(对象键路径数组)</span></a></h3>',3)),a(n,{num:"15260"}),s[136]||(s[136]=p('<h4 id="用法-136" tabindex="-1"><a class="header-anchor" href="#用法-136"><span>用法</span></a></h4><h4 id="实现方式-136" tabindex="-1"><a class="header-anchor" href="#实现方式-136"><span>实现方式</span></a></h4><h3 id="snakecase-字符串下划线连接" tabindex="-1"><a class="header-anchor" href="#snakecase-字符串下划线连接"><span>SnakeCase(字符串下划线连接)</span></a></h3>',3)),a(n,{num:"19458"}),s[137]||(s[137]=p('<h4 id="用法-137" tabindex="-1"><a class="header-anchor" href="#用法-137"><span>用法</span></a></h4><h4 id="实现方式-137" tabindex="-1"><a class="header-anchor" href="#实现方式-137"><span>实现方式</span></a></h4><h3 id="isnegativenumber-是否为负数" tabindex="-1"><a class="header-anchor" href="#isnegativenumber-是否为负数"><span>IsNegativeNumber(是否为负数)</span></a></h3>',3)),a(n,{num:"25747"}),s[138]||(s[138]=p('<h4 id="用法-138" tabindex="-1"><a class="header-anchor" href="#用法-138"><span>用法</span></a></h4><h4 id="实现方式-138" tabindex="-1"><a class="header-anchor" href="#实现方式-138"><span>实现方式</span></a></h4><h3 id="optionalundefined-按需转换为可选属性" tabindex="-1"><a class="header-anchor" href="#optionalundefined-按需转换为可选属性"><span>OptionalUndefined(按需转换为可选属性)</span></a></h3>',3)),a(n,{num:"28143"}),s[139]||(s[139]=p('<h4 id="用法-139" tabindex="-1"><a class="header-anchor" href="#用法-139"><span>用法</span></a></h4><h4 id="实现方式-139" tabindex="-1"><a class="header-anchor" href="#实现方式-139"><span>实现方式</span></a></h4><h2 id="地狱" tabindex="-1"><a class="header-anchor" href="#地狱"><span>地狱</span></a></h2><p>撰写中...</p>',4))])}const m=t(r,[["render",k]]),v=JSON.parse('{"path":"/typescript/challenge.html","title":"Type-Challenges","lang":"zh-CN","frontmatter":{"sidebar":"heading"},"git":{"updatedTime":1745852628000,"contributors":[{"name":"wangtunan","username":"wangtunan","email":"why583440138@gmail.com","commits":1,"url":"https://github.com/wangtunan"}],"changelog":[{"hash":"e1c62d225a9dba79e5867f015131ab8661257b81","time":1745852628000,"email":"why583440138@gmail.com","author":"wangtunan","message":"blog RAG基础文章撰写"}]},"filePathRelative":"typescript/challenge.md"}');export{m as comp,v as data};
