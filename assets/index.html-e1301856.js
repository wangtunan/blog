import{_ as n,r as t,o as l,c as r,a as o,b as e,e as d,d as s}from"./app-4d0e8c6f.js";const i={},a=o("h1",{id:"介绍和参考",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#介绍和参考","aria-hidden":"true"},"#"),e(" 介绍和参考")],-1),u=o("code",null,"Vue2.6.11",-1),h={href:"https://coding.imooc.com/class/228.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://www.ituring.com.cn/book/2675",target:"_blank",rel:"noopener noreferrer"},V=o("code",null,"Vue",-1),p=s('<h2 id="vue发展简史" tabindex="-1"><a class="header-anchor" href="#vue发展简史" aria-hidden="true">#</a> Vue发展简史</h2><ul><li>2013年7月，<code>Vue.js</code>在<code>Github</code>上第一次提交，此时名字叫做<code>Element</code>，后来被改名为<code>Seed.js</code>，到现在的<code>Vue.js</code>。</li><li>2013年12月，<code>Github</code>发布<code>0.6</code>版本，并正式更名为<code>Vue.js</code>。</li><li>2014年2月，在<code>Hacker News</code>网站上时候首次公开。</li><li>2015年10月，<code>Vue.js</code>发布<code>1.0.0</code>版本。</li><li>2016年10月，<code>Vue.js</code>发布<code>2.0</code>版本。</li><li>2020年9月18日，<code>Vue.js</code>发布<code>3.0</code>版本。</li></ul><h2 id="vue版本变化" tabindex="-1"><a class="header-anchor" href="#vue版本变化" aria-hidden="true">#</a> Vue版本变化</h2><p><code>Vue2.0</code>版本和<code>Vue1.0</code>版本之间虽然内部变化非常大，整个渲染层都重写了，但<code>API</code>层面的变化却很小，对开发者来说非常友好，另外<code>Vue2.0</code>版本还引入了很多特性：</p><ul><li><code>Virtual DOM</code>虚拟DOM。</li><li>支持<code>JSX</code>语法。</li><li>支持<code>TypeScript</code>。</li><li>支持服务端渲染<code>ssr</code>。</li><li>提供跨平台能力<code>weex</code>。</li></ul>',5),b=o("strong",null,"正确理解虚拟DOM",-1),m=o("code",null,"Vue",-1),f={href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"},x=o("p",null,[o("strong",null,"核心思想"),e("："),o("code",null,"Vue"),e("两大核心思想是"),o("strong",null,"数据驱动"),e("和"),o("strong",null,"组件化"),e("，因此我们在介绍完源码目录设计和整体流程后，会先介绍这两方面。")],-1);function g(j,k){const c=t("ExternalLinkIcon");return l(),r("div",null,[a,o("p",null,[e("本篇"),u,e("源码分析文章由观看"),o("a",h,[e("Vue.js源码全方位深入解析"),d(c)]),e("视频，阅读"),o("a",_,[e("深入浅出Vue.js"),d(c)]),e("书籍以及参考其他"),V,e("源码分析博客而来，阅读视频和书籍请支持正版。")]),p,o("p",null,[b,e("："),m,e("中的虚拟DOM借鉴了开源库"),o("a",f,[e("snabbdom"),d(c)]),e("的实现，并根据自身特色添加了许多特性。引入虚拟DOM的一个很重要的好处是：绝大部分情况下，组件渲染变得更快了，而少部分情况下反而变慢了。引入虚拟DOM这项技术通常都是在解决一些问题，然而解决一个问题的同时也可能会引入其它问题，这种情况更多的是如何做权衡、如何做取舍。因此，一味的强调虚拟DOM在任何时候都能提高性能这种说法需要正确对待和理解。")]),x])}const D=n(i,[["render",g],["__file","index.html.vue"]]);export{D as default};
