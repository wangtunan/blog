import{_ as s,c as a,b as e,o as c}from"./app-DnxTA_sf.js";const t="/blog/assets/lifecycleMixin-mbNrj5eZ.png",p={};function o(i,n){return c(),a("div",null,n[0]||(n[0]=[e(`<h1 id="lifecyclemixin流程" tabindex="-1"><a class="header-anchor" href="#lifecyclemixin流程"><span>lifecycleMixin流程</span></a></h1><p>和以上其它几种方法一样，<code>lifecycleMixin</code>主要是定义实例方法和生命周期，例如：<code>$forceUpdate()</code>、<code>$destroy</code>，另外它还定义一个<code>_update</code>的私有方法，其中当调用<code>$forceUpdate()</code>方法强制组件重新渲染时会调用这个方法，<code>lifecycleMixin</code>精简代码如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">lifecycleMixin</span> <span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 私有方法</span></span>
<span class="line">  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">_update</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 实例方法</span></span>
<span class="line">  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$forceUpdate</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>_watcher<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$destroy</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码分析：</p><ul><li><code>_update()</code>会在组件渲染的时候调用，其具体的实现我们会在组件章节详细介绍。</li><li><code>$forceUpdate()</code>为一个强制<code>Vue</code>实例重新渲染的方法，它的内部调用了<code>_update</code>，也就是强制组件重新编译渲染。</li><li><code>$destroy()</code>为组件销毁方法，在其具体的实现中，会处理父子组件的关系，事件监听，触发生命周期等操作。</li></ul><p><code>lifecycleMixin()</code>方法的代码不是很多，我们也能很容易的得到如下流程图：</p><div style="text-align:center;"><img src="`+t+'"></div>',7)]))}const u=s(p,[["render",o]]),d=JSON.parse('{"path":"/vueAnalysis/entry/lifecycle.html","title":"lifecycleMixin流程","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1746545772000,"contributors":[{"name":"wangtunan","username":"wangtunan","email":"why583440138@gmail.com","commits":1,"url":"https://github.com/wangtunan"}],"changelog":[{"hash":"0819d3a24b098b91020da2fcc54ff0badcec7ca3","time":1746545772000,"email":"why583440138@gmail.com","author":"wangtunan","message":"blog RAG结构化文档导入文章撰写"}]},"filePathRelative":"vueAnalysis/entry/lifecycle.md"}');export{u as comp,d as data};
