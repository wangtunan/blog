import{_ as c,r as t,o as n,c as a,a as e,b as o,e as r,d as s}from"./app-efbb9da8.js";const i="/blog/assets/dom-774e406e.png",l={},h=e("h1",{id:"虚拟dom",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#虚拟dom","aria-hidden":"true"},"#"),o(" 虚拟DOM")],-1),_=e("h2",{id:"虚拟dom介绍",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#虚拟dom介绍","aria-hidden":"true"},"#"),o(" 虚拟DOM介绍")],-1),m=e("code",null,"Vue",-1),p=e("code",null,"2.0+",-1),u=e("code",null,"DOM",-1),b=e("code",null,"Vue",-1),f={href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"},x=s('<p><code>Vue</code>在<code>1.0+</code>版本还没有引入虚拟<code>DOM</code>的时候，当某一个状态发生变化时，它在一定程度上是知道哪些节点使用到了这个状态，从而可以准确的针对这些节点进行更新操作，不需要进行对比。但这种做法是有一定的代价的，因为更新的粒度太细，每一次节点的绑定都需要一个<code>Watcher</code>去观察状态的变化，这样会增加更多的内存开销。当一个状态被越多的节点使用，它的内存开销就越大。</p><p>因此在<code>Vue</code>的<code>2.0+</code>版本中，引入了虚拟<code>DOM</code>将更新粒度调整为组件级别，当状态发生变化的时候，只派发更新到组件级别，然后组件内部再进行对比和渲染。这样做以后，当一个状态在同一个组件内被引用多次的时候，它们只需要一个<code>render watcher</code>去观察状态的变化即可。</p><h2 id="vue中的虚拟dom" tabindex="-1"><a class="header-anchor" href="#vue中的虚拟dom" aria-hidden="true">#</a> Vue中的虚拟DOM</h2><p>虚拟<code>DOM</code>解决<code>DOM</code>更新的方式是：通过状态生成一个虚拟节点树，然后使用虚拟节点树进行渲染，在渲染之前会使用新生成的虚拟节点树和上一次生成的虚拟节点树进行对比，然后只渲染其不相同的部分(包括新增和删除的)。</p><p>在<code>Vue</code>中，根实例就是虚拟节点树的根节点，各种组件就是<code>children</code>孩子节点，树节点使用<code>VNode</code>类来表示。它使用<code>template</code>模板来描述状态与<code>DOM</code>之间的映射关系，然后通过<code>parse</code>编译将<code>template</code>模板转换成渲染函数<code>render</code>，执行渲染函数<code>render</code>就可以得到一个虚拟节点树，最后使用这个虚拟节点树渲染到视图上。</p><p>因此根据上面这段话，我们可以得到<code>Vue</code>使用虚拟<code>DOM</code>进行模板转视图的一个流程。</p><div style="text-align:center;"><img src="'+i+'" alt="虚拟dom"></div>',7);function V(D,M){const d=t("ExternalLinkIcon");return n(),a("div",null,[h,_,e("p",null,[o("我们在最开始提到过，"),m,o("从"),p,o("版本开始就引入了虚拟"),u,o("，也知道"),b,o("中的虚拟DOM借鉴了开源库"),e("a",f,[o("snabbdom"),r(d)]),o("的实现，并根据自身特色添加了许多特性。")]),x])}const v=c(l,[["render",V],["__file","index.html.vue"]]);export{v as default};
