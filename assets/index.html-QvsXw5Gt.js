import{_ as p,r as t,o as c,c as r,a,b as n,e as o,d as e}from"./app-GLyE3c0s.js";const l={},d=e(`<h1 id="monorepo" tabindex="-1"><a class="header-anchor" href="#monorepo" aria-hidden="true">#</a> Monorepo</h1><p><code>Monorepo</code>可以理解为：<strong>利用单一仓库来管理多个packages的一种策略或手段</strong>，与其相对的是我们接触最多的<code>Multirepo</code>。</p><p>可以使用项目目录结构来区分这两种模式：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># monorepo目录结构</span>
<span class="token operator">|</span>-- monorepo-demo              
<span class="token operator">|</span>   <span class="token operator">|</span>-- packages                  <span class="token comment"># packages目录</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- compiler              <span class="token comment"># compiler子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- package.json      <span class="token comment"># compiler子包特有的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- reactivity            <span class="token comment"># reactivity子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- package.json      <span class="token comment"># reactivity子包特有的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- shared                <span class="token comment"># shared子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- package.json      <span class="token comment"># shared子包特有的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>-- package.json              <span class="token comment"># 所有子包都公共的依赖</span>
</code></pre></div><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># multirepo-a目录结构</span>
<span class="token operator">|</span>-- multirepo-a
<span class="token operator">|</span>   <span class="token operator">|</span>-- src 
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- feature1              <span class="token comment"># feature1目录</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- feature2              <span class="token comment"># featrue2目录</span>
<span class="token operator">|</span>   <span class="token operator">|</span>-- package.json              <span class="token comment"># 整个项目依赖</span>

<span class="token comment"># multirepo-b目录结构</span>
<span class="token operator">|</span>-- multirepo-b
<span class="token operator">|</span>   <span class="token operator">|</span>-- src 
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- feature3              <span class="token comment"># feature3目录</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- feature4              <span class="token comment"># featrue4目录</span>
<span class="token operator">|</span>   <span class="token operator">|</span>-- package.json              <span class="token comment"># 整个项目依赖</span>
</code></pre></div><p>可以很清楚的看到他们之间的差异：</p><ul><li><code>Monorepo</code>目录中除了会有公共的<code>package.json</code>依赖以外，在每个<code>sub-package</code>子包下面，也会有其特有的<code>package.json</code>依赖。</li><li><code>Multirepo</code>更倾向与在项目制中，将一个个项目使用不同的仓库进行隔离，每一个项目下使用独有的<code>package.json</code>来管理依赖。</li></ul><p>关于这两者的对比和<code>Monorepo</code>的优缺点，我们会在<strong>Monorepo特点</strong>这个章节进行介绍，在下一节我们来学习如何搭建一个<code>Monorepo</code>应用。</p><h2 id="monorepo项目搭建" tabindex="-1"><a class="header-anchor" href="#monorepo项目搭建" aria-hidden="true">#</a> Monorepo项目搭建</h2><p>目前，搭建<code>Monorepo</code>项目主要有两种方式：</p><ul><li><code>Lerna + yarn workspace</code>方式。</li><li><code>pnpm</code>方式。</li></ul><p>在<code>Vue3.2.22</code>版本中，是使用<code>pnpm</code>来搭建<code>Monorepo</code>项目的，所以我们直接采用第二种方式。</p><h3 id="搭建项目" tabindex="-1"><a class="header-anchor" href="#搭建项目" aria-hidden="true">#</a> 搭建项目</h3><p>全局安装<code>pnpm</code></p>`,14),i={class:"custom-container tip"},k=a("p",{class:"custom-container-title"},"TIP",-1),u={href:"https://pnpm.io/zh/installation",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装pnpm</span>
$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token function">pnpm</span> <span class="token parameter variable">-g</span>

<span class="token comment"># 安装完毕后查看pnpm版本</span>
$ <span class="token function">pnpm</span> <span class="token parameter variable">-v</span>
<span class="token number">6.24</span>.1

<span class="token comment"># 查看node版本</span>
$ <span class="token function">node</span> <span class="token parameter variable">-v</span>
v16.13.0
</code></pre></div><p>安装完毕后，我们创建如下目录结构：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">|</span>-- monorepo-demo              
<span class="token operator">|</span>   <span class="token operator">|</span>-- packages                  <span class="token comment"># packages目录</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- compiler              <span class="token comment"># compiler子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- reactivity            <span class="token comment"># reactivity子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- shared                <span class="token comment"># shared子包</span>
</code></pre></div><p>随后，在根目录以及每一个子包目录下都执行一遍<code>npm init -y</code>命令，让其创建一个<code>package.json</code>文件。全部执行完毕后，其目录结构如下所示：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">|</span>-- monorepo-demo              
<span class="token operator">|</span>   <span class="token operator">|</span>-- packages                  <span class="token comment"># packages目录</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- compiler              <span class="token comment"># compiler子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- package.json      <span class="token comment"># compiler子包特有的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- reactivity            <span class="token comment"># reactivity子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- package.json      <span class="token comment"># reactivity子包特有的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- shared                <span class="token comment"># shared子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- package.json      <span class="token comment"># shared子包特有的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>-- package.json              <span class="token comment"># 所有子包都公共的依赖</span>
</code></pre></div><p>接着，修改根目录下的<code>package.json</code>文件：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;MyVue&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 避免pnpm安装时重名</span>
  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 标记私有，防止意外发布</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>接下来，进入到每一个子包中，依次修改<code>package.json</code>，我们以<code>compiler</code>这个包为例。</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@MyVue/compiler&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 避免安装时跟@vue/* 重名</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@MyVue/compiler&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;test&quot;</span><span class="token operator">:</span> <span class="token string">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ISC&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br><div class="highlight-line"> </div><br><br><br><br><br><br><br><br></div></div><p>最后回到根目录，创建<code>pnpm-workspace.yaml</code>文件，并撰写如下内容：</p><div class="language-yaml" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">packages</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">&#39;packages/*&#39;</span>
</code></pre></div><p>至此，<code>Monorepo</code>项目结构已经初步搭建完毕，此时的目录结构如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token operator">|</span>-- monorepo-demo              
<span class="token operator">|</span>   <span class="token operator">|</span>-- packages                  <span class="token comment"># packages目录</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- compiler              <span class="token comment"># compiler子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- package.json      <span class="token comment"># compiler子包特有的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- reactivity            <span class="token comment"># reactivity子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- package.json      <span class="token comment"># reactivity子包特有的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- shared                <span class="token comment"># shared子包</span>
<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>-- package.json      <span class="token comment"># shared子包特有的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>-- package.json              <span class="token comment"># 所有子包都公共的依赖</span>
<span class="token operator">|</span>   <span class="token operator">|</span>-- pnpm-workspace.yaml       <span class="token comment"># pnpm配置文件</span>
</code></pre></div><h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h3><p>依赖分为两部分，第一部分是公共依赖，第二部分是特有依赖。</p><h4 id="公共依赖" tabindex="-1"><a class="header-anchor" href="#公共依赖" aria-hidden="true">#</a> 公共依赖</h4><p>公共依赖指的是为所有子包共享的包，例如：<code>eslint</code>、<code>typescript</code>或者<code>prettier</code>等等。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在根目录安装eslint 和 typescript</span>
$ <span class="token function">pnpm</span> <span class="token function">install</span> eslint typescript --save-dev
</code></pre></div><p>当执行以上命令后，控制台会报如下错误：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">pnpm</span> <span class="token function">install</span> eslint typescript --save-dev
 ERR_PNPM_ADDING_TO_ROOT  Running this <span class="token builtin class-name">command</span> will <span class="token function">add</span> the dependency to the workspace root, 
 <span class="token function">which</span> might not be what you want - <span class="token keyword">if</span> you really meant it, <span class="token function">make</span> it explicit by running this <span class="token builtin class-name">command</span> again with the <span class="token parameter variable">-w</span> flag <span class="token punctuation">(</span>or --workspace-root<span class="token punctuation">)</span>.
 If you don&#39;t want to see this warning anymore, you may <span class="token builtin class-name">set</span> the ignore-workspace-root-check setting to true.
</code></pre></div><p>上面的意思时：如果我们确定要安装的依赖包需要安装到根目录，那么需要我们添加<code>-w</code>参数，因此修改我们的命令如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在根目录安装eslint 和 typescript</span>
$ <span class="token function">pnpm</span> <span class="token function">install</span> eslint typescript --save-dev <span class="token parameter variable">-w</span>
</code></pre></div><p>安装完毕后，可以在根目录的<code>package.json</code>文件中看到<code>devDependencies</code>依赖包信息：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;eslint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^8.5.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;typescript&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.5.4&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="特有依赖" tabindex="-1"><a class="header-anchor" href="#特有依赖" aria-hidden="true">#</a> 特有依赖</h4><p>现在，假设我们有这样一个场景：</p><ul><li><code>packages/shared</code>依赖包有：<code>lodash</code>。</li><li><code>packages/reactivity</code>依赖包有：<code>@MyVue/shared</code>。</li><li><code>packages/compiler</code>依赖包有：<code>@MyVue/shared</code> 和 <code>@MyVue/reactivity</code></li></ul><p>基于以上场景，我们该如何添加特有依赖？</p><ul><li>给<code>packages/shared</code>添加依赖：</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>-r</code>表示在workspace工作区执行命令，<code>--filter xxx</code> 表示指定在哪个包下执行。</p></div><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">pnpm</span> <span class="token function">install</span> lodash <span class="token parameter variable">-r</span> <span class="token parameter variable">--filter</span> @MyVue/shared
</code></pre></div><p>添加完毕后，可以在<code>packages/shared</code>目录下的<code>package.json</code>文件看到如下<code>dependencies</code>信息：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;lodash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^4.17.21&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>给<code>packages/reactivity</code>添加依赖：</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>因为<code>@MyVue/shared</code>属于本地包依赖，所以带有前缀<code>workspace</code>。</p></div><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">pnpm</span> <span class="token function">install</span> @MyVue/shared <span class="token parameter variable">-r</span> <span class="token parameter variable">--filter</span> @MyVue/reactivity
</code></pre></div><p>添加完毕后，可以在<code>packages/reactivity</code>目录下的<code>package.json</code>文件看到如下<code>dependencies</code>信息：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;@MyVue/shared&quot;</span><span class="token operator">:</span> <span class="token string">&quot;workspace:^1.0.0&quot;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>同样的道理，当我们在<code>packages/compiler</code>安装完依赖后，可以在<code>package.json</code>文件中看到如下<code>dependencies</code>信息：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;dependencies&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
  <span class="token string">&quot;@MyVue/reactivity&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;workspace:^1.0.0&quot;</span>,
  <span class="token string">&quot;@MyVue/shared&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;workspace:^1.0.0&quot;</span>
<span class="token punctuation">}</span>\`
</code></pre></div><p>最后，项目的基础结构已经搭建完毕，在下一节我们来介绍一下<code>Monorepo</code>的特点。</p><h2 id="monorepo特点" tabindex="-1"><a class="header-anchor" href="#monorepo特点" aria-hidden="true">#</a> Monorepo特点</h2><h3 id="monorepo-和-multirepo" tabindex="-1"><a class="header-anchor" href="#monorepo-和-multirepo" aria-hidden="true">#</a> Monorepo 和 Multirepo</h3><p>一般而言，大型开源库，例如<code>Babal</code>以及<code>Vue3</code>等等都会选择使用<code>Monorepo</code>，而日常业务中，通常都是项目制的，通常会选择<code>Multirepo</code>，那么这两者之前有什么区别呢？</p><ul><li><strong>规范、工作流的统一性</strong>：在使用<code>Multirepo</code>时，我们通常在遇到一个新项目的时候，会利用现有的脚手架或者手动重新搭建一套项目结构，这就使得不同的项目往往存在于不同的仓库中，而又因为种种原因无法做到代码规范、构建流程、发布流程等的统一性。使用<code>Monorepo</code>则不会存在这个问题，因为所有的<code>packages</code>包全部都在一个仓库中，自然而然就可以做到代码规范、构建流程和发布流程的统一性。</li><li><strong>代码复用和版本依赖</strong>：想象一下这样一个场景：当你的A项目依赖了B项目中的某个模块，你必须等到<code>B</code>项目重新发布以后，你的<code>A</code>项目才能正常开发或发布。如果<code>B</code>项目是一个基础库的话，那么<code>B</code>的每次更新都会影响到所有依赖<code>B</code>的项目。对那些没有提取复用逻辑，但又会<code>CV</code>在各个项目中函数、组件等，如果存在改动情况，则需要在每一个项目中都改动。这是使用<code>Multirepo</code>必须要去解决的两个问题造：代码复用问题和版本依题。如果使用的是<code>Monorepo</code>则可以很容易的解决这个问题，对于那些需要复用的逻辑，可以选择把它们都提取到一个公共的<code>packages</code>下，例如<code>packages/shared</code>。而对于版本依赖问题，则更好解决。因为所有<code>packages</code>都在一个仓库，无论是本地开发或者发布都没有问题。</li><li><strong>团队协作以及权限控制</strong>：根据<code>Monorepo</code>的特点，各个<code>packages</code>之间相对独立，所以可以很方便的进行职责划分。然而正是因为所有<code>packages</code>都在一个仓库下，所以在代码权限控制上很难像<code>Multirepo</code>那样进行划分，这无疑提高了<code>Monorepo</code>的门槛，它必须严格要求所有开发者严格遵守代码规范、提交规范等。</li><li><strong>项目体积</strong>：对于使用<code>Monorepo</code>的项目来说，随着项目的迭代，在代码体积和git提交方面都会比<code>Multirepo</code>项目增长快的很多，甚至会出现启动一个项目、修改后热更新非常慢的情况。不过随着打包工具的发展，这些都不再是问题。</li></ul><p>这一章、对于<code>Monorepo</code>的介绍就到这里，在下一章我们将介绍<code>Monorepo</code>如何进行<code>rollup</code>打包。</p><h2 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h2>`,47),g={href:"https://zhuanlan.zhihu.com/p/70782864",target:"_blank",rel:"noopener noreferrer"},h={href:"https://segmentfault.com/a/1190000019309820",target:"_blank",rel:"noopener noreferrer"},v={href:"https://segmentfault.com/a/1190000039157365",target:"_blank",rel:"noopener noreferrer"};function q(y,b){const s=t("ExternalLinkIcon");return c(),r("div",null,[d,a("div",i,[k,a("p",null,[a("a",u,[n("官方文档"),o(s)])])]),m,a("ul",null,[a("li",null,[a("a",g,[n("关于 monorepo 的一些尝试"),o(s)])]),a("li",null,[a("a",h,[n("Monorepo——大型前端项目的代码管理方式"),o(s)])]),a("li",null,[a("a",v,[n("All in one：项目级 monorepo 策略最佳实践"),o(s)])])])])}const M=p(l,[["render",q],["__file","index.html.vue"]]);export{M as default};
