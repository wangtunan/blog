import{_ as e,o as a,c as r,d as i}from"./app-ef3230e2.js";const t={},n=i('<h1 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h1><p>复杂度分析犹如浩瀚的算法宇宙中的时空向导，它带领我们在时间与空间这两个维度上深入探索，寻找更优雅的解决方案。</p><h2 id="算法效率评估" tabindex="-1"><a class="header-anchor" href="#算法效率评估" aria-hidden="true">#</a> 算法效率评估</h2><p>在算法设计中，我们先后追求以下两个层面的目标：</p><ol><li><strong>找到问题解法</strong>：算法需要在规定的输入范围内，可靠地求得问题的正确解。</li><li><strong>寻求最优解法</strong>：同一个问题可能存在多种解法，我们希望找到尽可能高效的算法。</li></ol><p>也就是说，在能够解决问题的前提下，算法效率已成为衡量算法优劣的主要评价指标，它包括以下两个维度。</p><ol><li><strong>时间效率</strong>：算法运行速度的快慢。</li><li><strong>空间效率</strong>：算法占用内存空间的大小。</li></ol><p>效率评估方法主要分为两种：实际测试、理论估算。由于实际测试具有较大的局限性，我们可以考虑仅通过一些计算来评估算法的效率。这种估算方法被称为「渐近复杂度分析 asymptotic complexity analysis」，简称「复杂度分析」。</p><p>复杂度分析体现算法运行所需的时间（空间）资源与输入数据大小之间的关系。<strong>它描述了随着输入数据大小的增加，算法执行所需时间和空间的增长趋势</strong>。</p><p>复杂度分析克服了实际测试方法的弊端，体现在以下两个方面：</p><ol><li>它独立于测试环境，分析结果适用于所有运行平台。</li><li>它可以体现不同数据量下的算法效率，尤其是在大数据量下的算法性能。</li></ol><h2 id="时间复杂度" tabindex="-1"><a class="header-anchor" href="#时间复杂度" aria-hidden="true">#</a> 时间复杂度</h2><h2 id="空间复杂度" tabindex="-1"><a class="header-anchor" href="#空间复杂度" aria-hidden="true">#</a> 空间复杂度</h2>',13),o=[n];function s(l,d){return a(),r("div",null,o)}const c=e(t,[["render",s],["__file","index.html.vue"]]);export{c as default};
