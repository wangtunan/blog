import{_ as t,r as p,o,c as e,a as n,b as s,e as c,d as l}from"./app-wtuhfxeL.js";const u={},i=n("h1",{id:"中等",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#中等","aria-hidden":"true"},"#"),s(" 中等")],-1),r=n("h2",{id:"_200-岛屿的数量",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_200-岛屿的数量","aria-hidden":"true"},"#"),s(" 200.岛屿的数量")],-1),k={class:"custom-container tip"},d=n("p",{class:"custom-container-title"},"TIP",-1),_=n("strong",null,"要求",-1),h=n("br",null,null,-1),m=n("strong",null,"输入",-1),b=n("br",null,null,-1),g=n("br",null,null,-1),f=n("br",null,null,-1),j=n("br",null,null,-1),v=n("br",null,null,-1),w=n("br",null,null,-1),y=n("br",null,null,-1),x=n("strong",null,"输出",-1),B=n("br",null,null,-1),I=n("strong",null,"说明",-1),N=n("br",null,null,-1),V=n("strong",null,"原题链接",-1),E={href:"https://leetcode.cn/problems/number-of-islands/",target:"_blank",rel:"noopener noreferrer"},L=l(`<p>方法一：广度优先遍历BFS</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// m和n分别为矩阵行的数量和列的数量</span>
<span class="token comment">// 时间复杂度：O(m * n)</span>
<span class="token comment">// 空间复杂度：O(min(m, n))，最坏情况下遍历完整个矩阵</span>
<span class="token keyword">var</span> <span class="token function-variable function">bfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">&gt;=</span> grid<span class="token punctuation">.</span>length <span class="token operator">||</span>
    j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&gt;=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span>
    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;0&#39;</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">;</span>

  <span class="token function">bfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">bfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">bfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">bfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> <span class="token function-variable function">numIslands</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">grid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">bfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> count<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>`,2);function O(S,T){const a=p("ExternalLinkIcon");return o(),e("div",null,[i,r,n("div",k,[d,n("p",null,[_,s("：给你一个由'1'（陆地）和 '0'（水）组成的的二维网格，请你计算网格中岛屿的数量。"),h,m,s("："),b,s(" grid = ["),g,s(' ["1","1","1","1","0"],'),f,s(' ["1","1","0","1","0"],'),j,s(' ["1","1","0","0","0"],'),v,s(' ["0","0","0","0","0"]'),w,s(" ]"),y,x,s("：1"),B,I,s("：岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成，此外，你可以假设该网格的四条边均被水包围。"),N,V,s("："),n("a",E,[s("200.岛屿的数量"),c(a)])])]),L])}const F=t(u,[["render",O],["__file","index.html.vue"]]);export{F as default};
