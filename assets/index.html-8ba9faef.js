import{_ as c,r as i,o as d,c as n,a as e,b as a,e as r,d as t}from"./app-8324241e.js";const s={},l=t('<h1 id="栈和队列" tabindex="-1"><a class="header-anchor" href="#栈和队列" aria-hidden="true">#</a> 栈和队列</h1><h2 id="栈" tabindex="-1"><a class="header-anchor" href="#栈" aria-hidden="true">#</a> 栈</h2><p>栈<code>Stack</code>是一种遵循先入后出逻辑的线性数据结构。</p><p>栈数据结构一般而言有如下几种概念：</p><ol><li>栈数据结构的顶部叫做<strong>栈顶</strong>。</li><li>栈数据结构的底部叫做<strong>栈底</strong>。</li><li>移除栈顶元素的过程叫做<strong>出栈</strong>。</li><li>向栈顶添加元素的过程叫做<strong>入栈</strong>或者<strong>压栈</strong>。</li></ol><p><img src="https://www.hello-algo.com/chapter_stack_and_queue/stack.assets/stack_operations.png" alt="栈"></p><p>根据以上概念或过程，一般栈有如下几种常见操作：</p><ol><li>入栈<code>push()</code>，时间复杂度<code>O(1)</code>。</li><li>出栈<code>pop()</code>，时间复杂度<code>O(1)</code>。</li><li>访问栈顶元素<code>peek()</code>，时间复杂度<code>O(1)</code>。</li></ol><p>根据不同语言的不同特性，栈有不同的实现方式，在<code>JavaScript</code>中，可以使用数组或者链表来实现栈结构。其中栈结构的属性和方法如下：</p><ul><li><code>push()</code>：向栈顶添加一个元素。</li><li><code>pop()</code>：移除栈顶元素。</li><li><code>peek()</code>：访问栈顶元素。</li><li><code>isEmpty()</code>: 判断栈结构是否为空。</li><li><code>clear()</code>：清空栈中所有元素。</li><li><code>getSize()</code>: 获取栈中元素个数。</li><li><code>toArray()</code>：返回栈数组结构。</li></ul><h3 id="栈数组实现" tabindex="-1"><a class="header-anchor" href="#栈数组实现" aria-hidden="true">#</a> 栈数组实现</h3>',11),h={href:"https://github.com/wangtunan/js-algorithm/blob/master/src/utils/arrayStack.js",target:"_blank",rel:"noopener noreferrer"},p=e("h3",{id:"栈的链表实现",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#栈的链表实现","aria-hidden":"true"},"#"),a(" 栈的链表实现")],-1),_={href:"https://github.com/wangtunan/js-algorithm/blob/master/src/utils/linkedListStack.js",target:"_blank",rel:"noopener noreferrer"},u=t('<h3 id="两种实现方式对比" tabindex="-1"><a class="header-anchor" href="#两种实现方式对比" aria-hidden="true">#</a> 两种实现方式对比</h3><h3 id="栈的典型应用" tabindex="-1"><a class="header-anchor" href="#栈的典型应用" aria-hidden="true">#</a> 栈的典型应用</h3><h2 id="队列" tabindex="-1"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h2>',3);function g(f,k){const o=i("ExternalLinkIcon");return d(),n("div",null,[l,e("p",null,[a("栈的数组实现，请参考"),e("a",h,[a("ArrayStack"),r(o)])]),p,e("p",null,[a("栈的链表实现，请参考"),e("a",_,[a("LinkedListStack"),r(o)])]),u])}const b=c(s,[["render",g],["__file","index.html.vue"]]);export{b as default};
