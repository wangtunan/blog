import{_ as e,o as a,c as t,d}from"./app-8a044cf5.js";const i={},c=d(`<h1 id="git常见命令" tabindex="-1"><a class="header-anchor" href="#git常见命令" aria-hidden="true">#</a> Git常见命令</h1><h2 id="配置name和email" tabindex="-1"><a class="header-anchor" href="#配置name和email" aria-hidden="true">#</a> 配置name和email</h2><h4 id="设置name和email" tabindex="-1"><a class="header-anchor" href="#设置name和email" aria-hidden="true">#</a> 设置name和email</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git config --global user.name &#39;xxxx&#39;
$ git config --global user.email &#39;xxxx@xxxx&#39;
</code></pre></div><h4 id="获取name和email" tabindex="-1"><a class="header-anchor" href="#获取name和email" aria-hidden="true">#</a> 获取name和email</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git config user.name
$ git config user.email
</code></pre></div><h2 id="初始化仓库" tabindex="-1"><a class="header-anchor" href="#初始化仓库" aria-hidden="true">#</a> 初始化仓库</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>可以在空目录初始化仓库，也能是已有的项目初始化仓库</p></div><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git init
</code></pre></div><h2 id="添加文件" tabindex="-1"><a class="header-anchor" href="#添加文件" aria-hidden="true">#</a> 添加文件</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>可以添加一个或者多个文件</p></div><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git add readme.txt
$ git add file1.txt file2.txt
</code></pre></div><h2 id="提交文件" tabindex="-1"><a class="header-anchor" href="#提交文件" aria-hidden="true">#</a> 提交文件</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>-m &#39;说明注释&#39; 代表本次提交的说明注释信息</p></div><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git commit -m &#39;说明注释&#39;
</code></pre></div><h2 id="时光穿梭机" tabindex="-1"><a class="header-anchor" href="#时光穿梭机" aria-hidden="true">#</a> 时光穿梭机</h2><h3 id="获取当前仓库的状态" tabindex="-1"><a class="header-anchor" href="#获取当前仓库的状态" aria-hidden="true">#</a> 获取当前仓库的状态</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git status
</code></pre></div><h3 id="查看修改的内容" tabindex="-1"><a class="header-anchor" href="#查看修改的内容" aria-hidden="true">#</a> 查看修改的内容</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git diff
</code></pre></div><h3 id="版本回退" tabindex="-1"><a class="header-anchor" href="#版本回退" aria-hidden="true">#</a> 版本回退</h3><h4 id="查看提交日志" tabindex="-1"><a class="header-anchor" href="#查看提交日志" aria-hidden="true">#</a> 查看提交日志</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>HEAD</code>：代表当前版本<br><code>HEAD^</code>：代表上一个版本<br><code>HEAD^^</code>：代表上上一个版本</p></div><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git log
</code></pre></div><h4 id="查看命令日志" tabindex="-1"><a class="header-anchor" href="#查看命令日志" aria-hidden="true">#</a> 查看命令日志</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>$ git reflog</code>查看的是每一次的命令的记录，头部有版本号</p></div><h4 id="版本回退-1" tabindex="-1"><a class="header-anchor" href="#版本回退-1" aria-hidden="true">#</a> 版本回退</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>--hard 后面接HEAD或者具体的版本号<br> 例如：<code>$ git reset --hard HEAD^</code>回退到上一个版本<br> 例如：<code>$ git reset --hard 48e56e</code>回退到指定版本<br> 注：回退后，<code>$ git log</code>命令不会输出该版本往后的版本记录，这时可以使用<code>$ git reflog</code>命令先找到版本号</p></div><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git reset --hard HEAD^
</code></pre></div><h3 id="管理修改" tabindex="-1"><a class="header-anchor" href="#管理修改" aria-hidden="true">#</a> 管理修改</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>git 管理的是修改而不是文件</p></div><h4 id="管理修改示例" tabindex="-1"><a class="header-anchor" href="#管理修改示例" aria-hidden="true">#</a> 管理修改示例</h4><ul><li>修改文件</li><li>添加文件到暂存区</li><li>继续修改文件</li><li>提交文件到仓库</li></ul><p><strong>结果</strong>：git只会提交暂存区的内容，即只提交了第一次修改的内容，第二次修改的内容没有提交。</p><h4 id="办法一" tabindex="-1"><a class="header-anchor" href="#办法一" aria-hidden="true">#</a> 办法一</h4><ul><li>先<code>$ git commit</code>提交第一次修改</li><li>再<code>$ git add</code>添加第二次修改</li><li>最后<code>$ git commit</code>提交第二次修改</li></ul><h4 id="办法二" tabindex="-1"><a class="header-anchor" href="#办法二" aria-hidden="true">#</a> 办法二</h4><ul><li>先不提交第一次修改</li><li><code>$ git add</code>添加第二次修改到暂存区</li><li><code>$ git commit</code>一起提交第一次、第二次的修改</li></ul><h3 id="撤销修改" tabindex="-1"><a class="header-anchor" href="#撤销修改" aria-hidden="true">#</a> 撤销修改</h3><p>撤销修改分三种情况</p><ul><li><code>$ git add</code>之前</li><li><code>$ git commit</code>之前</li><li><code>$ git commit</code>之后</li></ul><h4 id="情况一解决办法" tabindex="-1"><a class="header-anchor" href="#情况一解决办法" aria-hidden="true">#</a> 情况一解决办法</h4><p>直接使用<code>$ git checkout -- xxx</code>命令，丢掉当前工作区的修改</p><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git checkout -- readme.txt
</code></pre></div><h4 id="情况二解决办法" tabindex="-1"><a class="header-anchor" href="#情况二解决办法" aria-hidden="true">#</a> 情况二解决办法</h4><ul><li>首先使用<code>$ git reset HEAD xx</code>命令，撤销暂存区的修改</li><li>随后使用<code>$ git checkout -- xx</code>命令，丢弃工作区的修改</li></ul><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git reset HEAD readme.txt
$ git checkout -- readme.txt
</code></pre></div><h4 id="情况三解决办法" tabindex="-1"><a class="header-anchor" href="#情况三解决办法" aria-hidden="true">#</a> 情况三解决办法</h4><p>使用版本回退</p><h3 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件" aria-hidden="true">#</a> 删除文件</h3><ul><li>确定删除某一个文件</li><li>误删了某一个文件</li></ul><h4 id="情况一解决办法-1" tabindex="-1"><a class="header-anchor" href="#情况一解决办法-1" aria-hidden="true">#</a> 情况一解决办法</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git rm test.txt
$ git commit -m &#39;sure remove test.txt&#39;
</code></pre></div><h4 id="情况二解决办法-1" tabindex="-1"><a class="header-anchor" href="#情况二解决办法-1" aria-hidden="true">#</a> 情况二解决办法</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git reset HEAD test.txt
$ git checkout -- test.txt
</code></pre></div><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><h3 id="添加远程仓库" tabindex="-1"><a class="header-anchor" href="#添加远程仓库" aria-hidden="true">#</a> 添加远程仓库</h3><h4 id="关联一个远程仓库" tabindex="-1"><a class="header-anchor" href="#关联一个远程仓库" aria-hidden="true">#</a> 关联一个远程仓库</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git remote add origin git@github.com:xxxxx/xxx
</code></pre></div><h4 id="第一次推送内容到master分支" tabindex="-1"><a class="header-anchor" href="#第一次推送内容到master分支" aria-hidden="true">#</a> 第一次推送内容到master分支</h4><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>-u</code>参数不仅把本地master分支的内容推送到远程仓库的master分支上，而且和远程仓库相关联起来<br> 随后的远程推送内容，只需要<code>$ git push origin master</code>命令即可</p></div><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git push -u origin master
</code></pre></div><h3 id="克隆远程仓库" tabindex="-1"><a class="header-anchor" href="#克隆远程仓库" aria-hidden="true">#</a> 克隆远程仓库</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>git</code>协议是SSH协议，大部分克隆可以使用这种协议<br><code>https</code>协议是口令协议，是针对只开发了https协议的网络</p></div><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git clone git@github.com:xxx/xxx
$ git clone https://github.com/xxx/xxx
</code></pre></div><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><h3 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支" aria-hidden="true">#</a> 创建分支</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git branch xxx
</code></pre></div><h3 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支" aria-hidden="true">#</a> 切换分支</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git checkout xxx
</code></pre></div><h4 id="创建并切换分支的简写" tabindex="-1"><a class="header-anchor" href="#创建并切换分支的简写" aria-hidden="true">#</a> 创建并切换分支的简写</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git checkout -b xxx
</code></pre></div><h3 id="查看所有分支" tabindex="-1"><a class="header-anchor" href="#查看所有分支" aria-hidden="true">#</a> 查看所有分支</h3><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>带<code>*</code>号的表示当前分支</p></div><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git branch
</code></pre></div><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git merge xxx
</code></pre></div><h3 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h3><div class="language-text" data-ext="text"><pre class="language-text"><code>$ git branch -d xxx
</code></pre></div><h3 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突" aria-hidden="true">#</a> 解决冲突</h3><p>当合并分支出现冲突时，可以利用<code>git status</code>查看冲突的位置<br> 在<code>cat xxx</code>命令，查看各分支的内容，手动编辑成相同的<br> 最后提交，删除分支</p><h3 id="bug分支" tabindex="-1"><a class="header-anchor" href="#bug分支" aria-hidden="true">#</a> Bug分支</h3><p>工作做一半，突然接到一个任务解决bug，该怎样进行合理的git操作</p><ul><li><code>git stash</code>命令隐藏当前工作区</li><li><code>git checkout -b xx</code>命令创建并切换到bug分支</li><li><code>git add xx </code> <code>git commit -m xx</code>修复提交bug分支</li><li><code>git checkout master</code>切换到主分支</li><li><code>git merge xxx</code>合并bug分支到主分支</li><li><code>git branch -d xx</code>删除bug分支</li><li><code>git stash pop</code>恢复隐藏的工作现成</li></ul><h3 id="feature分支" tabindex="-1"><a class="header-anchor" href="#feature分支" aria-hidden="true">#</a> Feature分支</h3><p>开发一个新功能mask1，但不保证后续这个新功能需不需要。</p><ul><li><code>git checkout -b mask1</code>创建mask1分支</li><li><code>git add xx</code> <code>git commit -m xxx</code>开发完毕并提交到当前mask1分支上</li></ul><p>上级通知，此功能砍掉，不需要了</p><ul><li><code>git checkout dev</code>切换到开发分支</li><li><code>git branch -D mask1</code>删除mask1分支的内容</li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p><code>-d</code>小写的参数d，再删除时会被提示，改分支没有合并，无法删除<br><code>-D</code>大写的参数D，代表强制删除</p></div><p>CC</p>`,91),r=[c];function s(n,h){return a(),t("div",null,r)}const l=e(i,[["render",s],["__file","index.html.vue"]]);export{l as default};
