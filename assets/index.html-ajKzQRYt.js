import{_ as t,r,o,c as l,a,b as e,e as s,d as c}from"./app-dtl-Qf6E.js";const i={},p=c(`<h1 id="二叉树" tabindex="-1"><a class="header-anchor" href="#二叉树" aria-hidden="true">#</a> 二叉树</h1><h2 id="二叉树-1" tabindex="-1"><a class="header-anchor" href="#二叉树-1" aria-hidden="true">#</a> 二叉树</h2><p><strong>二叉树</strong>是一种非线性数据结构，代表着祖先和后代之间的派生关系，体现着<strong>一分为二</strong>的分治逻辑。</p><p>与链表类似，二叉树的基本单元是节点，其中每个节点包含：根节点、左节点和右节点。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><img src="https://www.hello-algo.com/chapter_tree/binary_tree.assets/binary_tree_definition.png" alt="二叉树"></p><h3 id="二叉树的常见术语" tabindex="-1"><a class="header-anchor" href="#二叉树的常见术语" aria-hidden="true">#</a> 二叉树的常见术语</h3><p>在二叉树中，一般有如下常见术语：</p><ul><li><strong>根节点(rootNode)</strong>: 二叉树的最顶层节点。</li><li><strong>叶子节点(leafNode)</strong>: 没有子节点的节点，即左、右节点全部为空(<code>null</code>)。</li><li><strong>边(edge)</strong>: 连接两个节点的线段，即节点的引用。</li><li><strong>节点所在的层级(level)</strong>: 根节点层级为1，从顶至底递增。</li><li><strong>节点的度(degree)</strong>: 节点的子节点数量，其中范围为0, 1, 2。分别表示没有子节点，即叶子节点；有一个子节点；有两个子节点。</li><li><strong>节点高度(height)</strong>: 从距离该节点最远的叶节点到该节点所经过的边的数量。</li><li><strong>节点深度(Depth)</strong>: 从根节点到该节点所经过的边的数量。</li><li><strong>二叉树的高度(height)</strong>: 从根节点到最远叶节点所经过的边的数量。</li></ul><p><img src="https://www.hello-algo.com/chapter_tree/binary_tree.assets/binary_tree_terminology.png" alt="二叉树常见术语"></p><h3 id="二叉树的常见类型" tabindex="-1"><a class="header-anchor" href="#二叉树的常见类型" aria-hidden="true">#</a> 二叉树的常见类型</h3><h2 id="二叉树的遍历" tabindex="-1"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h2><h3 id="层序遍历" tabindex="-1"><a class="header-anchor" href="#层序遍历" aria-hidden="true">#</a> 层序遍历</h3><h3 id="前、中、后序遍历" tabindex="-1"><a class="header-anchor" href="#前、中、后序遍历" aria-hidden="true">#</a> 前、中、后序遍历</h3><h2 id="二叉树的数组实现" tabindex="-1"><a class="header-anchor" href="#二叉树的数组实现" aria-hidden="true">#</a> 二叉树的数组实现</h2><h2 id="二叉搜索树" tabindex="-1"><a class="header-anchor" href="#二叉搜索树" aria-hidden="true">#</a> 二叉搜索树</h2><h2 id="avl树" tabindex="-1"><a class="header-anchor" href="#avl树" aria-hidden="true">#</a> AVL树</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,18),h={href:"https://www.hello-algo.com/chapter_tree/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.ituring.com.cn/book/2653",target:"_blank",rel:"noopener noreferrer"};function u(k,g){const n=r("ExternalLinkIcon");return o(),l("div",null,[p,a("ul",null,[a("li",null,[a("a",h,[e("Hello 算法 树"),s(n)])]),a("li",null,[a("a",d,[e("JavaScript 数据结构和算法 二叉树章节"),s(n)])])])])}const f=t(i,[["render",u],["__file","index.html.vue"]]);export{f as default};
