import{_ as o,r as e,o as c,c as l,a as n,b as s,e as t,d as p}from"./app-R_Wd5xo5.js";const u={},r=p(`<h1 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表" aria-hidden="true">#</a> 哈希表</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p><code>HashTable</code>哈希表，又称<strong>散列表</strong>，其通过建立<code>key</code>和<code>value</code>之间的映射关系，实现高效的元素查询。</p><p>例如：我们规定有<code>N</code>个学生，每个学生都有<strong>学号</strong>和<strong>姓名</strong>两项数据，我们希望实现输入学号，返回学生姓名的查询功能，则可以采用如下哈希表来实现。 <img src="https://www.hello-algo.com/chapter_hashing/hash_map.assets/hash_table_lookup.png" alt="学生哈希表"></p><p>除哈希表以外，通常还会用链表和数组实现查询功能，三者效率对比如下：</p><table><thead><tr><th>操作</th><th>数组</th><th>链表</th><th>哈希表</th></tr></thead><tbody><tr><td>查找元素</td><td>O(n)</td><td>O(n)</td><td>O(1)</td></tr><tr><td>添加元素</td><td>O(1)</td><td>O(1)</td><td>O(1)</td></tr><tr><td>删除元素</td><td>O(n)</td><td>O(n)</td><td>O(1)</td></tr></tbody></table><p>通过以上表可见：在哈希表中进行增、删、查、改操作时间复杂度都是<code>O(1)</code>，非常高效。</p><p>哈希表的常见操作有：初始化、添加键值对和删除键值对。其遍历方式一般有：键值对遍历、键遍历和值遍历。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 初始化</span>
<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 添加键值对</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">12836</span><span class="token punctuation">,</span> <span class="token string">&#39;小哈&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">15937</span><span class="token punctuation">,</span> <span class="token string">&#39;小啰&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">16750</span><span class="token punctuation">,</span> <span class="token string">&#39;小算&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">13276</span><span class="token punctuation">,</span> <span class="token string">&#39;小法&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">10583</span><span class="token punctuation">,</span> <span class="token string">&#39;小鸭&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 查询操作</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">15937</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// 小罗</span>

<span class="token comment">// 删除键值对</span>
map<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">10583</span><span class="token punctuation">)</span>

<span class="token comment">// 键值对遍历</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 键遍历</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 值遍历</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>基于上面通过学号查询学习姓名的功能，考虑最简单的情况，可以使用数组来实现一个哈希表。</p><ul><li><strong>输入</strong>：学生学号。</li><li><strong>过程</strong>：通过学生学号，得到其所在数组中的索引位置。这个过程由<strong>哈希函数</strong>来实现。</li><li><strong>输出</strong>：学生姓名。</li></ul>`,11),i={href:"https://github.com/wangtunan/js-algorithm/blob/master/src/hashMap/arrayHashMap.js",target:"_blank",rel:"noopener noreferrer"},k=p(`<p><img src="https://www.hello-algo.com/chapter_hashing/hash_map.assets/hash_function.png" alt="哈希实现案例"></p><h2 id="哈希冲突" tabindex="-1"><a class="header-anchor" href="#哈希冲突" aria-hidden="true">#</a> 哈希冲突</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hashFunc</span> <span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> key <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>从以上哈希函数的实现中，很容易可以看出问题：当<code>key</code>超过100时，存在两个不同的<code>key</code>对应同一个索引位置的问题，例如：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token number">110</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">===</span> <span class="token number">10</span> <span class="token operator">%</span> <span class="token number">100</span>
</code></pre></div><p>针对以上情况，我们称之为<strong>哈希冲突</strong>。 <img src="https://www.hello-algo.com/chapter_hashing/hash_map.assets/hash_collision.png" alt="哈希冲突"></p><p>再次审视哈希函数的实现和哈希冲突问题，很容易想到一种解决办法：哈希表容量<code>N</code>越大，多个<code>key</code>被分配到同一个空间的概率就越低，冲突就越少，我们称之为<strong>哈希表扩容</strong>。</p><p>类似于数组的扩容，哈希表扩容需要将原来的键值对重新计算，并重新分配到新的哈希表中，这个过程非常耗时。</p><p>基于哈希表扩容机制，衍生出一个重要概念：<strong>负载因子</strong>，其定义为：哈希表元素的数量除以哈希表的容量，用负载因子来衡量哈希表冲突的严重程度，也常被用于哈希表扩容的触发条件。</p><p>在<code>Java</code>语言中，当负载因子超过<code>0.75</code>时，系统会将哈希表的容量扩展到原来的两倍。</p><h2 id="哈希冲突解决办法" tabindex="-1"><a class="header-anchor" href="#哈希冲突解决办法" aria-hidden="true">#</a> 哈希冲突解决办法</h2><p>当哈希发生冲突时，直接扩容简单粗暴且有效，但其效率实在太低。其它常见的解决办法有：</p><ul><li><strong>链式地址</strong>：将哈希表中值只能存储单一元素，调整为链表，当此<code>key</code>发生哈希冲突时，值当做链表节点进行存储。</li><li><strong>开放寻址</strong>：不引入额外的数据结构，当哈希发生冲突时，通过<strong>多次探测</strong>来处理哈希冲突，探测的方式主要有：线性探测、平方探测以及多次哈希等。</li></ul><h3 id="链式地址" tabindex="-1"><a class="header-anchor" href="#链式地址" aria-hidden="true">#</a> 链式地址</h3><h3 id="开放寻址" tabindex="-1"><a class="header-anchor" href="#开放寻址" aria-hidden="true">#</a> 开放寻址</h3><h2 id="哈希算法" tabindex="-1"><a class="header-anchor" href="#哈希算法" aria-hidden="true">#</a> 哈希算法</h2><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,17),d={href:"https://www.hello-algo.com/chapter_hashing/",target:"_blank",rel:"noopener noreferrer"};function h(g,m){const a=e("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("完整代码，请参考"),n("a",i,[s("数组实现哈希表"),t(a)])]),k,n("ul",null,[n("li",null,[n("a",d,[s("Hello 算法 哈希表"),t(a)])])])])}const _=o(u,[["render",h],["__file","index.html.vue"]]);export{_ as default};
